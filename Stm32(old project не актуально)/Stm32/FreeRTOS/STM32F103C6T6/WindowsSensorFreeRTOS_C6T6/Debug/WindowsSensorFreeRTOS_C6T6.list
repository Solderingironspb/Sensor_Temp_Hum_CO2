
WindowsSensorFreeRTOS_C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba8  08003ba8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba8  08003ba8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000008  08003bb8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  200009d4  08003bb8  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b42  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a19  00000000  00000000  00028b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0002a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001234e  00000000  00000000  0002b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008282  00000000  00000000  0003d566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff26  00000000  00000000  000457e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a570e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f4  00000000  00000000  000a5764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000008 	.word	0x20000008
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b64 	.word	0x08003b64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000000c 	.word	0x2000000c
 800014c:	08003b64 	.word	0x08003b64

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <HDC1080_init>:
uint8_t I2C1_tx_buffer[4] = { 0, };  //Исходящий буфер
uint8_t I2C1_rx_buffer[10] = { 0, };  //Входящий буфер
float Temperature, Humidity;


void HDC1080_init(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
	/*-------------------Просмотр настроек для модуля HDC1080-------------------*/
	I2C1_tx_buffer[0] = 0x02;  //Команда конфигурация
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <HDC1080_init+0x9c>)
 8000614:	2202      	movs	r2, #2
 8000616:	701a      	strb	r2, [r3, #0]
	I2C1_tx_buffer[1] = 0x10;
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <HDC1080_init+0x9c>)
 800061a:	2210      	movs	r2, #16
 800061c:	705a      	strb	r2, [r3, #1]
	I2C1_tx_buffer[2] = 0x00;
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <HDC1080_init+0x9c>)
 8000620:	2200      	movs	r2, #0
 8000622:	709a      	strb	r2, [r3, #2]
	//Скажем модулю, что хотим записать данные на адрес "Configuration" со значением 0x0000
	if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 3, 100)) {
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2303      	movs	r3, #3
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <HDC1080_init+0x9c>)
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	481f      	ldr	r0, [pc, #124]	; (80006ac <HDC1080_init+0xa0>)
 8000630:	f001 f96e 	bl	8001910 <CMSIS_I2C_Data_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <HDC1080_init+0x38>
		ERROR_LED_OFF();  //Неисправностей нет
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <HDC1080_init+0xa4>)
 800063c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	e002      	b.n	800064a <HDC1080_init+0x3e>
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <HDC1080_init+0xa4>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	611a      	str	r2, [r3, #16]
	}
	Delay_ms(20);
 800064a:	2014      	movs	r0, #20
 800064c:	f000 fc60 	bl	8000f10 <Delay_ms>
	//Скажем модулю, что хотим просмотреть данные с адреса "Configuration"
	if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 1, 100)) {
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HDC1080_init+0x9c>)
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <HDC1080_init+0xa0>)
 800065c:	f001 f958 	bl	8001910 <CMSIS_I2C_Data_Transmit>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <HDC1080_init+0x64>
		ERROR_LED_OFF();  //Неисправностей нет
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HDC1080_init+0xa4>)
 8000668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	e002      	b.n	8000676 <HDC1080_init+0x6a>
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HDC1080_init+0xa4>)
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	611a      	str	r2, [r3, #16]
	}
	Delay_ms(20);
 8000676:	2014      	movs	r0, #20
 8000678:	f000 fc4a 	bl	8000f10 <Delay_ms>

	//Сохраним конфигурацию в переменную
	if (CMSIS_I2C_Data_Receive(I2C1, HDC1080ADDR, I2C1_rx_buffer, 2, 100)) {
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <HDC1080_init+0xa8>)
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <HDC1080_init+0xa0>)
 8000688:	f001 fa0c 	bl	8001aa4 <CMSIS_I2C_Data_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d004      	beq.n	800069c <HDC1080_init+0x90>
		ERROR_LED_OFF();  //Неисправностей нет
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HDC1080_init+0xa4>)
 8000694:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000698:	611a      	str	r2, [r3, #16]
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
	}
	/*-------------------Просмотр настроек для модуля HDC1080-------------------*/
}
 800069a:	e002      	b.n	80006a2 <HDC1080_init+0x96>
		ERROR_LED_ON();//Появится сигнализация о неисправности
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HDC1080_init+0xa4>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	611a      	str	r2, [r3, #16]
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000024 	.word	0x20000024
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40010800 	.word	0x40010800
 80006b4:	20000028 	.word	0x20000028

080006b8 <UART_MQTT_Check_net>:
extern struct USART_name husart2; //Объявляем структуру по USART.(см. stm32f103xx_CMSIS.h)


/*----------Проверка подключения ESP8266 к Wifi и MQTT брокеру-----------------*/
/// Проверка подключения ESP8266 к Wifi и MQTT брокеру
void UART_MQTT_Check_net(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if (UART_MQTT_Checksumm_validation(husart2.rx_buffer)) {
 80006bc:	4859      	ldr	r0, [pc, #356]	; (8000824 <UART_MQTT_Check_net+0x16c>)
 80006be:	f000 f8bb 	bl	8000838 <UART_MQTT_Checksumm_validation>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f000 80ab 	beq.w	8000820 <UART_MQTT_Check_net+0x168>
		if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xBB) && (husart2.rx_buffer[4] == 0xBB) && (husart2.rx_buffer[5] == 0xBB) && (husart2.rx_buffer[6] == 0xBB)) {
 80006ca:	4b57      	ldr	r3, [pc, #348]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006cc:	7d1b      	ldrb	r3, [r3, #20]
 80006ce:	2bff      	cmp	r3, #255	; 0xff
 80006d0:	d125      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006d2:	4b55      	ldr	r3, [pc, #340]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006d4:	7d5b      	ldrb	r3, [r3, #21]
 80006d6:	2bff      	cmp	r3, #255	; 0xff
 80006d8:	d121      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006dc:	7d9b      	ldrb	r3, [r3, #22]
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d11d      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006e4:	7ddb      	ldrb	r3, [r3, #23]
 80006e6:	2bbb      	cmp	r3, #187	; 0xbb
 80006e8:	d119      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006ec:	7e1b      	ldrb	r3, [r3, #24]
 80006ee:	2bbb      	cmp	r3, #187	; 0xbb
 80006f0:	d115      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006f4:	7e5b      	ldrb	r3, [r3, #25]
 80006f6:	2bbb      	cmp	r3, #187	; 0xbb
 80006f8:	d111      	bne.n	800071e <UART_MQTT_Check_net+0x66>
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80006fc:	7e9b      	ldrb	r3, [r3, #26]
 80006fe:	2bbb      	cmp	r3, #187	; 0xbb
 8000700:	d10d      	bne.n	800071e <UART_MQTT_Check_net+0x66>
			//WIFI_connected = false; //Wifi еще не подключился
			NETWORK_Status = WIFI_STATUS_NOT_CONNECTED;
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <UART_MQTT_Check_net+0x174>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 7200-1;
 8000708:	4b49      	ldr	r3, [pc, #292]	; (8000830 <UART_MQTT_Check_net+0x178>)
 800070a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000710:	4b47      	ldr	r3, [pc, #284]	; (8000830 <UART_MQTT_Check_net+0x178>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a46      	ldr	r2, [pc, #280]	; (8000830 <UART_MQTT_Check_net+0x178>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	e080      	b.n	8000820 <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xAA) && (husart2.rx_buffer[4] == 0xAA) && (husart2.rx_buffer[5] == 0xAA) && (husart2.rx_buffer[6] == 0xAA)) {
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000720:	7d1b      	ldrb	r3, [r3, #20]
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d125      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000728:	7d5b      	ldrb	r3, [r3, #21]
 800072a:	2bff      	cmp	r3, #255	; 0xff
 800072c:	d121      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000730:	7d9b      	ldrb	r3, [r3, #22]
 8000732:	2bff      	cmp	r3, #255	; 0xff
 8000734:	d11d      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000738:	7ddb      	ldrb	r3, [r3, #23]
 800073a:	2baa      	cmp	r3, #170	; 0xaa
 800073c:	d119      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000740:	7e1b      	ldrb	r3, [r3, #24]
 8000742:	2baa      	cmp	r3, #170	; 0xaa
 8000744:	d115      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000748:	7e5b      	ldrb	r3, [r3, #25]
 800074a:	2baa      	cmp	r3, #170	; 0xaa
 800074c:	d111      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000750:	7e9b      	ldrb	r3, [r3, #26]
 8000752:	2baa      	cmp	r3, #170	; 0xaa
 8000754:	d10d      	bne.n	8000772 <UART_MQTT_Check_net+0xba>
			//WIFI_connected = true; //Wifi подключился
			NETWORK_Status = WIFI_STATUS_CONNECTED;
 8000756:	4b35      	ldr	r3, [pc, #212]	; (800082c <UART_MQTT_Check_net+0x174>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 1800-1;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <UART_MQTT_Check_net+0x178>)
 800075e:	f240 7207 	movw	r2, #1799	; 0x707
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <UART_MQTT_Check_net+0x178>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a31      	ldr	r2, [pc, #196]	; (8000830 <UART_MQTT_Check_net+0x178>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e056      	b.n	8000820 <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xDD) && (husart2.rx_buffer[4] == 0xDD) && (husart2.rx_buffer[5] == 0xDD) && (husart2.rx_buffer[6] == 0xDD)) {
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000774:	7d1b      	ldrb	r3, [r3, #20]
 8000776:	2bff      	cmp	r3, #255	; 0xff
 8000778:	d125      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <UART_MQTT_Check_net+0x170>)
 800077c:	7d5b      	ldrb	r3, [r3, #21]
 800077e:	2bff      	cmp	r3, #255	; 0xff
 8000780:	d121      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000784:	7d9b      	ldrb	r3, [r3, #22]
 8000786:	2bff      	cmp	r3, #255	; 0xff
 8000788:	d11d      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <UART_MQTT_Check_net+0x170>)
 800078c:	7ddb      	ldrb	r3, [r3, #23]
 800078e:	2bdd      	cmp	r3, #221	; 0xdd
 8000790:	d119      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <UART_MQTT_Check_net+0x170>)
 8000794:	7e1b      	ldrb	r3, [r3, #24]
 8000796:	2bdd      	cmp	r3, #221	; 0xdd
 8000798:	d115      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <UART_MQTT_Check_net+0x170>)
 800079c:	7e5b      	ldrb	r3, [r3, #25]
 800079e:	2bdd      	cmp	r3, #221	; 0xdd
 80007a0:	d111      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007a4:	7e9b      	ldrb	r3, [r3, #26]
 80007a6:	2bdd      	cmp	r3, #221	; 0xdd
 80007a8:	d10d      	bne.n	80007c6 <UART_MQTT_Check_net+0x10e>
			//MQTT_connected = false; //Wifi уже работает, но MQTT еще не подключился
			NETWORK_Status = MQTT_STATUS_NOT_CONNECTED;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <UART_MQTT_Check_net+0x174>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 450-1;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <UART_MQTT_Check_net+0x178>)
 80007b2:	f240 12c1 	movw	r2, #449	; 0x1c1
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <UART_MQTT_Check_net+0x178>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <UART_MQTT_Check_net+0x178>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e02c      	b.n	8000820 <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xCC) && (husart2.rx_buffer[4] == 0xCC) && (husart2.rx_buffer[5] == 0xCC) && (husart2.rx_buffer[6] == 0xCC)) {
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007c8:	7d1b      	ldrb	r3, [r3, #20]
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	d128      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007d0:	7d5b      	ldrb	r3, [r3, #21]
 80007d2:	2bff      	cmp	r3, #255	; 0xff
 80007d4:	d124      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007d8:	7d9b      	ldrb	r3, [r3, #22]
 80007da:	2bff      	cmp	r3, #255	; 0xff
 80007dc:	d120      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	2bcc      	cmp	r3, #204	; 0xcc
 80007e4:	d11c      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007e8:	7e1b      	ldrb	r3, [r3, #24]
 80007ea:	2bcc      	cmp	r3, #204	; 0xcc
 80007ec:	d118      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007f0:	7e5b      	ldrb	r3, [r3, #25]
 80007f2:	2bcc      	cmp	r3, #204	; 0xcc
 80007f4:	d114      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <UART_MQTT_Check_net+0x170>)
 80007f8:	7e9b      	ldrb	r3, [r3, #26]
 80007fa:	2bcc      	cmp	r3, #204	; 0xcc
 80007fc:	d110      	bne.n	8000820 <UART_MQTT_Check_net+0x168>
			//MQTT_connected = true; //MQTT подключился
			NETWORK_Status = MQTT_STATUS_CONNECTED;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <UART_MQTT_Check_net+0x174>)
 8000800:	2203      	movs	r2, #3
 8000802:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 7200-1;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <UART_MQTT_Check_net+0x178>)
 8000806:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
			CLEAR_BIT(TIM3->CR1, TIM_CR1_CEN);
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <UART_MQTT_Check_net+0x178>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <UART_MQTT_Check_net+0x178>)
 8000812:	f023 0301 	bic.w	r3, r3, #1
 8000816:	6013      	str	r3, [r2, #0]
			WIFI_LED_ON();
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <UART_MQTT_Check_net+0x17c>)
 800081a:	2210      	movs	r2, #16
 800081c:	611a      	str	r2, [r3, #16]
		}
	}
}
 800081e:	e7ff      	b.n	8000820 <UART_MQTT_Check_net+0x168>
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000978 	.word	0x20000978
 8000828:	20000964 	.word	0x20000964
 800082c:	20000032 	.word	0x20000032
 8000830:	40000400 	.word	0x40000400
 8000834:	40010800 	.word	0x40010800

08000838 <UART_MQTT_Checksumm_validation>:
/*----------Проверка подключения ESP8266 к Wifi и MQTT брокеру-----------------*/

/*----------Проверка контрольной суммы входящего сообщения-----------------*/
/// Проверка контрольной суммы входящего сообщения
/// \param *rx_buffer - буфер, используемый для приема данных
bool UART_MQTT_Checksumm_validation(uint8_t* rx_buffer) {
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	bool result;
	uint16_t CRC_rx_buffer = 0x0000;
 8000840:	2300      	movs	r3, #0
 8000842:	81bb      	strh	r3, [r7, #12]
	uint16_t CRC_check = 0x0000;
 8000844:	2300      	movs	r3, #0
 8000846:	817b      	strh	r3, [r7, #10]
	CRC_rx_buffer = (~(rx_buffer[1] + rx_buffer[2] + rx_buffer[3] + rx_buffer[4] + rx_buffer[5] + rx_buffer[6])) + 1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3301      	adds	r3, #1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3302      	adds	r3, #2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4413      	add	r3, r2
 800085a:	b29a      	uxth	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3303      	adds	r3, #3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b29a      	uxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3304      	adds	r3, #4
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3305      	adds	r3, #5
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	4413      	add	r3, r2
 800087e:	b29a      	uxth	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3306      	adds	r3, #6
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	425b      	negs	r3, r3
 800088e:	81bb      	strh	r3, [r7, #12]
	CRC_check = (CRC_check | rx_buffer[7] << 8) | (CRC_check | rx_buffer[8]);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3307      	adds	r3, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21a      	sxth	r2, r3
 800089a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3308      	adds	r3, #8
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	817b      	strh	r3, [r7, #10]
	//CRC_rx_buffer == CRC_check ? result = true : result = false;
	if (CRC_rx_buffer == CRC_check) {
 80008b0:	89ba      	ldrh	r2, [r7, #12]
 80008b2:	897b      	ldrh	r3, [r7, #10]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d102      	bne.n	80008be <UART_MQTT_Checksumm_validation+0x86>
		result = true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <UART_MQTT_Checksumm_validation+0x8a>
	} else {
		result = false;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <UART_MQTT_Send_data_uint16_t>:
/*----------Отправка uint16_t в массив-----------------*/
/// Отправка uint16_t в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и
/// принимающем устройстве) \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_uint16_t(uint8_t VARIABLE_ID, uint16_t data, uint8_t* tx_buffer) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	603a      	str	r2, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	460b      	mov	r3, r1
 80008de:	80bb      	strh	r3, [r7, #4]
	tx_buffer[0] = 0xFF;  // Start byte
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	22ff      	movs	r2, #255	; 0xff
 80008e4:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x05;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	3302      	adds	r3, #2
 80008f2:	2205      	movs	r2, #5
 80008f4:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = data >> 16;
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	141a      	asrs	r2, r3, #16
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3303      	adds	r3, #3
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = data >> 16;
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	141a      	asrs	r2, r3, #16
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	3304      	adds	r3, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = data >> 8;
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	b29a      	uxth	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3305      	adds	r3, #5
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = data;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	3306      	adds	r3, #6
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b29a      	uxth	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3302      	adds	r3, #2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29a      	uxth	r2, r3
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3303      	adds	r3, #3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4413      	add	r3, r2
 8000944:	b29a      	uxth	r2, r3
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	3305      	adds	r3, #5
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4413      	add	r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	3306      	adds	r3, #6
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b29b      	uxth	r3, r3
 800096a:	425b      	negs	r3, r3
 800096c:	81fb      	strh	r3, [r7, #14]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29a      	uxth	r2, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	3307      	adds	r3, #7
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3308      	adds	r3, #8
 8000980:	89fa      	ldrh	r2, [r7, #14]
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	701a      	strb	r2, [r3, #0]

	CMSIS_USART_Transmit(USART2, tx_buffer, 9, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	2209      	movs	r2, #9
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <UART_MQTT_Send_data_uint16_t+0xcc>)
 800098e:	f000 fe9b 	bl	80016c8 <CMSIS_USART_Transmit>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400

080009a0 <UART_MQTT_Send_data_float>:
/*----------Отправка float в массив-----------------*/
/// Отправка float в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и
/// принимающем устройстве) \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_float(uint8_t VARIABLE_ID, float data, uint8_t* tx_buffer) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	73fb      	strb	r3, [r7, #15]
	tx_buffer[0] = 0xFF;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	22ff      	movs	r2, #255	; 0xff
 80009b2:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x08;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3302      	adds	r3, #2
 80009c0:	2208      	movs	r2, #8
 80009c2:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = *((uint32_t*)&data) >> 24;
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0e1a      	lsrs	r2, r3, #24
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3303      	adds	r3, #3
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = *((uint32_t*)&data) >> 16;
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	0c1a      	lsrs	r2, r3, #16
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3304      	adds	r3, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = *((uint32_t*)&data) >> 8;
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	0a1a      	lsrs	r2, r3, #8
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3305      	adds	r3, #5
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = *((uint32_t*)&data);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3306      	adds	r3, #6
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3301      	adds	r3, #1
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4413      	add	r3, r2
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3304      	adds	r3, #4
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3305      	adds	r3, #5
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	425b      	negs	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 8000a4a:	8afb      	ldrh	r3, [r7, #22]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3307      	adds	r3, #7
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	8afa      	ldrh	r2, [r7, #22]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	701a      	strb	r2, [r3, #0]

	CMSIS_USART_Transmit(USART2, tx_buffer, 9, 100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2209      	movs	r2, #9
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <UART_MQTT_Send_data_float+0xd8>)
 8000a6a:	f000 fe2d 	bl	80016c8 <CMSIS_USART_Transmit>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400

08000a7c <GPIO_init>:
//PA10 USART1 Rx
//PB6 SCL (I2C1 clock) Alternate function open drain
//PB7 SDA (I2C1 Data I/O) Alternate function open drain
/*-----------------------Распиновка-----------------------*/

void GPIO_init(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af02      	add	r7, sp, #8
	/*Настройка PA2 PA3 PA9 PA10 производятся при инициализации USART1 и USART2(см. main.c)*/
	/*Настройка PB6 PB7 производятся при инициализации I2C1 (см. main.c)*/

	/*Инициализация PA4 Wifi LED*/
	CMSIS_GPIO_init(GPIOA, 4, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000a82:	2303      	movs	r3, #3
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2300      	movs	r3, #0
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <GPIO_init+0x64>)
 8000a8e:	f000 fbb7 	bl	8001200 <CMSIS_GPIO_init>

	/*Инициализация PA5 USART1 LED*/
	CMSIS_GPIO_init(GPIOA, 5, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000a92:	2303      	movs	r3, #3
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <GPIO_init+0x64>)
 8000a9e:	f000 fbaf 	bl	8001200 <CMSIS_GPIO_init>

	/*Инициализация PBA I2C1 LED*/
	CMSIS_GPIO_init(GPIOA, 6, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2106      	movs	r1, #6
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <GPIO_init+0x64>)
 8000aae:	f000 fba7 	bl	8001200 <CMSIS_GPIO_init>

	/*Инициализация PA7 Error LED*/
	CMSIS_GPIO_init(GPIOA, 7, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2107      	movs	r1, #7
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <GPIO_init+0x64>)
 8000abe:	f000 fb9f 	bl	8001200 <CMSIS_GPIO_init>

	/*Инициализация PA8 ESP8266 Reset*/
	CMSIS_GPIO_init(GPIOA, 8, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2108      	movs	r1, #8
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <GPIO_init+0x64>)
 8000ace:	f000 fb97 	bl	8001200 <CMSIS_GPIO_init>

	ESP8266_Reset(); //Сбросим ESP8266
 8000ad2:	f000 f807 	bl	8000ae4 <ESP8266_Reset>

	LED_Indication_Test(); //Тест световой индикации
 8000ad6:	f000 f81b 	bl	8000b10 <LED_Indication_Test>

}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010800 	.word	0x40010800

08000ae4 <ESP8266_Reset>:
 ***************************************************************************************
 *  @breif Сброс ESP8266
 *  При запуске МК - сбросим ESP8266, чтоб инициализация прошла синхронно
 ***************************************************************************************
 */
void ESP8266_Reset(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	ESP8266_RESET_ON(); //Нажмем кнопку ресет на ESP8266
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <ESP8266_Reset+0x28>)
 8000aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aee:	611a      	str	r2, [r3, #16]
	Delay_ms(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f000 fa0c 	bl	8000f10 <Delay_ms>
	ESP8266_RESET_OFF(); //Отпустим кнопку ресет на ESP8266
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <ESP8266_Reset+0x28>)
 8000afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000afe:	611a      	str	r2, [r3, #16]
	Delay_ms(200);
 8000b00:	20c8      	movs	r0, #200	; 0xc8
 8000b02:	f000 fa05 	bl	8000f10 <Delay_ms>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010800 	.word	0x40010800

08000b10 <LED_Indication_Test>:
 ***************************************************************************************
 *  @breif Проверка индикации диодов
 *  При запуске МК красиво пробегут огоньки сверху вниз и обратно
 ***************************************************************************************
 */
void LED_Indication_Test(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	WIFI_LED_ON();
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 f9f8 	bl	8000f10 <Delay_ms>
	USART1_LED_ON();
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f000 f9f2 	bl	8000f10 <Delay_ms>
	I2C1_LED_ON();
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b2e:	2240      	movs	r2, #64	; 0x40
 8000b30:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 f9ec 	bl	8000f10 <Delay_ms>
	ERROR_LED_ON();
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b3e:	2064      	movs	r0, #100	; 0x64
 8000b40:	f000 f9e6 	bl	8000f10 <Delay_ms>

	WIFI_LED_OFF();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b4a:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b4c:	2064      	movs	r0, #100	; 0x64
 8000b4e:	f000 f9df 	bl	8000f10 <Delay_ms>
	USART1_LED_OFF();
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b58:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 f9d8 	bl	8000f10 <Delay_ms>
	I2C1_LED_OFF();
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b62:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b66:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 f9d1 	bl	8000f10 <Delay_ms>
	ERROR_LED_OFF();
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b74:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 f9ca 	bl	8000f10 <Delay_ms>

	ERROR_LED_ON();
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b82:	2064      	movs	r0, #100	; 0x64
 8000b84:	f000 f9c4 	bl	8000f10 <Delay_ms>
	I2C1_LED_ON();
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 f9be 	bl	8000f10 <Delay_ms>
	USART1_LED_ON();
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000b96:	2220      	movs	r2, #32
 8000b98:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f000 f9b8 	bl	8000f10 <Delay_ms>
	WIFI_LED_ON();
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f000 f9b2 	bl	8000f10 <Delay_ms>

	ERROR_LED_OFF();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000bae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bb2:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f000 f9ab 	bl	8000f10 <Delay_ms>
	I2C1_LED_OFF();
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000bbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc0:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 f9a4 	bl	8000f10 <Delay_ms>
	USART1_LED_OFF();
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000bca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bce:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f000 f99d 	bl	8000f10 <Delay_ms>
	WIFI_LED_OFF();
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <LED_Indication_Test+0xd8>)
 8000bd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bdc:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bde:	2064      	movs	r0, #100	; 0x64
 8000be0:	f000 f996 	bl	8000f10 <Delay_ms>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010800 	.word	0x40010800

08000bec <main>:
bool start_os = false;

QueueHandle_t xQueue1;
struct USART_rx_data usart1_RX;

int main(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af02      	add	r7, sp, #8
	CMSIS_Debug_init(); //Настройка дебага
 8000bf2:	f000 f897 	bl	8000d24 <CMSIS_Debug_init>
	CMSIS_RCC_SystemClock_72MHz(); //Настроим МК на 72 МГц
 8000bf6:	f000 f8c3 	bl	8000d80 <CMSIS_RCC_SystemClock_72MHz>
	CMSIS_SysTick_Timer_init(); //Настроим системный таймер
 8000bfa:	f000 f957 	bl	8000eac <CMSIS_SysTick_Timer_init>
	CMSIS_TIM3_init(); //Таймер для индикации подключения к сети.
 8000bfe:	f000 fb87 	bl	8001310 <CMSIS_TIM3_init>
	GPIO_init(); //Настроим GPIO
 8000c02:	f7ff ff3b 	bl	8000a7c <GPIO_init>
	CMSIS_USART1_Init(); //общение с модулем MH19Z (9600 8N1)
 8000c06:	f000 fc0b 	bl	8001420 <CMSIS_USART1_Init>
	CMSIS_USART2_Init(); //общение с модулем ESP8266 (9600 8N1)
 8000c0a:	f000 fcb3 	bl	8001574 <CMSIS_USART2_Init>
	CMSIS_I2C1_Init(); //общение с модулем HDC1080 (standart mode)
 8000c0e:	f000 fdb1 	bl	8001774 <CMSIS_I2C1_Init>
	HDC1080_init(); //Проинициализируем модуль HDC1080
 8000c12:	f7ff fcfb 	bl	800060c <HDC1080_init>
#if (USE_DEBUG == 1)
	CMSIS_GPIO_init(GPIOC, 13, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
#endif

	/*Создадим задачи*/
	xTaskCreate((void*)vTask1_MH19Z_Request, "Task1", 30, NULL, 0, NULL);
 8000c16:	2300      	movs	r3, #0
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	221e      	movs	r2, #30
 8000c22:	4913      	ldr	r1, [pc, #76]	; (8000c70 <main+0x84>)
 8000c24:	4813      	ldr	r0, [pc, #76]	; (8000c74 <main+0x88>)
 8000c26:	f001 fdc1 	bl	80027ac <xTaskCreate>
	xTaskCreate((void*)vTask2_HDC1080_Request, "Task2", 30, NULL, 0, NULL);
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	221e      	movs	r2, #30
 8000c36:	4910      	ldr	r1, [pc, #64]	; (8000c78 <main+0x8c>)
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <main+0x90>)
 8000c3a:	f001 fdb7 	bl	80027ac <xTaskCreate>
	xTaskCreate((void*)vTask3_MQTT_Send, "Task3", 30, NULL, 0, NULL);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	2300      	movs	r3, #0
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	221e      	movs	r2, #30
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <main+0x94>)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <main+0x98>)
 8000c4e:	f001 fdad 	bl	80027ac <xTaskCreate>

	/*Создадим очереди*/
	xQueue1 = xQueueCreate(3, sizeof(usart1_RX)); //Создадим очередь на 5 элементов
 8000c52:	2200      	movs	r2, #0
 8000c54:	2115      	movs	r1, #21
 8000c56:	2003      	movs	r0, #3
 8000c58:	f001 fb4a 	bl	80022f0 <xQueueGenericCreate>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <main+0x9c>)
 8000c60:	6013      	str	r3, [r2, #0]

	start_os = 1; //Мы готовы к запуску FreeRTOS
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <main+0xa0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
	vTaskStartScheduler();
 8000c68:	f001 ff04 	bl	8002a74 <vTaskStartScheduler>

	for (;;) {
 8000c6c:	e7fe      	b.n	8000c6c <main+0x80>
 8000c6e:	bf00      	nop
 8000c70:	08003b7c 	.word	0x08003b7c
 8000c74:	08001e1d 	.word	0x08001e1d
 8000c78:	08003b84 	.word	0x08003b84
 8000c7c:	08001ec1 	.word	0x08001ec1
 8000c80:	08003b8c 	.word	0x08003b8c
 8000c84:	0800201d 	.word	0x0800201d
 8000c88:	2000095c 	.word	0x2000095c
 8000c8c:	20000033 	.word	0x20000033

08000c90 <CRC8_MH_Z19_Check>:
uint16_t CO2_ppm; //Уровень углекислого газа в ppm

extern struct USART_rx_data usart1_rx_data;

/*------------------------Проверка CRC-8 от MH-Z19B------------------------*/
bool CRC8_MH_Z19_Check(void) {
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
	uint8_t CRC_MH_Z19;
	CRC_MH_Z19 = (~(usart1_rx_data.rx_buffer[1] + usart1_rx_data.rx_buffer[2] + usart1_rx_data.rx_buffer[3] + usart1_rx_data.rx_buffer[4] + usart1_rx_data.rx_buffer[5] + usart1_rx_data.rx_buffer[6] + usart1_rx_data.rx_buffer[7])) + 1;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000c98:	785a      	ldrb	r2, [r3, #1]
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000ca4:	78db      	ldrb	r3, [r3, #3]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000cb4:	795b      	ldrb	r3, [r3, #5]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000cbc:	799b      	ldrb	r3, [r3, #6]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000cc4:	79db      	ldrb	r3, [r3, #7]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	425b      	negs	r3, r3
 8000ccc:	71fb      	strb	r3, [r7, #7]
	if (CRC_MH_Z19 == usart1_rx_data.rx_buffer[8]) {
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <CRC8_MH_Z19_Check+0x58>)
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d101      	bne.n	8000cdc <CRC8_MH_Z19_Check+0x4c>
		return true;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <CRC8_MH_Z19_Check+0x4e>
	} else {
		return false;
 8000cdc:	2300      	movs	r3, #0
	}
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	200009bc 	.word	0x200009bc

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4906      	ldr	r1, [pc, #24]	; (8000d20 <__NVIC_EnableIRQ+0x34>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <CMSIS_Debug_init>:
 *  Reference Manual/см. п.9.3.5 JTAG/SWD alternate function remapping (стр. 177)
 *  Наверное это нужно настраивать в самом начале, еще до тактирования...
 ***************************************************************************************
 */

void CMSIS_Debug_init(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	*  JTCK / SWCLK PA14
	*  JTDI PA15
	*  JTDO / TRACESWO PB3
	*  NJTRST PB4
	*/
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включим тактирование порта A
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <CMSIS_Debug_init+0x50>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <CMSIS_Debug_init+0x50>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включим тактирование альтернативных функций
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <CMSIS_Debug_init+0x50>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <CMSIS_Debug_init+0x50>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6193      	str	r3, [r2, #24]
	 *  010: JTAG-DP Disabled and SW-DP Enabled               (Serial wire)
	 *  100: JTAG-DP Disabled and SW-DP Disabled              (No Debug)
	 *  Other combinations: no effect
	 */

	MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, 0b010 << AFIO_MAPR_SWJ_CFG_Pos); //Serial wire
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <CMSIS_Debug_init+0x54>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <CMSIS_Debug_init+0x54>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	6053      	str	r3, [r2, #4]
	*  PA13 /JTMS/SWDIO
	*  PA14 /JTCK/SWCLK.
	*  PA15, PB3 и PB4 свободны
	*/
	/*Заблокируем доступ для редактирования конфигурации PA13 и PA14*/
	GPIOA->LCKR = GPIO_LCKR_LCKK | GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <CMSIS_Debug_init+0x58>)
 8000d52:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8000d56:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR = GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <CMSIS_Debug_init+0x58>)
 8000d5a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000d5e:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR = GPIO_LCKR_LCKK | GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <CMSIS_Debug_init+0x58>)
 8000d62:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8000d66:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <CMSIS_Debug_init+0x58>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <CMSIS_RCC_SystemClock_72MHz>:
 *  В настройке также необходимо настроить FLASH на работу, совместимую с 72MHz:
 *  Reference Manual/см. п.3.2 Memory organization (стр. 49)
 ***************************************************************************************
 */

void CMSIS_RCC_SystemClock_72MHz(void) {
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	*  as system clock or is selected to become the system clock.
	*  0 : internal 8 MHz RC oscillator OFF
	*  1 : internal 8 MHz RC oscillator ON
	*/

	SET_BIT(RCC->CR, RCC_CR_HSION); //Запустим внутренний RC генератор на 8 МГц
 8000d84:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]
	*  cleared, HSIRDY goes low after 6 internal 8 MHz RC oscillator clock cycles.
	*  0 : internal 8 MHz RC oscillator not ready
	*  1 : internal 8 MHz RC oscillator ready
	*/

	while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0) ; //Дождемся поднятия флага о готовности
 8000d90:	bf00      	nop
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f9      	beq.n	8000d92 <CMSIS_RCC_SystemClock_72MHz+0x12>
	*  can be written only if the HSE oscillator is disabled.
	*  0: external 4-16 MHz oscillator not bypassed
	*  1: external 4-16 MHz oscillator bypassed with external clock
	*/

	CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP); //Просто сбросим этот бит в 0(Хотя изначально он и так должен быть в 0).
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
	*  bit cannot be reset if the HSE oscillator is used directly or indirectly as the system clock.
	*  0: HSE oscillator OFF
	*  1: HSE oscillator ON
	*/

	SET_BIT(RCC->CR, RCC_CR_HSEON); //Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
	*  HSE oscillator clock to fall down after HSEON reset.
	*  0: HSE oscillator not ready
	*  1: HSE oscillator ready
	*/

	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0) ; //Дождемся поднятия флага о готовности
 8000db6:	bf00      	nop
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f9      	beq.n	8000db8 <CMSIS_RCC_SystemClock_72MHz+0x38>
	*  hardware if a HSE clock failure is detected.
	*  0: Clock detector OFF
	*  1: Clock detector ON (Clock detector ON if the HSE oscillator is ready , OFF if not).
	*/

	SET_BIT(RCC->CR, RCC_CR_CSSON); //Включим CSS
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a36      	ldr	r2, [pc, #216]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dce:	6013      	str	r3, [r2, #0]
	*  01: HSE selected as system clock
	*  10: PLL selected as system clock
	*  11: not allowed
	*/

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSE); //Выберем HSE в качестве System Clock(PLL лучше пока не выбирать, он у нас отключен)
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 0303 	bic.w	r3, r3, #3
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6053      	str	r3, [r2, #4]
	*  1110: SYSCLK divided by 256
	*  1111: SYSCLK divided by 512
	*  Note: The prefetch buffer must be kept on when using a prescaler different from 1 on the
	*  AHB clock. Refer to Reading the Flash memory section for more details.
	*/
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1); //APB Prescaler /1
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dea:	6053      	str	r3, [r2, #4]
	*  000 Zero wait state, if 0 < SYSCLK <= 24 MHz
	*  001 One wait state, if 24 MHz < SYSCLK <= 48 MHz
	*  010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
	*/

	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, 0b010 << FLASH_ACR_LATENCY_Pos); //010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6013      	str	r3, [r2, #0]
	*  Bit 4 PRFTBE: Prefetch buffer enable
	*  0: Prefetch is disabled
	*  1: Prefetch is enabled
	*/

	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE); //Prefetch is enabled
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
	*  100: HCLK divided by 2
	*  101: HCLK divided by 4
	*  110: HCLK divided by 8
	*  111: HCLK divided by 16
	*/
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_DIV2); //APB1 Prescaler /2, т.к. PCLK1 max 36MHz
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e10:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6053      	str	r3, [r2, #4]
	*  101: HCLK divided by 4
	*  110: HCLK divided by 8
	*  111: HCLK divided by 16
	*/

	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_CFGR_PPRE2_DIV1); //APB2 Prescaler /1. Тут нас ничего не ограничивает. Будет 72MHz.
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e1e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e22:	6053      	str	r3, [r2, #4]
	*  01: PCLK2 divided by 4
	*  10: PCLK2 divided by 6
	*  11: PCLK2 divided by 8
	*/

	MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, RCC_CFGR_ADCPRE_DIV6); //ADC Prescaler /6, чтоб было 12MHz, т.к. максимальная частота тут 14 MHz
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e32:	6053      	str	r3, [r2, #4]
	*  Set and cleared by software to select PLL clock source. This bit can be written only when PLL is disabled.
	*  0: HSI oscillator clock / 2 selected as PLL input clock
	*  1: HSE oscillator clock selected as PLL input clock
	*/

	SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC); //В качестве входного сигнала для PLL выберем HSE
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3e:	6053      	str	r3, [r2, #4]
	*  Set and cleared by software to divide HSE before PLL entry. This bit can be written only when PLL is disabled.
	*  0: HSE clock not divided
	*  1: HSE clock divided by 2
	*/

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE_HSE); //Никакое предделение перед PLL нам не нужно. Поэтому /1.
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	6053      	str	r3, [r2, #4]
	*  1101: PLL input clock x 15
	*  1110: PLL input clock x 16
	*  1111: PLL input clock x 16
	*/

	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMULL, RCC_CFGR_PLLMULL9); //т.к. кварц у нас 8Mhz, а нам нужно 72MHz, то в PLL нужно сделать умножение на 9. 8MHz * 9 = 72MHz.
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e52:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000e56:	6053      	str	r3, [r2, #4]
	*  enabling the USB clock in the RCC_APB1ENR register. This bit can’t be reset if the USB clock is enabled.
	*  0: PLL clock is divided by 1.5
	*  1: PLL clock is not divided
	*/

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_USBPRE); //Для USB 72MHz/1.5 = 48MHz
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e62:	6053      	str	r3, [r2, #4]
	*  111: PLL clock divided by 2 selected
	*  Note: This clock output may have some truncated cycles at startup or during MCO clock source switching.
	*  When the System Clock is selected to output to the MCO pin, make sure that this clock does not exceed 50 MHz (the maximum IO speed).
	*/

	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, RCC_CFGR_MCO_PLLCLK_DIV2); //В качестве тактирования для MCO выбрал PLL. Будет 36 MHz.
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e6e:	6053      	str	r3, [r2, #4]
	*  PLL clock is used as system clock or is selected to become the system clock.
	*  0: PLL OFF
	*  1: PLL ON
	*/

	SET_BIT(RCC->CR, RCC_CR_PLLON); //Запустим PLL
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7a:	6013      	str	r3, [r2, #0]

	//Т.к. PLL уже запущен, выберем его в качестве System Clock:
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL); //Выберем PLL в качестве System Clock
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f023 0303 	bic.w	r3, r3, #3
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6053      	str	r3, [r2, #4]
	*  Set by hardware to indicate that the PLL is locked.
	*  0: PLL unlocked
	*  1: PLL locked
	*/

	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0) ; //Дожидемся поднятия флага включения PLL
 8000e8c:	bf00      	nop
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f9      	beq.n	8000e8e <CMSIS_RCC_SystemClock_72MHz+0x10e>

	//В итоге должно получится:
	//RCC->CR == 0x030B5A83
	//RCC->CFGR == 0x071D840A
	//К сожалению, нельзя просто так взять и сразу применить значения регистров и настроить все в 2 строчки кода, т.к. порядок выполнения команд играет очень большую роль.
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40022000 	.word	0x40022000

08000eac <CMSIS_SysTick_Timer_init>:
 *  На этом таймере мы настроим Delay и аналог HAL_GetTick()
 *  PM0056 STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual/
 *  см. п.4.5 SysTick timer (STK) (стр. 150)
 ***************************************************************************************
 */
void CMSIS_SysTick_Timer_init(void) {
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	*  value again, and begins counting.
	*  0 : Counter disabled
	*  1 : Counter enabled
	*/

	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]
	*  Bit 1 TICKINT: SysTick exception request enable
	*  0: Counting down to zero does not assert the SysTick exception request
	*  1: Counting down to zero to asserts the SysTick exception request.
	*  Note: Software can use COUNTFLAG to determine if SysTick has ever counted to zero.
	*/
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6013      	str	r3, [r2, #0]
	*  Bit 2 CLKSOURCE : Clock source selection
	*  Selects the clock source.
	*  0 : AHB / 8
	*  1 : Processor clock(AHB)
	*/
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 72MHz
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6013      	str	r3, [r2, #0]
	*  l To deliver a single SysTick interrupt after a delay of N processor clock cycles, use a
	*  RELOAD of value N.For example, if a SysTick interrupt is required after 400 clock
	*  pulses, set RELOAD to 400.
	*/

	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk, 71999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000edc:	490a      	ldr	r1, [pc, #40]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <CMSIS_SysTick_Timer_init+0x60>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
	*  Reads return the current value of the SysTick counter.
	*  A write of any value clears the field to 0, and also clears the COUNTFLAG bit in the
	*  STK_CTRL register to 0
	*/

	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk, 71999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 71999
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <CMSIS_SysTick_Timer_init+0x60>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]

	/*Есть там еще регистр калибровки, но я его трогать не буду*/

	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <CMSIS_SysTick_Timer_init+0x5c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	e000e010 	.word	0xe000e010
 8000f0c:	0001193f 	.word	0x0001193f

08000f10 <Delay_ms>:
 ******************************************************************************
 *  @breif Delay_ms
 *  @param   uint32_t Milliseconds - Длина задержки в миллисекундах
 ******************************************************************************
 */
void Delay_ms(uint32_t Milliseconds) {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <Delay_ms+0x24>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
	while (Delay_counter_ms != 0) ;
 8000f1e:	bf00      	nop
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <Delay_ms+0x24>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1fb      	bne.n	8000f20 <Delay_ms+0x10>
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000038 	.word	0x20000038

08000f38 <SysTick_Handler>:
 *  Список векторов(прерываний) можно найти в файле startup_stm32f103c8tx.S
 ******************************************************************************
 */
extern bool start_os;

void SysTick_Handler(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	SysTimer_ms++;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <SysTick_Handler+0x44>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <SysTick_Handler+0x44>)
 8000f44:	6013      	str	r3, [r2, #0]

	if (Delay_counter_ms) {
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <SysTick_Handler+0x48>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <SysTick_Handler+0x20>
		Delay_counter_ms--;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <SysTick_Handler+0x48>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Handler+0x48>)
 8000f56:	6013      	str	r3, [r2, #0]
	}
	if (Timeout_counter_ms) {
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SysTick_Handler+0x4c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <SysTick_Handler+0x32>
		Timeout_counter_ms--;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <SysTick_Handler+0x4c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <SysTick_Handler+0x4c>)
 8000f68:	6013      	str	r3, [r2, #0]
	}
#if defined FreeRTOS_USE
	if (start_os){
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <SysTick_Handler+0x50>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SysTick_Handler+0x3e>
		xPortSysTickHandler();
 8000f72:	f002 fd81 	bl	8003a78 <xPortSysTickHandler>
	}
#endif
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	20000038 	.word	0x20000038
 8000f84:	2000003c 	.word	0x2000003c
 8000f88:	20000033 	.word	0x20000033

08000f8c <CMSIS_GPIO_MODE_Set>:
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_MODE13, 0b10 << GPIO_CRH_MODE13_Pos); //Настройка GPIOC порта 13 на выход со максимальной скоростью в 50 MHz
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13, 0b00 << GPIO_CRH_CNF13_Pos); //Настройка GPIOC порта 13 на выход в режиме Push-Pull
}

//Служебная функция
static void CMSIS_GPIO_MODE_Set(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Reg, uint8_t Data) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	70fb      	strb	r3, [r7, #3]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70bb      	strb	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	707b      	strb	r3, [r7, #1]
	uint8_t Mode = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	switch (Reg) {
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <CMSIS_GPIO_MODE_Set+0x2a>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d013      	beq.n	8000fdc <CMSIS_GPIO_MODE_Set+0x50>
		GPIO_Pin = GPIO_Pin - 8;
		Mode = GPIO_Pin * 4;
		MODIFY_REG(GPIO->CRH, (0x3UL << Mode), Data << Mode); 	
		break;
	}
}
 8000fb4:	e028      	b.n	8001008 <CMSIS_GPIO_MODE_Set+0x7c>
		Mode = GPIO_Pin * 4;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	73fb      	strb	r3, [r7, #15]
		MODIFY_REG(GPIO->CRL, (0x3UL << Mode), Data << Mode); 	
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4013      	ands	r3, r2
 8000fcc:	7879      	ldrb	r1, [r7, #1]
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
		break;
 8000fda:	e015      	b.n	8001008 <CMSIS_GPIO_MODE_Set+0x7c>
		GPIO_Pin = GPIO_Pin - 8;
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	70fb      	strb	r3, [r7, #3]
		Mode = GPIO_Pin * 4;
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	73fb      	strb	r3, [r7, #15]
		MODIFY_REG(GPIO->CRH, (0x3UL << Mode), Data << Mode); 	
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2103      	movs	r1, #3
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	7879      	ldrb	r1, [r7, #1]
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	605a      	str	r2, [r3, #4]
		break;
 8001006:	bf00      	nop
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <CMSIS_GPIO_SPEED_Set>:

//Служебная функция
static void CMSIS_GPIO_SPEED_Set(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Speed) {
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	70fb      	strb	r3, [r7, #3]
 800101e:	4613      	mov	r3, r2
 8001020:	70bb      	strb	r3, [r7, #2]
	uint8_t Reg = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
	if (GPIO_Pin < 8) {
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	2b07      	cmp	r3, #7
 800102a:	d802      	bhi.n	8001032 <CMSIS_GPIO_SPEED_Set+0x20>
		Reg = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e001      	b.n	8001036 <CMSIS_GPIO_SPEED_Set+0x24>
	} else {
		Reg = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
	}
	//MODE
	if (Speed == GPIO_SPEED_RESERVED) {
 8001036:	78bb      	ldrb	r3, [r7, #2]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <CMSIS_GPIO_SPEED_Set+0x38>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b00);
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	78f9      	ldrb	r1, [r7, #3]
 8001040:	2300      	movs	r3, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <CMSIS_GPIO_MODE_Set>
	} else if (Speed == GPIO_SPEED_2_MHZ) {
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b10);
	} else if (Speed == GPIO_SPEED_50_MHZ) {
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b11);
	}
}
 8001048:	e01c      	b.n	8001084 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_10_MHZ) {
 800104a:	78bb      	ldrb	r3, [r7, #2]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <CMSIS_GPIO_SPEED_Set+0x4c>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b01);
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	78f9      	ldrb	r1, [r7, #3]
 8001054:	2301      	movs	r3, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff98 	bl	8000f8c <CMSIS_GPIO_MODE_Set>
}
 800105c:	e012      	b.n	8001084 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_2_MHZ) {
 800105e:	78bb      	ldrb	r3, [r7, #2]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d106      	bne.n	8001072 <CMSIS_GPIO_SPEED_Set+0x60>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b10);
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	78f9      	ldrb	r1, [r7, #3]
 8001068:	2302      	movs	r3, #2
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff8e 	bl	8000f8c <CMSIS_GPIO_MODE_Set>
}
 8001070:	e008      	b.n	8001084 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_50_MHZ) {
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d105      	bne.n	8001084 <CMSIS_GPIO_SPEED_Set+0x72>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b11);
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	78f9      	ldrb	r1, [r7, #3]
 800107c:	2303      	movs	r3, #3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff84 	bl	8000f8c <CMSIS_GPIO_MODE_Set>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <CMSIS_GPIO_CNF_Set>:

//Служебная функция
static void CMSIS_GPIO_CNF_Set(GPIO_TypeDef *GPIO, uint8_t Reg, uint8_t Mode, uint8_t* CNF_Pos) {
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	4613      	mov	r3, r2
 800109c:	72bb      	strb	r3, [r7, #10]
	switch (Reg) {
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <CMSIS_GPIO_CNF_Set+0x1e>
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d012      	beq.n	80010ce <CMSIS_GPIO_CNF_Set+0x42>
		MODIFY_REG(GPIO->CRL, (0x3UL << *CNF_Pos), Mode << *CNF_Pos); 
		break;
	case(1):
		MODIFY_REG(GPIO->CRH, (0x3UL << *CNF_Pos), Mode << *CNF_Pos); 
	}
}
 80010a8:	e021      	b.n	80010ee <CMSIS_GPIO_CNF_Set+0x62>
		MODIFY_REG(GPIO->CRL, (0x3UL << *CNF_Pos), Mode << *CNF_Pos); 
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	408b      	lsls	r3, r1
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4013      	ands	r3, r2
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	7809      	ldrb	r1, [r1, #0]
 80010c2:	408a      	lsls	r2, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
		break;
 80010ca:	bf00      	nop
}
 80010cc:	e00f      	b.n	80010ee <CMSIS_GPIO_CNF_Set+0x62>
		MODIFY_REG(GPIO->CRH, (0x3UL << *CNF_Pos), Mode << *CNF_Pos); 
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	2303      	movs	r3, #3
 80010da:	408b      	lsls	r3, r1
 80010dc:	43db      	mvns	r3, r3
 80010de:	4013      	ands	r3, r2
 80010e0:	7aba      	ldrb	r2, [r7, #10]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	7809      	ldrb	r1, [r1, #0]
 80010e6:	408a      	lsls	r2, r1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	605a      	str	r2, [r3, #4]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <CMSIS_GPIO_Reg_Set>:

//Служебная функция
static void CMSIS_GPIO_Reg_Set(GPIO_TypeDef *GPIO, uint8_t* GPIO_Pin, uint8_t Configuration_mode, uint8_t Type, uint8_t Reg, uint8_t* CNF_Pos) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
	switch (Configuration_mode) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d030      	beq.n	8001176 <CMSIS_GPIO_Reg_Set+0x7e>
 8001114:	2b02      	cmp	r3, #2
 8001116:	dc6f      	bgt.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <CMSIS_GPIO_Reg_Set+0x2a>
 800111c:	2b01      	cmp	r3, #1
 800111e:	d015      	beq.n	800114c <CMSIS_GPIO_Reg_Set+0x54>
			SET_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
			break;
		}
		break;
	}
}
 8001120:	e06a      	b.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <CMSIS_GPIO_Reg_Set+0x36>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d007      	beq.n	800113c <CMSIS_GPIO_Reg_Set+0x44>
		break;
 800112c:	e064      	b.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b00, *(&CNF_Pos));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	7e39      	ldrb	r1, [r7, #24]
 8001132:	2200      	movs	r2, #0
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ffa9 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 800113a:	e006      	b.n	800114a <CMSIS_GPIO_Reg_Set+0x52>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b01, *(&CNF_Pos));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	7e39      	ldrb	r1, [r7, #24]
 8001140:	2201      	movs	r2, #1
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ffa2 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 8001148:	bf00      	nop
		break;
 800114a:	e055      	b.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <CMSIS_GPIO_Reg_Set+0x60>
 8001152:	2b01      	cmp	r3, #1
 8001154:	d007      	beq.n	8001166 <CMSIS_GPIO_Reg_Set+0x6e>
		break;
 8001156:	e04f      	b.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	7e39      	ldrb	r1, [r7, #24]
 800115c:	2202      	movs	r2, #2
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ff94 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 8001164:	e006      	b.n	8001174 <CMSIS_GPIO_Reg_Set+0x7c>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b11, *(&CNF_Pos));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	7e39      	ldrb	r1, [r7, #24]
 800116a:	2203      	movs	r2, #3
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff ff8d 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 8001172:	bf00      	nop
		break;
 8001174:	e040      	b.n	80011f8 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	3b02      	subs	r3, #2
 800117a:	2b03      	cmp	r3, #3
 800117c:	d83b      	bhi.n	80011f6 <CMSIS_GPIO_Reg_Set+0xfe>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <CMSIS_GPIO_Reg_Set+0x8c>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	080011a3 	.word	0x080011a3
 800118c:	080011b1 	.word	0x080011b1
 8001190:	080011d5 	.word	0x080011d5
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b00, *(&CNF_Pos));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	7e39      	ldrb	r1, [r7, #24]
 8001198:	2200      	movs	r2, #0
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff ff76 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 80011a0:	e029      	b.n	80011f6 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b01, *(&CNF_Pos));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	7e39      	ldrb	r1, [r7, #24]
 80011a6:	2201      	movs	r2, #1
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff ff6f 	bl	800108c <CMSIS_GPIO_CNF_Set>
			break;
 80011ae:	e022      	b.n	80011f6 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	7e39      	ldrb	r1, [r7, #24]
 80011b4:	2202      	movs	r2, #2
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff ff68 	bl	800108c <CMSIS_GPIO_CNF_Set>
			CLEAR_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	2301      	movs	r3, #1
 80011c8:	408b      	lsls	r3, r1
 80011ca:	43db      	mvns	r3, r3
 80011cc:	401a      	ands	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	60da      	str	r2, [r3, #12]
			break;
 80011d2:	e010      	b.n	80011f6 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	7e39      	ldrb	r1, [r7, #24]
 80011d8:	2202      	movs	r2, #2
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f7ff ff56 	bl	800108c <CMSIS_GPIO_CNF_Set>
			SET_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	2301      	movs	r3, #1
 80011ec:	408b      	lsls	r3, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	60da      	str	r2, [r3, #12]
			break;
 80011f4:	bf00      	nop
		break;
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <CMSIS_GPIO_init>:
 *		           GPIO_SPEED_2_MHZ,
 *		           GPIO_SPEED_50_MHZ 
 ***************************************************************************************
 */

void CMSIS_GPIO_init(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Configuration_mode, uint8_t Type, uint8_t Speed) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	460b      	mov	r3, r1
 8001214:	70bb      	strb	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
	uint8_t CNF_Pos = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
	if (GPIO == GPIOA) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <CMSIS_GPIO_init+0xe0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d106      	bne.n	8001234 <CMSIS_GPIO_init+0x34>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Запуск тактирования порта А
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	e01f      	b.n	8001274 <CMSIS_GPIO_init+0x74>
	} else if (GPIO == GPIOB) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <CMSIS_GPIO_init+0xe8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d106      	bne.n	800124a <CMSIS_GPIO_init+0x4a>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	e014      	b.n	8001274 <CMSIS_GPIO_init+0x74>
	} else if (GPIO == GPIOC) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <CMSIS_GPIO_init+0xec>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d106      	bne.n	8001260 <CMSIS_GPIO_init+0x60>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); //Запуск тактирования порта C
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	e009      	b.n	8001274 <CMSIS_GPIO_init+0x74>
	} else if (GPIO == GPIOD) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <CMSIS_GPIO_init+0xf0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d105      	bne.n	8001274 <CMSIS_GPIO_init+0x74>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPDEN); //Запуск тактирования порта D
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <CMSIS_GPIO_init+0xe4>)
 800126e:	f043 0320 	orr.w	r3, r3, #32
 8001272:	6193      	str	r3, [r2, #24]
	}
	
	CMSIS_GPIO_SPEED_Set(GPIO, GPIO_Pin, Speed);
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	7e3a      	ldrb	r2, [r7, #24]
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fec9 	bl	8001012 <CMSIS_GPIO_SPEED_Set>
	
	if (GPIO_Pin < 8) {
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d812      	bhi.n	80012ac <CMSIS_GPIO_init+0xac>
		CNF_Pos = (GPIO_Pin * 4) + 2;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3302      	adds	r3, #2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	73fb      	strb	r3, [r7, #15]
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*)&GPIO_Pin, Configuration_mode, Type, 0, &CNF_Pos);
 8001292:	7878      	ldrb	r0, [r7, #1]
 8001294:	78ba      	ldrb	r2, [r7, #2]
 8001296:	1cf9      	adds	r1, r7, #3
 8001298:	f107 030f 	add.w	r3, r7, #15
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4603      	mov	r3, r0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff27 	bl	80010f8 <CMSIS_GPIO_Reg_Set>
	} else {
		GPIO_Pin = GPIO_Pin - 8;
		CNF_Pos = (GPIO_Pin * 4) + 2;
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*)&GPIO_Pin, Configuration_mode, Type, 1, &CNF_Pos);
	}
}
 80012aa:	e015      	b.n	80012d8 <CMSIS_GPIO_init+0xd8>
		GPIO_Pin = GPIO_Pin - 8;
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	3b08      	subs	r3, #8
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	70fb      	strb	r3, [r7, #3]
		CNF_Pos = (GPIO_Pin * 4) + 2;
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3302      	adds	r3, #2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*)&GPIO_Pin, Configuration_mode, Type, 1, &CNF_Pos);
 80012c0:	7878      	ldrb	r0, [r7, #1]
 80012c2:	78ba      	ldrb	r2, [r7, #2]
 80012c4:	1cf9      	adds	r1, r7, #3
 80012c6:	f107 030f 	add.w	r3, r7, #15
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff10 	bl	80010f8 <CMSIS_GPIO_Reg_Set>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40011400 	.word	0x40011400

080012f4 <EXTI0_IRQHandler>:
	*/

	NVIC_EnableIRQ(EXTI0_IRQn); //Включим прерывание по вектору EXTI0
}

__WEAK void EXTI0_IRQHandler(void) {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

	SET_BIT(EXTI->PR, EXTI_PR_PR0); //Выйдем из прерывания
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <EXTI0_IRQHandler+0x18>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <EXTI0_IRQHandler+0x18>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6153      	str	r3, [r2, #20]

}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40010400 	.word	0x40010400

08001310 <CMSIS_TIM3_init>:
 *  Так же в этом режиме бит направления DIR из регистра TIMx->CR1 не может меняться.
 *  Он обновляется аппаратно и выдает текущее направление счетчика.

 */

void CMSIS_TIM3_init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	/*Включим тактирование таймера (страница 48)*/
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); //Запуск тактирования таймера 3
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <CMSIS_TIM3_init+0xa4>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <CMSIS_TIM3_init+0xa4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	61d3      	str	r3, [r2, #28]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <CMSIS_TIM3_init+0xa4>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <CMSIS_TIM3_init+0xa4>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6193      	str	r3, [r2, #24]

	/*Настройка таймера 3 (Страница 404)*/
	//15.4.1 TIMx control register 1 (TIMx_CR1)

	//SET_BIT(TIM3->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM3->CR1, TIM_CR1_UDIS); //Генерировать событие Update
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001332:	f023 0302 	bic.w	r3, r3, #2
 8001336:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_URS); //Генерировать прерывание
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800133e:	f023 0304 	bic.w	r3, r3, #4
 8001342:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_OPM); //One pulse mode off(Счетчик не останавливается при обновлении)
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800134a:	f023 0308 	bic.w	r3, r3, #8
 800134e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_DIR); //Считаем вверх
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001356:	f023 0310 	bic.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(TIM3->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); //Выравнивание по краю
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001362:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001366:	6013      	str	r3, [r2, #0]
	SET_BIT(TIM3->CR1, TIM_CR1_ARPE); //Auto-reload preload enable
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	6013      	str	r3, [r2, #0]
	MODIFY_REG(TIM3->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); //Предделение выключено
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800137a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137e:	6013      	str	r3, [r2, #0]

	/*Настройка прерываний (Страница 409)*/
	//15.4.4 TIMx DMA/Interrupt enable register (TIMx_DIER)
	SET_BIT(TIM3->DIER, TIM_DIER_UIE); //Update interrupt enable
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	60d3      	str	r3, [r2, #12]

	//15.4.5 TIMx status register (TIMx_SR) - Статусные регистры

	TIM3->PSC = 7200 - 1;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 800138e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 10000 - 1;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 8001396:	f242 720f 	movw	r2, #9999	; 0x270f
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM3_IRQn); //Разрешить прерывания по таймеру 3
 800139c:	201d      	movs	r0, #29
 800139e:	f7ff fca5 	bl	8000cec <__NVIC_EnableIRQ>
	SET_BIT(TIM3->CR1, TIM_CR1_CEN); //Запуск таймера
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <CMSIS_TIM3_init+0xa8>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40000400 	.word	0x40000400

080013bc <ADC1_2_IRQHandler>:
	//NVIC_EnableIRQ(ADC1_IRQn); //Разрешить прерывания по АЦП

	//SET_BIT(ADC1->CR2, ADC_CR2_SWSTART); //Начать преобразование. Не нужно запускать, если Continuous conversion mode(непрерывные преобразования) включен
}

__WEAK void ADC1_2_IRQHandler(void) {
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	/*This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
	* cleared by software or by reading the ADC_DR.
	* 0: Conversion is not complete
	* 1: Conversion complete*/
	if (READ_BIT(ADC1->SR, ADC_SR_EOC)) {
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <ADC1_2_IRQHandler+0x1c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <ADC1_2_IRQHandler+0x14>
		ADC1->DR; //Читаем канал, чтоб сбросить флаг
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <ADC1_2_IRQHandler+0x1c>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}

}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40012400 	.word	0x40012400

080013dc <DMA1_Channel1_IRQHandler>:
__WEAK void DMA1_Channel1_IRQHandler(void) {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	if (READ_BIT(DMA1->ISR, DMA_ISR_TCIF1)) {
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <DMA1_Channel1_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6053      	str	r3, [r2, #4]

	} else if (READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
		/*Здесь можно сделать какой-то обработчик ошибок*/
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
	}
}
 80013f8:	e00b      	b.n	8001412 <DMA1_Channel1_IRQHandler+0x36>
	} else if (READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <DMA1_Channel1_IRQHandler+0x36>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <DMA1_Channel1_IRQHandler+0x40>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6053      	str	r3, [r2, #4]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40020000 	.word	0x40020000

08001420 <CMSIS_USART1_Init>:
 ******************************************************************************
 *  @breif Настройка USART1. Параметры 9600 8 N 1
 ******************************************************************************
 */

void CMSIS_USART1_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включение тактирование порта А
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <CMSIS_USART1_Init+0x148>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <CMSIS_USART1_Init+0x148>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включение альтернативных функций
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <CMSIS_USART1_Init+0x148>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <CMSIS_USART1_Init+0x148>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6193      	str	r3, [r2, #24]

	//Для конфигурирование ножек UART для Full Duplex нужно использовать Alternate function push-pull(См. п.п. 9.1.11 GPIO configurations for device peripherals стр.111 Reference Manual)
	//Tx - Alternative Function output Push-pull(Maximum output speed 50 MHz)
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9_Msk, 0b10 << GPIO_CRH_CNF9_Pos);
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <CMSIS_USART1_Init+0x14c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <CMSIS_USART1_Init+0x14c>)
 8001446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE9_Msk, 0b11 << GPIO_CRH_MODE9_Pos);
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <CMSIS_USART1_Init+0x14c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a46      	ldr	r2, [pc, #280]	; (800156c <CMSIS_USART1_Init+0x14c>)
 8001452:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001456:	6053      	str	r3, [r2, #4]
	//Rx - Input floating
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10_Msk, 0b1 << GPIO_CRH_CNF10_Pos);
 8001458:	4b44      	ldr	r3, [pc, #272]	; (800156c <CMSIS_USART1_Init+0x14c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <CMSIS_USART1_Init+0x14c>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001466:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE10_Msk, 0b00 << GPIO_CRH_MODE10_Pos);
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <CMSIS_USART1_Init+0x14c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a3f      	ldr	r2, [pc, #252]	; (800156c <CMSIS_USART1_Init+0x14c>)
 800146e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001472:	6053      	str	r3, [r2, #4]

	//Запустим тактирование USART1
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <CMSIS_USART1_Init+0x148>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a3b      	ldr	r2, [pc, #236]	; (8001568 <CMSIS_USART1_Init+0x148>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6193      	str	r3, [r2, #24]

	Тогда весь регистр USART->BRR для скорости 115200 будет выглядеть, как 0x271.

	*/

	MODIFY_REG(USART1->BRR, USART_BRR_DIV_Mantissa_Msk, 0x1D4 << USART_BRR_DIV_Mantissa_Pos);
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800148e:	f443 53ea 	orr.w	r3, r3, #7488	; 0x1d40
 8001492:	6093      	str	r3, [r2, #8]
	MODIFY_REG(USART1->BRR, USART_BRR_DIV_Fraction_Msk, 0xC << USART_BRR_DIV_Fraction_Pos);
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	4a34      	ldr	r2, [pc, #208]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800149e:	f043 030c 	orr.w	r3, r3, #12
 80014a2:	6093      	str	r3, [r2, #8]

	//27.6.4 Control register 1(USART_CR1)(см. стр 821 Reference Manual)
	SET_BIT(USART1->CR1, USART_CR1_UE); //USART enable
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ae:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_M); //Word lenght 1 Start bit, 8 Data bits, n Stop bit
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ba:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_WAKE); //Wake up idle Line
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014c6:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_PCE); //Partity control disabled
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014d2:	60d3      	str	r3, [r2, #12]
	//настройка прерываний
	CLEAR_BIT(USART1->CR1, USART_CR1_PEIE); //partity error interrupt disabled
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014de:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE); //TXE interrupt is inhibited
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ea:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_TCIE); //Transmission complete interrupt disabled
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014f6:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE); //Прерывание по приему данных включено
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <CMSIS_USART1_Init+0x150>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_IDLEIE); //Прерывание по флагу IDLE включено
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_TE); //Transmitter is enabled
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a16      	ldr	r2, [pc, #88]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_RE); //Receiver is enabled and begins searching for a start bit
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_RWU);
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_SBK);
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	60d3      	str	r3, [r2, #12]

	//Остальную настройку, не касающуюся стандартного USART, мы пока трогать не будем, но на всякий случай обнулим
	USART1->CR2 = 0;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(USART1->CR2, USART_CR2_STOP); //1 стоп бит.
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800154c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001550:	6113      	str	r3, [r2, #16]
	USART1->CR3 = 0;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <CMSIS_USART1_Init+0x150>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
	USART1->GTPR = 0;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <CMSIS_USART1_Init+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]

	NVIC_EnableIRQ(USART1_IRQn); //Включим прерывания по USART1
 800155e:	2025      	movs	r0, #37	; 0x25
 8001560:	f7ff fbc4 	bl	8000cec <__NVIC_EnableIRQ>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800
 8001570:	40013800 	.word	0x40013800

08001574 <CMSIS_USART2_Init>:
 ******************************************************************************
 *  @breif Настройка USART2. Параметры 9600 8 N 1
 ******************************************************************************
 */

void CMSIS_USART2_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включение тактирование порта А
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <CMSIS_USART2_Init+0x148>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <CMSIS_USART2_Init+0x148>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включение альтернативных функций
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <CMSIS_USART2_Init+0x148>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <CMSIS_USART2_Init+0x148>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6193      	str	r3, [r2, #24]

	//Для конфигурирование ножек UART для Full Duplex нужно использовать Alternate function push-pull(См. п.п. 9.1.11 GPIO configurations for device peripherals стр.111 Reference Manual)
	//Tx - Alternative Function output Push-pull(Maximum output speed 50 MHz)
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF2_Msk, 0b10 << GPIO_CRL_CNF2_Pos);
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 800159a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800159e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE2_Msk, 0b11 << GPIO_CRL_MODE2_Pos);
 80015a0:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015aa:	6013      	str	r3, [r2, #0]
	//Rx - Input floating
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF3_Msk, 0b1 << GPIO_CRL_CNF3_Pos);
 80015ac:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b4:	4a42      	ldr	r2, [pc, #264]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ba:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE3_Msk, 0b00 << GPIO_CRL_MODE3_Pos);
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a3f      	ldr	r2, [pc, #252]	; (80016c0 <CMSIS_USART2_Init+0x14c>)
 80015c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c6:	6013      	str	r3, [r2, #0]

	//Запустим тактирование USART2
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <CMSIS_USART2_Init+0x148>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <CMSIS_USART2_Init+0x148>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d2:	61d3      	str	r3, [r2, #28]

	Тогда весь регистр USART->BRR для скорости 115200 будет выглядеть, как 0x138.

	*/

	MODIFY_REG(USART2->BRR, USART_BRR_DIV_Mantissa_Msk, 0xEA << USART_BRR_DIV_Mantissa_Pos);
 80015d4:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015e2:	f443 636a 	orr.w	r3, r3, #3744	; 0xea0
 80015e6:	6093      	str	r3, [r2, #8]
	MODIFY_REG(USART2->BRR, USART_BRR_DIV_Fraction_Msk, 0x6 << USART_BRR_DIV_Fraction_Pos);
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 030f 	bic.w	r3, r3, #15
 80015f0:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015f2:	f043 0306 	orr.w	r3, r3, #6
 80015f6:	6093      	str	r3, [r2, #8]

	//27.6.4 Control register 1(USART_CR1)(см. стр 821 Reference Manual)
	SET_BIT(USART2->CR1, USART_CR1_UE); //USART enable
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80015fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001602:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_M); //Word lenght 1 Start bit, 8 Data bits, n Stop bit
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800160a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800160e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_WAKE); //Wake up idle Line
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800161a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_PCE); //Partity control disabled
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001626:	60d3      	str	r3, [r2, #12]
	//настройка прерываний
	CLEAR_BIT(USART2->CR1, USART_CR1_PEIE); //partity error interrupt disabled
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800162e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001632:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE); //TXE interrupt is inhibited
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800163a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800163e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_TCIE); //Transmission complete interrupt disabled
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164a:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE); //Прерывание по приему данных включено
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_IDLEIE); //Прерывание по флагу IDLE включено
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_TE); //Transmitter is enabled
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_RE); //Receiver is enabled and begins searching for a start bit
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_RWU);
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001682:	f023 0302 	bic.w	r3, r3, #2
 8001686:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_SBK);
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	60d3      	str	r3, [r2, #12]

	//Остальную настройку, не касающуюся стандартного USART, мы пока трогать не будем, но на всякий случай обнулим
	USART2->CR2 = 0;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(USART2->CR2, USART_CR2_STOP); //1 стоп бит.
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80016a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a4:	6113      	str	r3, [r2, #16]
	USART2->CR3 = 0;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
	USART2->GTPR = 0;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <CMSIS_USART2_Init+0x150>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]

	NVIC_EnableIRQ(USART2_IRQn); //Включим прерывания по USART2
 80016b2:	2026      	movs	r0, #38	; 0x26
 80016b4:	f7ff fb1a 	bl	8000cec <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40004400 	.word	0x40004400

080016c8 <CMSIS_USART_Transmit>:
 *  @param  *data - данные, которые будем отправлять
 *  @param  Size - сколько байт требуется передать
 ******************************************************************************
 */

bool CMSIS_USART_Transmit(USART_TypeDef* USART, uint8_t* data, uint16_t Size, uint32_t Timeout_ms) {
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < Size; i++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	82fb      	strh	r3, [r7, #22]
 80016dc:	e019      	b.n	8001712 <CMSIS_USART_Transmit+0x4a>
		Timeout_counter_ms = Timeout_ms;
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <CMSIS_USART_Transmit+0x60>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6013      	str	r3, [r2, #0]
		//Ждем, пока линия не освободится
		while (READ_BIT(USART->SR, USART_SR_TXE) == 0) {
 80016e4:	e005      	b.n	80016f2 <CMSIS_USART_Transmit+0x2a>
			if (!Timeout_counter_ms) {
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <CMSIS_USART_Transmit+0x60>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <CMSIS_USART_Transmit+0x2a>
				return false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e014      	b.n	800171c <CMSIS_USART_Transmit+0x54>
		while (READ_BIT(USART->SR, USART_SR_TXE) == 0) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f3      	beq.n	80016e6 <CMSIS_USART_Transmit+0x1e>
			}
		}
		USART->DR = *data++; //Кидаем данные  
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
	for (uint16_t i = 0; i < Size; i++) {
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	3301      	adds	r3, #1
 8001710:	82fb      	strh	r3, [r7, #22]
 8001712:	8afa      	ldrh	r2, [r7, #22]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3e1      	bcc.n	80016de <CMSIS_USART_Transmit+0x16>
	}
	return true;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000003c 	.word	0x2000003c

0800172c <CMSIS_I2C_Reset>:
  * За 8 тактами передачи байта следует 9-й тактовый импульс, в течение которого приемник должен передать передатчику бит подтверждения
 */

 /*Регистры(См. ReferenceManual стр. 772)*/

void CMSIS_I2C_Reset(void) {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	//Сброс настроек I2C
	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	SET_BIT(I2C1->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C1->CR1, I2C_CR1_SWRST) == 0) ;
 800173c:	bf00      	nop
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f9      	beq.n	800173e <CMSIS_I2C_Reset+0x12>
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 8001750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001754:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C1->CR1, I2C_CR1_SWRST)) ;
 8001756:	bf00      	nop
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <CMSIS_I2C_Reset+0x44>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f9      	bne.n	8001758 <CMSIS_I2C_Reset+0x2c>
	/* Примечание: Этот бит можно использовать для повторной инициализации
	 * периферийного устройства после ошибки или заблокированного состояния.
	 * Например, если бит BUSY установлен и остается заблокированным из-за сбоя на шине,
	 * бит SWRST можно использовать для выхода из этого состояния.*/
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40005400 	.word	0x40005400

08001774 <CMSIS_I2C1_Init>:
 *************************************************************************************
 *  @breif Функция инициализации шины I2C1. Sm.
 *************************************************************************************
 */

void CMSIS_I2C1_Init(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	//Настройки тактирования
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирование порта B
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a61      	ldr	r2, [pc, #388]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); //Запуск тактирования I2C1
 8001790:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <CMSIS_I2C1_Init+0x190>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	61d3      	str	r3, [r2, #28]

	//Настройки ножек SDA и SCL
	//PB7 SDA (I2C Data I/O) Alternate function open drain
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF7_Msk, 0b11 << GPIO_CRL_CNF7_Pos); //Alternate function open drain
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a59      	ldr	r2, [pc, #356]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017a6:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE7_Msk, 0b11 << GPIO_CRL_MODE7_Pos); //Maximum output speed 50 MHz
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a56      	ldr	r2, [pc, #344]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017ae:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80017b2:	6013      	str	r3, [r2, #0]
	//PB6 SCL (I2C clock) Alternate function open drain
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF6_Msk, 0b11 << GPIO_CRL_CNF6_Pos); //Alternate function open drain
 80017b4:	4b54      	ldr	r3, [pc, #336]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a53      	ldr	r2, [pc, #332]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017ba:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80017be:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE6_Msk, 0b11 << GPIO_CRL_MODE6_Pos); //Maximum output speed 50 MHz
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <CMSIS_I2C1_Init+0x194>)
 80017c6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80017ca:	6013      	str	r3, [r2, #0]

	//26.6 I2C registers( См. Reference Manual стр. 772)

	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	CMSIS_I2C_Reset();
 80017cc:	f7ff ffae 	bl	800172c <CMSIS_I2C_Reset>

	/*Это все для инита не нужно. После сброса итак будет в 0. */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ALERT); //Releases SMBA pin high.Alert Response Address Header followed by NACK
 80017d0:	4b4e      	ldr	r3, [pc, #312]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4d      	ldr	r2, [pc, #308]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017da:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PEC); //No PEC transfer
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a4a      	ldr	r2, [pc, #296]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e6:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_POS); //ACK bit controls the (N)ACK of the current byte being received in the shift register
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a47      	ldr	r2, [pc, #284]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017f2:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK); //No acknowledge returned
 80017f4:	4b45      	ldr	r3, [pc, #276]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a44      	ldr	r2, [pc, #272]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80017fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_STOP); //No Stop generation
 8001800:	4b42      	ldr	r3, [pc, #264]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a41      	ldr	r2, [pc, #260]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001806:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_START); //No Start generation
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3e      	ldr	r2, [pc, #248]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_NOSTRETCH); //Clock stretching enabled
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800181e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001822:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENGC); //General call disabled. Address 00h is NACKed.
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a38      	ldr	r2, [pc, #224]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800182a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800182e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENPEC); //PEC calculation disabled
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a35      	ldr	r2, [pc, #212]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001836:	f023 0320 	bic.w	r3, r3, #32
 800183a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENARP); //ARP disable
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a32      	ldr	r2, [pc, #200]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001842:	f023 0310 	bic.w	r3, r3, #16
 8001846:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SMBTYPE); //SMBus Device
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800184e:	f023 0308 	bic.w	r3, r3, #8
 8001852:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SMBUS); //I2C mode
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800185a:	f023 0302 	bic.w	r3, r3, #2
 800185e:	6013      	str	r3, [r2, #0]

	//п.п. 26.6.2 I2C Control register 2(I2C_CR2)(стр.774)
	CLEAR_BIT(I2C1->CR2, I2C_CR2_LAST); //Next DMA EOT is not the last transfer
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186a:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_DMAEN); //DMA requests disabled
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a26      	ldr	r2, [pc, #152]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001876:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITBUFEN); //TxE = 1 or RxNE = 1 does not generate any interrupt.
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800187e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001882:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITEVTEN); //Event interrupt disabled
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800188a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800188e:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITERREN); //Error interrupt disabled
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <CMSIS_I2C1_Init+0x198>)
 8001896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(I2C1->CR2, I2C_CR2_FREQ_Msk, 36 << I2C_CR2_FREQ_Pos); //f PCLK1 = 36 Мгц
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <CMSIS_I2C1_Init+0x198>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018a6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80018aa:	6053      	str	r3, [r2, #4]

	//п.п. 26.6.3 I2C Own address register 1(I2C_OAR1)(стр.776)
	I2C1->OAR1 = 0;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
	//п.п. 26.6.4 I2C Own address register 1(I2C_OAR2)(стр.776)
	I2C1->OAR2 = 0;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]

	//п.п. 26.6.8 I2C Clock control register (I2C_CCR)(стр.781)
	CLEAR_BIT(I2C1->CCR, I2C_CCR_FS); //Standard mode I2C
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	4a13      	ldr	r2, [pc, #76]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018c2:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C1->CCR, I2C_CCR_FS); //Fast mode I2C

	CLEAR_BIT(I2C1->CCR, I2C_CCR_DUTY); //Fm mode tlow/thigh = 2
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ce:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C1->CCR, I2C_CCR_DUTY); //Fm mode tlow/thigh = 16/9 (see CCR)

	//Расчет CCR. Смотри примеры расчета
	//MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 180 << I2C_CCR_CCR_Pos); //для Sm mode
	MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 30 << I2C_CCR_CCR_Pos); //для Fm mode. DUTY 0.
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018de:	f043 031e 	orr.w	r3, r3, #30
 80018e2:	61d3      	str	r3, [r2, #28]
	//MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 4 << I2C_CCR_CCR_Pos); //для Fm mode. DUTY 1.

	//п.п. 26.6.9 I2C TRISE register (I2C_TRISE)(стр. 782)
	MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 37 << I2C_TRISE_TRISE_Pos); //для Sm mode
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018ee:	f043 0325 	orr.w	r3, r3, #37	; 0x25
 80018f2:	6213      	str	r3, [r2, #32]
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 12 << I2C_TRISE_TRISE_Pos); //для Fm mode

	SET_BIT(I2C1->CR1, I2C_CR1_PE); //I2C1 enable
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <CMSIS_I2C1_Init+0x198>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	40010c00 	.word	0x40010c00
 800190c:	40005400 	.word	0x40005400

08001910 <CMSIS_I2C_Data_Transmit>:
 *  @param  *data - Данные, которые будем отправлять
 *  @param  Size_data - Размер, сколько байт будем отправлять.
 *  @retval  Возвращает статус отправки данных. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
bool CMSIS_I2C_Data_Transmit(I2C_TypeDef* I2C, uint8_t Adress_Device, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	460b      	mov	r3, r1
 800191e:	72fb      	strb	r3, [r7, #11]
 8001920:	4613      	mov	r3, r2
 8001922:	813b      	strh	r3, [r7, #8]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02d      	beq.n	800198c <CMSIS_I2C_Data_Transmit+0x7c>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR6)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR7))) {
 8001930:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <CMSIS_I2C_Data_Transmit+0x18c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <CMSIS_I2C_Data_Transmit+0x40>
 800193c:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <CMSIS_I2C_Data_Transmit+0x18c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <CMSIS_I2C_Data_Transmit+0x40>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8001948:	f7ff fef0 	bl	800172c <CMSIS_I2C_Reset>
			CMSIS_I2C1_Init(); //повторная инициализация
 800194c:	f7ff ff12 	bl	8001774 <CMSIS_I2C1_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <CMSIS_I2C_Data_Transmit+0x58>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d00b      	beq.n	8001988 <CMSIS_I2C_Data_Transmit+0x78>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 0201 	bic.w	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
		}

		return false;
 8001988:	2300      	movs	r3, #0
 800198a:	e083      	b.n	8001a94 <CMSIS_I2C_Data_Transmit+0x184>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 80019a4:	4a3e      	ldr	r2, [pc, #248]	; (8001aa0 <CMSIS_I2C_Data_Transmit+0x190>)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 80019aa:	e005      	b.n	80019b8 <CMSIS_I2C_Data_Transmit+0xa8>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 80019ac:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <CMSIS_I2C_Data_Transmit+0x190>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <CMSIS_I2C_Data_Transmit+0xa8>
			return false;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e06d      	b.n	8001a94 <CMSIS_I2C_Data_Transmit+0x184>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f3      	beq.n	80019ac <CMSIS_I2C_Data_Transmit+0x9c>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + Write
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	461a      	mov	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 80019d2:	4a33      	ldr	r2, [pc, #204]	; (8001aa0 <CMSIS_I2C_Data_Transmit+0x190>)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 80019d8:	e005      	b.n	80019e6 <CMSIS_I2C_Data_Transmit+0xd6>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <CMSIS_I2C_Data_Transmit+0x190>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <CMSIS_I2C_Data_Transmit+0xd6>
			return false;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e056      	b.n	8001a94 <CMSIS_I2C_Data_Transmit+0x184>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <CMSIS_I2C_Data_Transmit+0xee>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0ed      	beq.n	80019da <CMSIS_I2C_Data_Transmit+0xca>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d037      	beq.n	8001a7a <CMSIS_I2C_Data_Transmit+0x16a>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]

		/*Отправим данные*/
		for (uint16_t i = 0; i < Size_data; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	82fb      	strh	r3, [r7, #22]
 8001a16:	e024      	b.n	8001a62 <CMSIS_I2C_Data_Transmit+0x152>
			I2C->DR = *(data + i); //Запись байта
 8001a18:	8afb      	ldrh	r3, [r7, #22]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001a26:	e013      	b.n	8001a50 <CMSIS_I2C_Data_Transmit+0x140>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <CMSIS_I2C_Data_Transmit+0x140>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	615a      	str	r2, [r3, #20]
					return false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e021      	b.n	8001a94 <CMSIS_I2C_Data_Transmit+0x184>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e5      	beq.n	8001a28 <CMSIS_I2C_Data_Transmit+0x118>
		for (uint16_t i = 0; i < Size_data; i++) {
 8001a5c:	8afb      	ldrh	r3, [r7, #22]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	82fb      	strh	r3, [r7, #22]
 8001a62:	8afa      	ldrh	r2, [r7, #22]
 8001a64:	893b      	ldrh	r3, [r7, #8]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3d6      	bcc.n	8001a18 <CMSIS_I2C_Data_Transmit+0x108>
				}
			}
		}

		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

		return true;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00c      	b.n	8001a94 <CMSIS_I2C_Data_Transmit+0x184>

	} else {
		//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	615a      	str	r2, [r3, #20]

		return false;
 8001a92:	2300      	movs	r3, #0
	}
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	2000003c 	.word	0x2000003c

08001aa4 <CMSIS_I2C_Data_Receive>:
 *  @param  *data - Куда будем записывать принятые данные
 *  @param  Size_data - Размер, сколько байт будем принимать.
 *  @retval  Возвращает статус приема данных. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
bool CMSIS_I2C_Data_Receive(I2C_TypeDef* I2C, uint8_t Adress_Device, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	72fb      	strb	r3, [r7, #11]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	813b      	strh	r3, [r7, #8]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02d      	beq.n	8001b20 <CMSIS_I2C_Data_Receive+0x7c>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR6)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR7))) {
 8001ac4:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <CMSIS_I2C_Data_Receive+0x1cc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <CMSIS_I2C_Data_Receive+0x40>
 8001ad0:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <CMSIS_I2C_Data_Receive+0x1cc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <CMSIS_I2C_Data_Receive+0x40>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8001adc:	f7ff fe26 	bl	800172c <CMSIS_I2C_Reset>
			CMSIS_I2C1_Init(); //повторная инициализация
 8001ae0:	f7ff fe48 	bl	8001774 <CMSIS_I2C1_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <CMSIS_I2C_Data_Receive+0x58>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d00b      	beq.n	8001b1c <CMSIS_I2C_Data_Receive+0x78>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 0201 	bic.w	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]
		}

		return false;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e0a3      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001b3e:	e005      	b.n	8001b4c <CMSIS_I2C_Data_Receive+0xa8>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <CMSIS_I2C_Data_Receive+0xa8>
			return false;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e08d      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f3      	beq.n	8001b40 <CMSIS_I2C_Data_Receive+0x9c>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1 | 1); //Адрес + команда Read
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001b70:	e005      	b.n	8001b7e <CMSIS_I2C_Data_Receive+0xda>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <CMSIS_I2C_Data_Receive+0xda>
			return false;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e074      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <CMSIS_I2C_Data_Receive+0xf2>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ed      	beq.n	8001b72 <CMSIS_I2C_Data_Receive+0xce>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d055      	beq.n	8001c4e <CMSIS_I2C_Data_Receive+0x1aa>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	699b      	ldr	r3, [r3, #24]

		/*Прочтем данные*/
		for (uint16_t i = 0; i < Size_data; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	82fb      	strh	r3, [r7, #22]
 8001bae:	e048      	b.n	8001c42 <CMSIS_I2C_Data_Receive+0x19e>
			if (i < Size_data - 1) {
 8001bb0:	8afa      	ldrh	r2, [r7, #22]
 8001bb2:	893b      	ldrh	r3, [r7, #8]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	da1d      	bge.n	8001bf6 <CMSIS_I2C_Data_Receive+0x152>
				SET_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы хотим принять следующий байт, то отправляем ACK
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	601a      	str	r2, [r3, #0]

				Timeout_counter_ms = Timeout_ms;
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	6013      	str	r3, [r2, #0]
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001bcc:	e005      	b.n	8001bda <CMSIS_I2C_Data_Receive+0x136>
					//Ожидаем, пока в сдвиговом регистре появятся данные
					if (!Timeout_counter_ms) {
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <CMSIS_I2C_Data_Receive+0x136>
						return false;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e046      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f3      	beq.n	8001bce <CMSIS_I2C_Data_Receive+0x12a>
					}
				}

				*(data + i) = I2C->DR; //Чтение байта
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	8afb      	ldrh	r3, [r7, #22]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2ca      	uxtb	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e022      	b.n	8001c3c <CMSIS_I2C_Data_Receive+0x198>
			} else {
				CLEAR_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы знаем, что следующий принятый байт будет последним, то отправим NACK
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	601a      	str	r2, [r3, #0]

				SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	601a      	str	r2, [r3, #0]
				Timeout_counter_ms = Timeout_ms;
 8001c0e:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	6013      	str	r3, [r2, #0]
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001c14:	e005      	b.n	8001c22 <CMSIS_I2C_Data_Receive+0x17e>
					//Ожидаем, пока в сдвиговом регистре появятся данные
					if (!Timeout_counter_ms) {
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <CMSIS_I2C_Data_Receive+0x17e>
						return false;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e022      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f3      	beq.n	8001c16 <CMSIS_I2C_Data_Receive+0x172>
					}
				}
				*(data + i) = I2C->DR; //Чтение байта
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	8afb      	ldrh	r3, [r7, #22]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < Size_data; i++) {
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	82fb      	strh	r3, [r7, #22]
 8001c42:	8afa      	ldrh	r2, [r7, #22]
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3b2      	bcc.n	8001bb0 <CMSIS_I2C_Data_Receive+0x10c>
			}
		} return true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00c      	b.n	8001c68 <CMSIS_I2C_Data_Receive+0x1c4>

	} else {
		//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	615a      	str	r2, [r3, #20]
		return false;
 8001c66:	2300      	movs	r3, #0
	}

}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	2000003c 	.word	0x2000003c

08001c78 <USART1_IRQHandler>:
extern struct USART_rx_data usart1_RX;
extern QueueHandle_t xQueue1;
bool LED_Network = false; //Помигаем светодиодом
extern uint8_t NETWORK_Status;

void USART1_IRQHandler(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	if (READ_BIT(USART1->SR, USART_SR_RXNE)) {
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <USART1_IRQHandler+0xa8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00e      	beq.n	8001ca8 <USART1_IRQHandler+0x30>
		//Если пришли данные по USART
		husart1.rx_buffer[husart1.rx_counter] = USART1->DR; //Считаем данные в соответствующую ячейку в rx_buffer
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <USART1_IRQHandler+0xa8>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001c98:	440b      	add	r3, r1
 8001c9a:	751a      	strb	r2, [r3, #20]
		husart1.rx_counter++; //Увеличим счетчик принятых байт на 1
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	if (READ_BIT(USART1->SR, USART_SR_IDLE)) {
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <USART1_IRQHandler+0xa8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d031      	beq.n	8001d18 <USART1_IRQHandler+0xa0>
		//Если прилетел флаг IDLE
		USART1->DR; //Сбросим флаг IDLE
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <USART1_IRQHandler+0xa8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
		husart1.rx_len = husart1.rx_counter; //Узнаем, сколько байт получили
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001cba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

		/*----Подготовим данные для очереди----*/
		usart1_RX.len = husart1.rx_len;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <USART1_IRQHandler+0xb0>)
 8001cc8:	751a      	strb	r2, [r3, #20]
		for (uint8_t i = 0; i < usart1_RX.len; i++) {
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e009      	b.n	8001ce4 <USART1_IRQHandler+0x6c>
			usart1_RX.rx_buffer[i] = husart1.rx_buffer[i];
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4913      	ldr	r1, [pc, #76]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001cd6:	440a      	add	r2, r1
 8001cd8:	7d11      	ldrb	r1, [r2, #20]
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <USART1_IRQHandler+0xb0>)
 8001cdc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < usart1_RX.len; i++) {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <USART1_IRQHandler+0xb0>)
 8001ce6:	7d1b      	ldrb	r3, [r3, #20]
 8001ce8:	79fa      	ldrb	r2, [r7, #7]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3f0      	bcc.n	8001cd0 <USART1_IRQHandler+0x58>
		}
		/*----Подготовим данные для очереди----*/
		BaseType_t StatusSend;
		if (xQueue1 != NULL) {
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <USART1_IRQHandler+0xb4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <USART1_IRQHandler+0x9a>
			StatusSend = xQueueSendFromISR(xQueue1, &usart1_RX, NULL);
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <USART1_IRQHandler+0xb4>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <USART1_IRQHandler+0xb0>)
 8001d00:	f000 fb54 	bl	80023ac <xQueueGenericSendFromISR>
 8001d04:	6038      	str	r0, [r7, #0]
			if (StatusSend == errQUEUE_FULL) {
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <USART1_IRQHandler+0x9a>
				//Переполнение очереди
				ERROR_LED_ON();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <USART1_IRQHandler+0xb8>)
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	611a      	str	r2, [r3, #16]
			}
		}

		husart1.rx_counter = 0; //сбросим счетчик приходящих данных
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <USART1_IRQHandler+0xac>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	851a      	strh	r2, [r3, #40]	; 0x28

	}
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40013800 	.word	0x40013800
 8001d24:	20000990 	.word	0x20000990
 8001d28:	20000944 	.word	0x20000944
 8001d2c:	2000095c 	.word	0x2000095c
 8001d30:	40010800 	.word	0x40010800

08001d34 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	if (READ_BIT(USART2->SR, USART_SR_RXNE)) {
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <USART2_IRQHandler+0x54>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <USART2_IRQHandler+0x2e>
		//Если пришли данные по USART
		husart2.rx_buffer[husart2.rx_counter] = USART2->DR; //Считаем данные в соответствующую ячейку в rx_buffer
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <USART2_IRQHandler+0x54>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d52:	440b      	add	r3, r1
 8001d54:	751a      	strb	r2, [r3, #20]
		husart2.rx_counter++; //Увеличим счетчик принятых байт на 1
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	if (READ_BIT(USART2->SR, USART_SR_IDLE)) {
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <USART2_IRQHandler+0x54>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <USART2_IRQHandler+0x50>
		//Если прилетел флаг IDLE
		USART2->DR; //Сбросим флаг IDLE
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <USART2_IRQHandler+0x54>)
 8001d70:	685b      	ldr	r3, [r3, #4]
		husart2.rx_len = husart2.rx_counter; //Узнаем, сколько байт получили
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a

		/*----------Тут будем работать с приходящими данными----------*/
		UART_MQTT_Check_net(); //Проверка подключения к Wifi и MQTT брокеру
 8001d7a:	f7fe fc9d 	bl	80006b8 <UART_MQTT_Check_net>
		/*----------Тут будем работать с приходящими данными----------*/

		husart2.rx_counter = 0; //сбросим счетчик приходящих данных
 8001d7e:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <USART2_IRQHandler+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	20000964 	.word	0x20000964

08001d90 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM3->SR, TIM_SR_UIF)) {
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <TIM3_IRQHandler+0x6c>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <TIM3_IRQHandler+0x1c>
		CLEAR_BIT(TIM3->SR, TIM_SR_UIF); //Сбросим флаг прерывания
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <TIM3_IRQHandler+0x6c>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <TIM3_IRQHandler+0x6c>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6113      	str	r3, [r2, #16]
	}

	if (start_os) {
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <TIM3_IRQHandler+0x70>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01e      	beq.n	8001df2 <TIM3_IRQHandler+0x62>
		if (NETWORK_Status != MQTT_STATUS_CONNECTED) {
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <TIM3_IRQHandler+0x74>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d01a      	beq.n	8001df2 <TIM3_IRQHandler+0x62>
			LED_Network = !LED_Network;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <TIM3_IRQHandler+0x78>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f083 0301 	eor.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <TIM3_IRQHandler+0x78>)
 8001dd8:	701a      	strb	r2, [r3, #0]
			if (LED_Network) {
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <TIM3_IRQHandler+0x78>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <TIM3_IRQHandler+0x5a>
				WIFI_LED_ON();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <TIM3_IRQHandler+0x7c>)
 8001de4:	2210      	movs	r2, #16
 8001de6:	611a      	str	r2, [r3, #16]
			} else {
				WIFI_LED_OFF();
			}
		}
	}
}
 8001de8:	e003      	b.n	8001df2 <TIM3_IRQHandler+0x62>
				WIFI_LED_OFF();
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <TIM3_IRQHandler+0x7c>)
 8001dec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	20000033 	.word	0x20000033
 8001e04:	20000032 	.word	0x20000032
 8001e08:	20000040 	.word	0x20000040
 8001e0c:	40010800 	.word	0x40010800

08001e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <vTask1_MH19Z_Request>:
/**
 ***************************************************************************************
 *  @breif Отдать запрос датчику и обработать входящие данные MH19Z
 ***************************************************************************************
 */
void vTask1_MH19Z_Request(void *pvParameters) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	BaseType_t StatusReceieve;
	uint8_t tx_buffer[9] = { 0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79 }; //Буфер запроса данных
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <vTask1_MH19Z_Request+0x88>)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e2c:	c303      	stmia	r3!, {r0, r1}
 8001e2e:	701a      	strb	r2, [r3, #0]
	for (;;) {
		CMSIS_USART_Transmit(USART1, tx_buffer, sizeof(tx_buffer), 100); //Отправим запрос датчику CO2
 8001e30:	f107 0108 	add.w	r1, r7, #8
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	2209      	movs	r2, #9
 8001e38:	481b      	ldr	r0, [pc, #108]	; (8001ea8 <vTask1_MH19Z_Request+0x8c>)
 8001e3a:	f7ff fc45 	bl	80016c8 <CMSIS_USART_Transmit>
		/*Мигнем светодиодом*/
		USART1_LED_ON();
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <vTask1_MH19Z_Request+0x90>)
 8001e40:	2220      	movs	r2, #32
 8001e42:	611a      	str	r2, [r3, #16]
		vTaskDelay(100);
 8001e44:	2064      	movs	r0, #100	; 0x64
 8001e46:	f000 fdf1 	bl	8002a2c <vTaskDelay>
		USART1_LED_OFF();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <vTask1_MH19Z_Request+0x90>)
 8001e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e50:	611a      	str	r2, [r3, #16]
		/*Проверим очередь, если что - обработаем входящие данные*/
		if (xQueue1 != NULL) {
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <vTask1_MH19Z_Request+0x94>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01e      	beq.n	8001e98 <vTask1_MH19Z_Request+0x7c>
			StatusReceieve = xQueueReceive(xQueue1, &usart1_rx_data, 0);
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <vTask1_MH19Z_Request+0x94>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4914      	ldr	r1, [pc, #80]	; (8001eb4 <vTask1_MH19Z_Request+0x98>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb08 	bl	8002478 <xQueueReceive>
 8001e68:	6178      	str	r0, [r7, #20]
			if (StatusReceieve == pdPASS) {
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d113      	bne.n	8001e98 <vTask1_MH19Z_Request+0x7c>
				if (CRC8_MH_Z19_Check()) {
 8001e70:	f7fe ff0e 	bl	8000c90 <CRC8_MH_Z19_Check>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00e      	beq.n	8001e98 <vTask1_MH19Z_Request+0x7c>
					//Рассчитаем количество CO2 в ppm
					CO2_ppm = usart1_rx_data.rx_buffer[2] * 256 + usart1_rx_data.rx_buffer[3];
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <vTask1_MH19Z_Request+0x98>)
 8001e7c:	789b      	ldrb	r3, [r3, #2]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <vTask1_MH19Z_Request+0x98>)
 8001e86:	78db      	ldrb	r3, [r3, #3]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <vTask1_MH19Z_Request+0x9c>)
 8001e90:	801a      	strh	r2, [r3, #0]
					MH19Z_data_ready = true;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <vTask1_MH19Z_Request+0xa0>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		vTaskDelay(4900);
 8001e98:	f241 3024 	movw	r0, #4900	; 0x1324
 8001e9c:	f000 fdc6 	bl	8002a2c <vTaskDelay>
		CMSIS_USART_Transmit(USART1, tx_buffer, sizeof(tx_buffer), 100); //Отправим запрос датчику CO2
 8001ea0:	e7c6      	b.n	8001e30 <vTask1_MH19Z_Request+0x14>
 8001ea2:	bf00      	nop
 8001ea4:	08003b94 	.word	0x08003b94
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	2000095c 	.word	0x2000095c
 8001eb4:	200009bc 	.word	0x200009bc
 8001eb8:	20000960 	.word	0x20000960
 8001ebc:	20000041 	.word	0x20000041

08001ec0 <vTask2_HDC1080_Request>:
/**
 ***************************************************************************************
 *  @breif Отдать запрос датчику и обработать входящие данные MH19Z
 ***************************************************************************************
 */
void vTask2_HDC1080_Request(void *pvParameters) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
	for (;;) {
		//Команда опроса температуры и влажности
		I2C1_tx_buffer[0] = 0;
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <vTask2_HDC1080_Request+0x130>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
		I2C1_tx_buffer[1] = 0;
 8001ece:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <vTask2_HDC1080_Request+0x130>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
		if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 1, 100)) {
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <vTask2_HDC1080_Request+0x130>)
 8001edc:	2140      	movs	r1, #64	; 0x40
 8001ede:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <vTask2_HDC1080_Request+0x134>)
 8001ee0:	f7ff fd16 	bl	8001910 <CMSIS_I2C_Data_Transmit>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <vTask2_HDC1080_Request+0x40>
			I2C1_LED_ON(); //Покажем активность шины I2C1
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	611a      	str	r2, [r3, #16]
			vTaskDelay(100);
 8001ef0:	2064      	movs	r0, #100	; 0x64
 8001ef2:	f000 fd9b 	bl	8002a2c <vTaskDelay>
			I2C1_LED_OFF();
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001ef8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	e00c      	b.n	8001f1a <vTask2_HDC1080_Request+0x5a>
		} else {
			ERROR_LED_ON();
 8001f00:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	611a      	str	r2, [r3, #16]
			vTaskDelay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f000 fd90 	bl	8002a2c <vTaskDelay>
			ERROR_LED_OFF();
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001f0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f12:	611a      	str	r2, [r3, #16]
			vTaskDelay(100);
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f000 fd89 	bl	8002a2c <vTaskDelay>
		}

		//Cчитаем данные
		if (CMSIS_I2C_Data_Receive(I2C1, HDC1080ADDR, I2C1_rx_buffer, 4, 100)) {
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2304      	movs	r3, #4
 8001f20:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <vTask2_HDC1080_Request+0x13c>)
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	4833      	ldr	r0, [pc, #204]	; (8001ff4 <vTask2_HDC1080_Request+0x134>)
 8001f26:	f7ff fdbd 	bl	8001aa4 <CMSIS_I2C_Data_Receive>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d04d      	beq.n	8001fcc <vTask2_HDC1080_Request+0x10c>
			Temperature = (((float) ((uint16_t) I2C1_rx_buffer[0] << 8 | I2C1_rx_buffer[1]) * 165) / 65536) - 40;
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <vTask2_HDC1080_Request+0x13c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <vTask2_HDC1080_Request+0x13c>)
 8001f38:	7852      	ldrb	r2, [r2, #1]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f9c1 	bl	80002c4 <__aeabi_i2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	492e      	ldr	r1, [pc, #184]	; (8002000 <vTask2_HDC1080_Request+0x140>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa10 	bl	800036c <__aeabi_fmul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fabe 	bl	80004d4 <__aeabi_fdiv>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	492a      	ldr	r1, [pc, #168]	; (8002004 <vTask2_HDC1080_Request+0x144>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe f8fb 	bl	8000158 <__aeabi_fsub>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <vTask2_HDC1080_Request+0x148>)
 8001f68:	601a      	str	r2, [r3, #0]
			Temperature = Temperature - 1;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <vTask2_HDC1080_Request+0x148>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f8f0 	bl	8000158 <__aeabi_fsub>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <vTask2_HDC1080_Request+0x148>)
 8001f7e:	601a      	str	r2, [r3, #0]
			Humidity = ((float) ((uint16_t) I2C1_rx_buffer[2] << 8 | I2C1_rx_buffer[3]) * 100) / 65536;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <vTask2_HDC1080_Request+0x13c>)
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <vTask2_HDC1080_Request+0x13c>)
 8001f88:	78d2      	ldrb	r2, [r2, #3]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f999 	bl	80002c4 <__aeabi_i2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	491d      	ldr	r1, [pc, #116]	; (800200c <vTask2_HDC1080_Request+0x14c>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe f9e8 	bl	800036c <__aeabi_fmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa96 	bl	80004d4 <__aeabi_fdiv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <vTask2_HDC1080_Request+0x150>)
 8001fae:	601a      	str	r2, [r3, #0]
			Humidity = Humidity + 5;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <vTask2_HDC1080_Request+0x150>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4917      	ldr	r1, [pc, #92]	; (8002014 <vTask2_HDC1080_Request+0x154>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe f8d0 	bl	800015c <__addsf3>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <vTask2_HDC1080_Request+0x150>)
 8001fc2:	601a      	str	r2, [r3, #0]
			HDC1080_data_ready = true;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <vTask2_HDC1080_Request+0x158>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e00c      	b.n	8001fe6 <vTask2_HDC1080_Request+0x126>
		} else {
			ERROR_LED_ON();
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	611a      	str	r2, [r3, #16]
			vTaskDelay(100);
 8001fd2:	2064      	movs	r0, #100	; 0x64
 8001fd4:	f000 fd2a 	bl	8002a2c <vTaskDelay>
			ERROR_LED_OFF();
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <vTask2_HDC1080_Request+0x138>)
 8001fda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fde:	611a      	str	r2, [r3, #16]
			vTaskDelay(100);
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f000 fd23 	bl	8002a2c <vTaskDelay>
		}
		vTaskDelay(4900);
 8001fe6:	f241 3024 	movw	r0, #4900	; 0x1324
 8001fea:	f000 fd1f 	bl	8002a2c <vTaskDelay>
		I2C1_tx_buffer[0] = 0;
 8001fee:	e76b      	b.n	8001ec8 <vTask2_HDC1080_Request+0x8>
 8001ff0:	20000024 	.word	0x20000024
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	20000028 	.word	0x20000028
 8002000:	43250000 	.word	0x43250000
 8002004:	42200000 	.word	0x42200000
 8002008:	2000093c 	.word	0x2000093c
 800200c:	42c80000 	.word	0x42c80000
 8002010:	20000940 	.word	0x20000940
 8002014:	40a00000 	.word	0x40a00000
 8002018:	20000042 	.word	0x20000042

0800201c <vTask3_MQTT_Send>:
/**
 ***************************************************************************************
 *  @breif Отправка данных по MQTT на сервер
 ***************************************************************************************
 */
void vTask3_MQTT_Send(void *pvParameters) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (NETWORK_Status == MQTT_STATUS_CONNECTED) {
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <vTask3_MQTT_Send+0x60>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d122      	bne.n	8002072 <vTask3_MQTT_Send+0x56>
			if (MH19Z_data_ready) {
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <vTask3_MQTT_Send+0x64>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <vTask3_MQTT_Send+0x2c>
				UART_MQTT_Send_data_uint16_t(MQTT_ID_CO2PPM, CO2_ppm, husart2.tx_buffer);
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <vTask3_MQTT_Send+0x68>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <vTask3_MQTT_Send+0x6c>)
 800203a:	4619      	mov	r1, r3
 800203c:	2004      	movs	r0, #4
 800203e:	f7fe fc47 	bl	80008d0 <UART_MQTT_Send_data_uint16_t>
				MH19Z_data_ready = false;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <vTask3_MQTT_Send+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]

			}
			if (HDC1080_data_ready) {
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <vTask3_MQTT_Send+0x70>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <vTask3_MQTT_Send+0x56>
				UART_MQTT_Send_data_float(MQTT_ID_TEMPERATURE, Temperature, husart2.tx_buffer);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <vTask3_MQTT_Send+0x74>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <vTask3_MQTT_Send+0x6c>)
 8002056:	4619      	mov	r1, r3
 8002058:	2002      	movs	r0, #2
 800205a:	f7fe fca1 	bl	80009a0 <UART_MQTT_Send_data_float>
				UART_MQTT_Send_data_float(MQTT_ID_HUMIDITY, Humidity, husart2.tx_buffer);
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <vTask3_MQTT_Send+0x78>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <vTask3_MQTT_Send+0x6c>)
 8002064:	4619      	mov	r1, r3
 8002066:	2003      	movs	r0, #3
 8002068:	f7fe fc9a 	bl	80009a0 <UART_MQTT_Send_data_float>
				HDC1080_data_ready = false;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <vTask3_MQTT_Send+0x70>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(100);
 8002072:	2064      	movs	r0, #100	; 0x64
 8002074:	f000 fcda 	bl	8002a2c <vTaskDelay>
		if (NETWORK_Status == MQTT_STATUS_CONNECTED) {
 8002078:	e7d4      	b.n	8002024 <vTask3_MQTT_Send+0x8>
 800207a:	bf00      	nop
 800207c:	20000032 	.word	0x20000032
 8002080:	20000041 	.word	0x20000041
 8002084:	20000960 	.word	0x20000960
 8002088:	20000964 	.word	0x20000964
 800208c:	20000042 	.word	0x20000042
 8002090:	2000093c 	.word	0x2000093c
 8002094:	20000940 	.word	0x20000940

08002098 <vApplicationIdleHook>:
#if (USE_DEBUG == 1)
uint32_t HeapSize; //Свободное место в куче
#endif

#if (configUSE_IDLE_HOOK==1)
void vApplicationIdleHook(void) {
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS13;
	GPIOC->BSRR = GPIO_BSRR_BR13;
	HeapSize = xPortGetFreeHeapSize();
#endif

}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	; (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	; (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ca:	f7ff fea1 	bl	8001e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ce:	f001 fd0f 	bl	8003af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d2:	f7fe fd8b 	bl	8000bec <main>
  bx lr
 80020d6:	4770      	bx	lr
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80020e0:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 80020e4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80020e8:	200009d4 	.word	0x200009d4

080020ec <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <BusFault_Handler>

080020ee <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0208 	add.w	r2, r3, #8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d103      	bne.n	8002164 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e00c      	b.n	800217e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3308      	adds	r3, #8
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e002      	b.n	8002172 <vListInsert+0x2e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	429a      	cmp	r2, r3
 800217c:	d2f6      	bcs.n	800216c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6892      	ldr	r2, [r2, #8]
 80021ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6852      	ldr	r2, [r2, #4]
 80021d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d103      	bne.n	80021e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002212:	2301      	movs	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05d      	beq.n	80022dc <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d059      	beq.n	80022dc <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	2100      	movs	r1, #0
 8002232:	fba3 2302 	umull	r2, r3, r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d000      	beq.n	800223c <xQueueGenericReset+0x34>
 800223a:	2101      	movs	r1, #1
 800223c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d14c      	bne.n	80022dc <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8002242:	f001 fbbb 	bl	80039bc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	441a      	add	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	3b01      	subs	r3, #1
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	441a      	add	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d114      	bne.n	80022c2 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01a      	beq.n	80022d6 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3310      	adds	r3, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fe87 	bl	8002fb8 <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <xQueueGenericReset+0xe4>)
 80022b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	e009      	b.n	80022d6 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3310      	adds	r3, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff11 	bl	80020ee <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3324      	adds	r3, #36	; 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff0c 	bl	80020ee <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022d6:	f001 fb8b 	bl	80039f0 <vPortExitCritical>
 80022da:	e001      	b.n	80022e0 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02d      	beq.n	8002364 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002308:	2100      	movs	r1, #0
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	fba3 2302 	umull	r2, r3, r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d000      	beq.n	8002318 <xQueueGenericCreate+0x28>
 8002316:	2101      	movs	r1, #1
 8002318:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d122      	bne.n	8002364 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002326:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800232a:	d81b      	bhi.n	8002364 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3348      	adds	r3, #72	; 0x48
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f924 	bl	8003588 <pvPortMalloc>
 8002340:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3348      	adds	r3, #72	; 0x48
 8002350:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f805 	bl	800236e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002364:	69fb      	ldr	r3, [r7, #28]
    }
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e002      	b.n	8002390 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800239c:	2101      	movs	r1, #1
 800239e:	69b8      	ldr	r0, [r7, #24]
 80023a0:	f7ff ff32 	bl	8002208 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80023be:	f3ef 8211 	mrs	r2, BASEPRI
 80023c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80023d6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <xQueueGenericSendFromISR+0x40>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d137      	bne.n	800245c <xQueueGenericSendFromISR+0xb0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002402:	f000 f8db 	bl	80025bc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002406:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	d112      	bne.n	8002436 <xQueueGenericSendFromISR+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01e      	beq.n	8002456 <xQueueGenericSendFromISR+0xaa>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	3324      	adds	r3, #36	; 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fdcb 	bl	8002fb8 <xTaskRemoveFromEventList>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <xQueueGenericSendFromISR+0xaa>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d013      	beq.n	8002456 <xQueueGenericSendFromISR+0xaa>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e00f      	b.n	8002456 <xQueueGenericSendFromISR+0xaa>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002436:	f000 fc53 	bl	8002ce0 <uxTaskGetNumberOfTasks>
 800243a:	6238      	str	r0, [r7, #32]
 800243c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	429a      	cmp	r2, r3
 8002444:	d907      	bls.n	8002456 <xQueueGenericSendFromISR+0xaa>
 8002446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800244a:	3301      	adds	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	b25a      	sxtb	r2, r3
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002456:	2301      	movs	r3, #1
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
        {
 800245a:	e001      	b.n	8002460 <xQueueGenericSendFromISR+0xb4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800246a:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800246e:	4618      	mov	r0, r3
 8002470:	3738      	adds	r7, #56	; 0x38
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800248c:	f001 fa96 	bl	80039bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01f      	beq.n	80024dc <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6a38      	ldr	r0, [r7, #32]
 80024a0:	f000 f8f6 	bl	8002690 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	1e5a      	subs	r2, r3, #1
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00f      	beq.n	80024d4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	3310      	adds	r3, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd7d 	bl	8002fb8 <xTaskRemoveFromEventList>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024c4:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <xQueueReceive+0x140>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024d4:	f001 fa8c 	bl	80039f0 <vPortExitCritical>
                return pdPASS;
 80024d8:	2301      	movs	r3, #1
 80024da:	e069      	b.n	80025b0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024e2:	f001 fa85 	bl	80039f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e062      	b.n	80025b0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fe27 	bl	8003148 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024fe:	f001 fa77 	bl	80039f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002502:	f000 faf3 	bl	8002aec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002506:	f001 fa59 	bl	80039bc <vPortEnterCritical>
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002510:	b25b      	sxtb	r3, r3
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d103      	bne.n	8002520 <xQueueReceive+0xa8>
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002526:	b25b      	sxtb	r3, r3
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d103      	bne.n	8002536 <xQueueReceive+0xbe>
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002536:	f001 fa5b 	bl	80039f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800253a:	1d3a      	adds	r2, r7, #4
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe16 	bl	8003174 <xTaskCheckForTimeOut>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d123      	bne.n	8002596 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800254e:	6a38      	ldr	r0, [r7, #32]
 8002550:	f000 f916 	bl	8002780 <prvIsQueueEmpty>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d017      	beq.n	800258a <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	3324      	adds	r3, #36	; 0x24
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fd12 	bl	8002f8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f000 f8b7 	bl	80026dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800256e:	f000 facb 	bl	8002b08 <xTaskResumeAll>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d189      	bne.n	800248c <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <xQueueReceive+0x140>)
 800257a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	e780      	b.n	800248c <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800258a:	6a38      	ldr	r0, [r7, #32]
 800258c:	f000 f8a6 	bl	80026dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002590:	f000 faba 	bl	8002b08 <xTaskResumeAll>
 8002594:	e77a      	b.n	800248c <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002596:	6a38      	ldr	r0, [r7, #32]
 8002598:	f000 f8a0 	bl	80026dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800259c:	f000 fab4 	bl	8002b08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f000 f8ed 	bl	8002780 <prvIsQueueEmpty>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f43f af6f 	beq.w	800248c <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025ae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d14d      	bne.n	800267e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fecc 	bl	8003384 <xTaskPriorityDisinherit>
 80025ec:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e043      	b.n	800267e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d119      	bne.n	8002630 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6858      	ldr	r0, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	461a      	mov	r2, r3
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	f001 fa96 	bl	8003b38 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	441a      	add	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d32b      	bcc.n	800267e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	e026      	b.n	800267e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68d8      	ldr	r0, [r3, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	461a      	mov	r2, r3
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	f001 fa7c 	bl	8003b38 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	425b      	negs	r3, r3
 800264a:	441a      	add	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	425b      	negs	r3, r3
 8002666:	441a      	add	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d105      	bne.n	800267e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3b01      	subs	r3, #1
 800267c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002686:	697b      	ldr	r3, [r7, #20]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	441a      	add	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d303      	bcc.n	80026c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	461a      	mov	r2, r3
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f001 fa32 	bl	8003b38 <memcpy>
    }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026e4:	f001 f96a 	bl	80039bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f0:	e011      	b.n	8002716 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d012      	beq.n	8002720 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3324      	adds	r3, #36	; 0x24
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fc5a 	bl	8002fb8 <xTaskRemoveFromEventList>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800270a:	f000 fd7d 	bl	8003208 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	3b01      	subs	r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	dce9      	bgt.n	80026f2 <prvUnlockQueue+0x16>
 800271e:	e000      	b.n	8002722 <prvUnlockQueue+0x46>
                    break;
 8002720:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800272a:	f001 f961 	bl	80039f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800272e:	f001 f945 	bl	80039bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002738:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800273a:	e011      	b.n	8002760 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3310      	adds	r3, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc35 	bl	8002fb8 <xTaskRemoveFromEventList>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002754:	f000 fd58 	bl	8003208 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	3b01      	subs	r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002764:	2b00      	cmp	r3, #0
 8002766:	dce9      	bgt.n	800273c <prvUnlockQueue+0x60>
 8002768:	e000      	b.n	800276c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800276a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	22ff      	movs	r2, #255	; 0xff
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002774:	f001 f93c 	bl	80039f0 <vPortExitCritical>
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002788:	f001 f918 	bl	80039bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e001      	b.n	800279e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800279e:	f001 f927 	bl	80039f0 <vPortExitCritical>

    return xReturn;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fee1 	bl	8003588 <pvPortMalloc>
 80027c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d013      	beq.n	80027f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027ce:	2054      	movs	r0, #84	; 0x54
 80027d0:	f000 feda 	bl	8003588 <pvPortMalloc>
 80027d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80027dc:	2254      	movs	r2, #84	; 0x54
 80027de:	2100      	movs	r1, #0
 80027e0:	69f8      	ldr	r0, [r7, #28]
 80027e2:	f001 f9b7 	bl	8003b54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
 80027ec:	e005      	b.n	80027fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f000 ff64 	bl	80036bc <vPortFree>
 80027f4:	e001      	b.n	80027fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	2300      	movs	r3, #0
 8002804:	9303      	str	r3, [sp, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f80e 	bl	8002838 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800281c:	69f8      	ldr	r0, [r7, #28]
 800281e:	f000 f873 	bl	8002908 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e002      	b.n	800282e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800282e:	69bb      	ldr	r3, [r7, #24]
    }
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002850:	3b01      	subs	r3, #1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01e      	beq.n	80028a4 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e012      	b.n	8002892 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4413      	add	r3, r2
 8002872:	7819      	ldrb	r1, [r3, #0]
 8002874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4413      	add	r3, r2
 800287a:	3334      	adds	r3, #52	; 0x34
 800287c:	460a      	mov	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4413      	add	r3, r2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d9e9      	bls.n	800286c <prvInitialiseNewTask+0x34>
 8002898:	e000      	b.n	800289c <prvInitialiseNewTask+0x64>
            {
                break;
 800289a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	6a3a      	ldr	r2, [r7, #32]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	3304      	adds	r3, #4
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fc34 	bl	800212c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	3318      	adds	r3, #24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fc2f 	bl	800212c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f1c3 0203 	rsb	r2, r3, #3
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	6938      	ldr	r0, [r7, #16]
 80028ea:	f000 ffd9 	bl	80038a0 <pxPortInitialiseStack>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002910:	f001 f854 	bl	80039bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <prvAddNewTaskToReadyList+0x108>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <prvAddNewTaskToReadyList+0x108>)
 800291c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <prvAddNewTaskToReadyList+0x10c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002926:	4a3b      	ldr	r2, [pc, #236]	; (8002a14 <prvAddNewTaskToReadyList+0x10c>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <prvAddNewTaskToReadyList+0x108>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d110      	bne.n	8002956 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002934:	f000 fc8e 	bl	8003254 <prvInitialiseTaskLists>
 8002938:	e00d      	b.n	8002956 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <prvAddNewTaskToReadyList+0x110>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <prvAddNewTaskToReadyList+0x10c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	429a      	cmp	r2, r3
 800294e:	d802      	bhi.n	8002956 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <prvAddNewTaskToReadyList+0x10c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <prvAddNewTaskToReadyList+0x114>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <prvAddNewTaskToReadyList+0x114>)
 800295e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2201      	movs	r2, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <prvAddNewTaskToReadyList+0x118>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <prvAddNewTaskToReadyList+0x118>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	492b      	ldr	r1, [pc, #172]	; (8002a24 <prvAddNewTaskToReadyList+0x11c>)
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	3204      	adds	r2, #4
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1d1a      	adds	r2, r3, #4
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <prvAddNewTaskToReadyList+0x11c>)
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	615a      	str	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4918      	ldr	r1, [pc, #96]	; (8002a24 <prvAddNewTaskToReadyList+0x11c>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	4814      	ldr	r0, [pc, #80]	; (8002a24 <prvAddNewTaskToReadyList+0x11c>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4403      	add	r3, r0
 80029dc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029de:	f001 f807 	bl	80039f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <prvAddNewTaskToReadyList+0x110>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <prvAddNewTaskToReadyList+0x10c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <prvAddNewTaskToReadyList+0x120>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200000f4 	.word	0x200000f4
 8002a14:	20000044 	.word	0x20000044
 8002a18:	20000100 	.word	0x20000100
 8002a1c:	20000110 	.word	0x20000110
 8002a20:	200000fc 	.word	0x200000fc
 8002a24:	20000048 	.word	0x20000048
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8002a3e:	f000 f855 	bl	8002aec <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a42:	2100      	movs	r1, #0
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fd1f 	bl	8003488 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a4a:	f000 f85d 	bl	8002b08 <xTaskResumeAll>
 8002a4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <vTaskDelay+0x44>)
 8002a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <vTaskStartScheduler+0x5c>)
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	221e      	movs	r2, #30
 8002a86:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <vTaskStartScheduler+0x60>)
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <vTaskStartScheduler+0x64>)
 8002a8a:	f7ff fe8f 	bl	80027ac <xTaskCreate>
 8002a8e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d115      	bne.n	8002ac2 <vTaskStartScheduler+0x4e>
        __asm volatile
 8002a96:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	603b      	str	r3, [r7, #0]
    }
 8002aa8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <vTaskStartScheduler+0x68>)
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <vTaskStartScheduler+0x6c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <vTaskStartScheduler+0x70>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002abe:	f000 ff5d 	bl	800397c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <vTaskStartScheduler+0x74>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000118 	.word	0x20000118
 8002ad4:	08003ba0 	.word	0x08003ba0
 8002ad8:	08003221 	.word	0x08003221
 8002adc:	20000114 	.word	0x20000114
 8002ae0:	20000100 	.word	0x20000100
 8002ae4:	200000f8 	.word	0x200000f8
 8002ae8:	20000000 	.word	0x20000000

08002aec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000011c 	.word	0x2000011c

08002b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b16:	f000 ff51 	bl	80039bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b1a:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <xTaskResumeAll+0x1b4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <xTaskResumeAll+0x1b4>)
 8002b22:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <xTaskResumeAll+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 80c0 	bne.w	8002cae <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b2e:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <xTaskResumeAll+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80bb 	beq.w	8002cae <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b38:	e08a      	b.n	8002c50 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3a:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <xTaskResumeAll+0x1bc>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6a12      	ldr	r2, [r2, #32]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	69d2      	ldr	r2, [r2, #28]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3318      	adds	r3, #24
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <xTaskResumeAll+0x68>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d103      	bne.n	8002bae <xTaskResumeAll+0xa6>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <xTaskResumeAll+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	4a3e      	ldr	r2, [pc, #248]	; (8002cc8 <xTaskResumeAll+0x1c0>)
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	493d      	ldr	r1, [pc, #244]	; (8002ccc <xTaskResumeAll+0x1c4>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	3204      	adds	r2, #4
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1d1a      	adds	r2, r3, #4
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <xTaskResumeAll+0x1c4>)
 8002c14:	441a      	add	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	492b      	ldr	r1, [pc, #172]	; (8002ccc <xTaskResumeAll+0x1c4>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	4827      	ldr	r0, [pc, #156]	; (8002ccc <xTaskResumeAll+0x1c4>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <xTaskResumeAll+0x1c8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <xTaskResumeAll+0x1cc>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <xTaskResumeAll+0x1bc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f af70 	bne.w	8002b3a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c60:	f000 fb76 	bl	8003350 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <xTaskResumeAll+0x1d0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c70:	f000 f840 	bl	8002cf4 <xTaskIncrementTick>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <xTaskResumeAll+0x1cc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f1      	bne.n	8002c70 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <xTaskResumeAll+0x1d0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <xTaskResumeAll+0x1cc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <xTaskResumeAll+0x1d4>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cae:	f000 fe9f 	bl	80039f0 <vPortExitCritical>

    return xAlreadyYielded;
 8002cb2:	693b      	ldr	r3, [r7, #16]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	2000011c 	.word	0x2000011c
 8002cc0:	200000f4 	.word	0x200000f4
 8002cc4:	200000b4 	.word	0x200000b4
 8002cc8:	200000fc 	.word	0x200000fc
 8002ccc:	20000048 	.word	0x20000048
 8002cd0:	20000044 	.word	0x20000044
 8002cd4:	20000108 	.word	0x20000108
 8002cd8:	20000104 	.word	0x20000104
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002ce4:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <uxTaskGetNumberOfTasks+0x10>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	200000f4 	.word	0x200000f4

08002cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cfe:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <xTaskIncrementTick+0x1e0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 80dc 	bne.w	8002ec0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d08:	4b73      	ldr	r3, [pc, #460]	; (8002ed8 <xTaskIncrementTick+0x1e4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d10:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <xTaskIncrementTick+0x1e4>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d110      	bne.n	8002d3e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <xTaskIncrementTick+0x1e8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <xTaskIncrementTick+0x1ec>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6d      	ldr	r2, [pc, #436]	; (8002edc <xTaskIncrementTick+0x1e8>)
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4a6d      	ldr	r2, [pc, #436]	; (8002ee0 <xTaskIncrementTick+0x1ec>)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <xTaskIncrementTick+0x1f0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a6b      	ldr	r2, [pc, #428]	; (8002ee4 <xTaskIncrementTick+0x1f0>)
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	f000 fb09 	bl	8003350 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <xTaskIncrementTick+0x1f4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f0c0 80a6 	bcc.w	8002e96 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4a:	4b64      	ldr	r3, [pc, #400]	; (8002edc <xTaskIncrementTick+0x1e8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d54:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <xTaskIncrementTick+0x1f4>)
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5a:	601a      	str	r2, [r3, #0]
                    break;
 8002d5c:	e09b      	b.n	8002e96 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <xTaskIncrementTick+0x1e8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d203      	bcs.n	8002d7e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d76:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <xTaskIncrementTick+0x1f4>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d7c:	e08b      	b.n	8002e96 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68d2      	ldr	r2, [r2, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	6892      	ldr	r2, [r2, #8]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d103      	bne.n	8002dac <xTaskIncrementTick+0xb8>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1e5a      	subs	r2, r3, #1
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01e      	beq.n	8002e02 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	6a12      	ldr	r2, [r2, #32]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	69d2      	ldr	r2, [r2, #28]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3318      	adds	r3, #24
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d103      	bne.n	8002df2 <xTaskIncrementTick+0xfe>
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2200      	movs	r2, #0
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	2201      	movs	r2, #1
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	4b38      	ldr	r3, [pc, #224]	; (8002eec <xTaskIncrementTick+0x1f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	4a36      	ldr	r2, [pc, #216]	; (8002eec <xTaskIncrementTick+0x1f8>)
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <xTaskIncrementTick+0x1fc>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3304      	adds	r3, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	3204      	adds	r2, #4
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1d1a      	adds	r2, r3, #4
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <xTaskIncrementTick+0x1fc>)
 8002e58:	441a      	add	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	4923      	ldr	r1, [pc, #140]	; (8002ef0 <xTaskIncrementTick+0x1fc>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	481f      	ldr	r0, [pc, #124]	; (8002ef0 <xTaskIncrementTick+0x1fc>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4403      	add	r3, r0
 8002e7e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <xTaskIncrementTick+0x200>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f67f af5d 	bls.w	8002d4a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e94:	e759      	b.n	8002d4a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <xTaskIncrementTick+0x200>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	4914      	ldr	r1, [pc, #80]	; (8002ef0 <xTaskIncrementTick+0x1fc>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d901      	bls.n	8002eb2 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <xTaskIncrementTick+0x204>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e004      	b.n	8002eca <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <xTaskIncrementTick+0x208>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <xTaskIncrementTick+0x208>)
 8002ec8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002eca:	69fb      	ldr	r3, [r7, #28]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	2000011c 	.word	0x2000011c
 8002ed8:	200000f8 	.word	0x200000f8
 8002edc:	200000ac 	.word	0x200000ac
 8002ee0:	200000b0 	.word	0x200000b0
 8002ee4:	2000010c 	.word	0x2000010c
 8002ee8:	20000114 	.word	0x20000114
 8002eec:	200000fc 	.word	0x200000fc
 8002ef0:	20000048 	.word	0x20000048
 8002ef4:	20000044 	.word	0x20000044
 8002ef8:	20000108 	.word	0x20000108
 8002efc:	20000104 	.word	0x20000104

08002f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <vTaskSwitchContext+0x78>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <vTaskSwitchContext+0x7c>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f14:	e02a      	b.n	8002f6c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <vTaskSwitchContext+0x7c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <vTaskSwitchContext+0x80>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f1c3 031f 	rsb	r3, r3, #31
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <vTaskSwitchContext+0x84>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3308      	adds	r3, #8
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d104      	bne.n	8002f62 <vTaskSwitchContext+0x62>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <vTaskSwitchContext+0x88>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000011c 	.word	0x2000011c
 8002f7c:	20000108 	.word	0x20000108
 8002f80:	200000fc 	.word	0x200000fc
 8002f84:	20000048 	.word	0x20000048
 8002f88:	20000044 	.word	0x20000044

08002f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <vTaskPlaceOnEventList+0x28>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff f8d0 	bl	8002144 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	6838      	ldr	r0, [r7, #0]
 8002fa8:	f000 fa6e 	bl	8003488 <prvAddCurrentTaskToDelayedList>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000044 	.word	0x20000044

08002fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	6a12      	ldr	r2, [r2, #32]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	69d2      	ldr	r2, [r2, #28]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3318      	adds	r3, #24
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d103      	bne.n	8002ff6 <xTaskRemoveFromEventList+0x3e>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	1e5a      	subs	r2, r3, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003006:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <xTaskRemoveFromEventList+0x178>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d15e      	bne.n	80030cc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	68d2      	ldr	r2, [r2, #12]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	3304      	adds	r3, #4
 8003030:	429a      	cmp	r2, r3
 8003032:	d103      	bne.n	800303c <xTaskRemoveFromEventList+0x84>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1e5a      	subs	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b37      	ldr	r3, [pc, #220]	; (8003134 <xTaskRemoveFromEventList+0x17c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	4a36      	ldr	r2, [pc, #216]	; (8003134 <xTaskRemoveFromEventList+0x17c>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4935      	ldr	r1, [pc, #212]	; (8003138 <xTaskRemoveFromEventList+0x180>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3304      	adds	r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	3204      	adds	r2, #4
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1d1a      	adds	r2, r3, #4
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <xTaskRemoveFromEventList+0x180>)
 80030a2:	441a      	add	r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	615a      	str	r2, [r3, #20]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	4922      	ldr	r1, [pc, #136]	; (8003138 <xTaskRemoveFromEventList+0x180>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	481e      	ldr	r0, [pc, #120]	; (8003138 <xTaskRemoveFromEventList+0x180>)
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	6019      	str	r1, [r3, #0]
 80030ca:	e01b      	b.n	8003104 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <xTaskRemoveFromEventList+0x184>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	61da      	str	r2, [r3, #28]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	621a      	str	r2, [r3, #32]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	3218      	adds	r2, #24
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f103 0218 	add.w	r2, r3, #24
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4a11      	ldr	r2, [pc, #68]	; (800313c <xTaskRemoveFromEventList+0x184>)
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <xTaskRemoveFromEventList+0x184>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <xTaskRemoveFromEventList+0x184>)
 8003102:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <xTaskRemoveFromEventList+0x188>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d905      	bls.n	800311e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <xTaskRemoveFromEventList+0x18c>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e001      	b.n	8003122 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003122:	69fb      	ldr	r3, [r7, #28]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3724      	adds	r7, #36	; 0x24
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	2000011c 	.word	0x2000011c
 8003134:	200000fc 	.word	0x200000fc
 8003138:	20000048 	.word	0x20000048
 800313c:	200000b4 	.word	0x200000b4
 8003140:	20000044 	.word	0x20000044
 8003144:	20000108 	.word	0x20000108

08003148 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <vTaskInternalSetTimeOutState+0x24>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <vTaskInternalSetTimeOutState+0x28>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	605a      	str	r2, [r3, #4]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	2000010c 	.word	0x2000010c
 8003170:	200000f8 	.word	0x200000f8

08003174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800317e:	f000 fc1d 	bl	80039bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <xTaskCheckForTimeOut+0x8c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d102      	bne.n	80031a2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e026      	b.n	80031f0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <xTaskCheckForTimeOut+0x90>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d00a      	beq.n	80031c4 <xTaskCheckForTimeOut+0x50>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d305      	bcc.n	80031c4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e015      	b.n	80031f0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20b      	bcs.n	80031e6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffb4 	bl	8003148 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e004      	b.n	80031f0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80031f0:	f000 fbfe 	bl	80039f0 <vPortExitCritical>

    return xReturn;
 80031f4:	697b      	ldr	r3, [r7, #20]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200000f8 	.word	0x200000f8
 8003204:	2000010c 	.word	0x2000010c

08003208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <vTaskMissedYield+0x14>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000108 	.word	0x20000108

08003220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003228:	f000 f854 	bl	80032d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <prvIdleTask+0x2c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d907      	bls.n	8003244 <prvIdleTask+0x24>
            {
                taskYIELD();
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <prvIdleTask+0x30>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8003244:	f7fe ff28 	bl	8002098 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003248:	e7ee      	b.n	8003228 <prvIdleTask+0x8>
 800324a:	bf00      	nop
 800324c:	20000048 	.word	0x20000048
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	e00c      	b.n	800327a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <prvInitialiseTaskLists+0x60>)
 800326c:	4413      	add	r3, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff3d 	bl	80020ee <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d9ef      	bls.n	8003260 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003280:	480d      	ldr	r0, [pc, #52]	; (80032b8 <prvInitialiseTaskLists+0x64>)
 8003282:	f7fe ff34 	bl	80020ee <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003286:	480d      	ldr	r0, [pc, #52]	; (80032bc <prvInitialiseTaskLists+0x68>)
 8003288:	f7fe ff31 	bl	80020ee <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800328c:	480c      	ldr	r0, [pc, #48]	; (80032c0 <prvInitialiseTaskLists+0x6c>)
 800328e:	f7fe ff2e 	bl	80020ee <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003292:	480c      	ldr	r0, [pc, #48]	; (80032c4 <prvInitialiseTaskLists+0x70>)
 8003294:	f7fe ff2b 	bl	80020ee <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <prvInitialiseTaskLists+0x74>)
 800329a:	f7fe ff28 	bl	80020ee <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <prvInitialiseTaskLists+0x78>)
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <prvInitialiseTaskLists+0x64>)
 80032a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <prvInitialiseTaskLists+0x7c>)
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <prvInitialiseTaskLists+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000048 	.word	0x20000048
 80032b8:	20000084 	.word	0x20000084
 80032bc:	20000098 	.word	0x20000098
 80032c0:	200000b4 	.word	0x200000b4
 80032c4:	200000c8 	.word	0x200000c8
 80032c8:	200000e0 	.word	0x200000e0
 80032cc:	200000ac 	.word	0x200000ac
 80032d0:	200000b0 	.word	0x200000b0

080032d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032da:	e019      	b.n	8003310 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80032dc:	f000 fb6e 	bl	80039bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <prvCheckTasksWaitingTermination+0x50>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe ff61 	bl	80021b4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <prvCheckTasksWaitingTermination+0x54>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <prvCheckTasksWaitingTermination+0x54>)
 80032fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <prvCheckTasksWaitingTermination+0x58>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <prvCheckTasksWaitingTermination+0x58>)
 8003304:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003306:	f000 fb73 	bl	80039f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f810 	bl	8003330 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <prvCheckTasksWaitingTermination+0x58>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e1      	bne.n	80032dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200000c8 	.word	0x200000c8
 8003328:	200000f4 	.word	0x200000f4
 800332c:	200000dc 	.word	0x200000dc

08003330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f9bd 	bl	80036bc <vPortFree>
            vPortFree( pxTCB );
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9ba 	bl	80036bc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <prvResetNextTaskUnblockTime+0x2c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <prvResetNextTaskUnblockTime+0x30>)
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003366:	e005      	b.n	8003374 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <prvResetNextTaskUnblockTime+0x2c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <prvResetNextTaskUnblockTime+0x30>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	200000ac 	.word	0x200000ac
 8003380:	20000114 	.word	0x20000114

08003384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06c      	beq.n	8003474 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d061      	beq.n	8003474 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d15d      	bne.n	8003474 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fef9 	bl	80021b4 <uxListRemove>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2201      	movs	r2, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <xTaskPriorityDisinherit+0xfc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4013      	ands	r3, r2
 80033da:	4a29      	ldr	r2, [pc, #164]	; (8003480 <xTaskPriorityDisinherit+0xfc>)
 80033dc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f1c3 0203 	rsb	r2, r3, #3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <xTaskPriorityDisinherit+0xfc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <xTaskPriorityDisinherit+0xfc>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	491e      	ldr	r1, [pc, #120]	; (8003484 <xTaskPriorityDisinherit+0x100>)
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3304      	adds	r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	3204      	adds	r2, #4
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1d1a      	adds	r2, r3, #4
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <xTaskPriorityDisinherit+0x100>)
 8003448:	441a      	add	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	615a      	str	r2, [r3, #20]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	490c      	ldr	r1, [pc, #48]	; (8003484 <xTaskPriorityDisinherit+0x100>)
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	4808      	ldr	r0, [pc, #32]	; (8003484 <xTaskPriorityDisinherit+0x100>)
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003474:	697b      	ldr	r3, [r7, #20]
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200000fc 	.word	0x200000fc
 8003484:	20000048 	.word	0x20000048

08003488 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3304      	adds	r3, #4
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fe88 	bl	80021b4 <uxListRemove>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	2201      	movs	r2, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <prvAddCurrentTaskToDelayedList+0xec>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4013      	ands	r3, r2
 80034be:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <prvAddCurrentTaskToDelayedList+0xec>)
 80034c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d124      	bne.n	8003514 <prvAddCurrentTaskToDelayedList+0x8c>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d021      	beq.n	8003514 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	3204      	adds	r2, #4
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1d1a      	adds	r2, r3, #4
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003504:	615a      	str	r2, [r3, #20]
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <prvAddCurrentTaskToDelayedList+0xf0>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003512:	e026      	b.n	8003562 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	d209      	bcs.n	8003540 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <prvAddCurrentTaskToDelayedList+0xf4>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7fe fe03 	bl	8002144 <vListInsert>
}
 800353e:	e010      	b.n	8003562 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7fe fdf9 	bl	8002144 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d202      	bcs.n	8003562 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <prvAddCurrentTaskToDelayedList+0xfc>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6013      	str	r3, [r2, #0]
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200000f8 	.word	0x200000f8
 8003570:	20000044 	.word	0x20000044
 8003574:	200000fc 	.word	0x200000fc
 8003578:	200000e0 	.word	0x200000e0
 800357c:	200000b0 	.word	0x200000b0
 8003580:	200000ac 	.word	0x200000ac
 8003584:	20000114 	.word	0x20000114

08003588 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003594:	f7ff faaa 	bl	8002aec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003598:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <pvPortMalloc+0x120>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80035a0:	f000 f8ca 	bl	8003738 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80035aa:	2208      	movs	r2, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	3308      	adds	r3, #8
 80035b6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d804      	bhi.n	80035cc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	e001      	b.n	80035d0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db60      	blt.n	8003698 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05d      	beq.n	8003698 <pvPortMalloc+0x110>
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <pvPortMalloc+0x124>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d858      	bhi.n	8003698 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035e6:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <pvPortMalloc+0x128>)
 80035e8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <pvPortMalloc+0x128>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035f0:	e004      	b.n	80035fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d903      	bls.n	800360e <pvPortMalloc+0x86>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f1      	bne.n	80035f2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800360e:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <pvPortMalloc+0x120>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	429a      	cmp	r2, r3
 8003616:	d03f      	beq.n	8003698 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	4413      	add	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	2308      	movs	r3, #8
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	429a      	cmp	r2, r3
 8003638:	d90f      	bls.n	800365a <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f8cb 	bl	80037f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <pvPortMalloc+0x124>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <pvPortMalloc+0x124>)
 8003666:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <pvPortMalloc+0x124>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <pvPortMalloc+0x12c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d203      	bcs.n	800367c <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <pvPortMalloc+0x124>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <pvPortMalloc+0x12c>)
 800367a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <pvPortMalloc+0x130>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <pvPortMalloc+0x130>)
 8003696:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003698:	f7ff fa36 	bl	8002b08 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000928 	.word	0x20000928
 80036ac:	2000092c 	.word	0x2000092c
 80036b0:	20000920 	.word	0x20000920
 80036b4:	20000930 	.word	0x20000930
 80036b8:	20000934 	.word	0x20000934

080036bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d02b      	beq.n	8003726 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036ce:	2308      	movs	r3, #8
 80036d0:	425b      	negs	r3, r3
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	0fdb      	lsrs	r3, r3, #31
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01c      	beq.n	8003726 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d118      	bne.n	8003726 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003700:	f7ff f9f4 	bl	8002aec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <vPortFree+0x74>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4413      	add	r3, r2
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <vPortFree+0x74>)
 8003710:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	f000 f86c 	bl	80037f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <vPortFree+0x78>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <vPortFree+0x78>)
 8003720:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003722:	f7ff f9f1 	bl	8002b08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000092c 	.word	0x2000092c
 8003734:	20000938 	.word	0x20000938

08003738 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800373e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003742:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <prvHeapInit+0xa4>)
 8003746:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3307      	adds	r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <prvHeapInit+0xa4>)
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <prvHeapInit+0xa8>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <prvHeapInit+0xa8>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003784:	2208      	movs	r2, #8
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <prvHeapInit+0xac>)
 8003798:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <prvHeapInit+0xac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <prvHeapInit+0xac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvHeapInit+0xac>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <prvHeapInit+0xb0>)
 80037c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a07      	ldr	r2, [pc, #28]	; (80037ec <prvHeapInit+0xb4>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000120 	.word	0x20000120
 80037e0:	20000920 	.word	0x20000920
 80037e4:	20000928 	.word	0x20000928
 80037e8:	20000930 	.word	0x20000930
 80037ec:	2000092c 	.word	0x2000092c

080037f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <prvInsertBlockIntoFreeList+0xa8>)
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e002      	b.n	8003804 <prvInsertBlockIntoFreeList+0x14>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d8f7      	bhi.n	80037fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4413      	add	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d108      	bne.n	8003832 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	441a      	add	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d118      	bne.n	8003878 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <prvInsertBlockIntoFreeList+0xac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d00d      	beq.n	800386e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e008      	b.n	8003880 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <prvInsertBlockIntoFreeList+0xac>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e003      	b.n	8003880 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d002      	beq.n	800388e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000920 	.word	0x20000920
 800389c:	20000928 	.word	0x20000928

080038a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b04      	subs	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b04      	subs	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f023 0201 	bic.w	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038d0:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <pxPortInitialiseStack+0x54>)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b14      	subs	r3, #20
 80038da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b20      	subs	r3, #32
 80038e6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	080038f9 	.word	0x080038f9

080038f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80038fe:	2300      	movs	r3, #0
 8003900:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003902:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
    }
 8003914:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003916:	bf00      	nop
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0fc      	beq.n	8003918 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	0000      	movs	r0, r0
 800392c:	0000      	movs	r0, r0
	...

08003930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <pxCurrentTCBConst2>)
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	6808      	ldr	r0, [r1, #0]
 8003936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800393a:	f380 8809 	msr	PSP, r0
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f380 8811 	msr	BASEPRI, r0
 800394a:	f04e 0e0d 	orr.w	lr, lr, #13
 800394e:	4770      	bx	lr

08003950 <pxCurrentTCBConst2>:
 8003950:	20000044 	.word	0x20000044
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop

08003958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003958:	4806      	ldr	r0, [pc, #24]	; (8003974 <prvPortStartFirstTask+0x1c>)
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f380 8808 	msr	MSP, r0
 8003962:	b662      	cpsie	i
 8003964:	b661      	cpsie	f
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	df00      	svc	0
 8003970:	bf00      	nop
 8003972:	0000      	.short	0x0000
 8003974:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop

0800397c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <xPortStartScheduler+0x38>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <xPortStartScheduler+0x38>)
 8003986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <xPortStartScheduler+0x38>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <xPortStartScheduler+0x38>)
 8003992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003998:	f000 f890 	bl	8003abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <xPortStartScheduler+0x3c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80039a2:	f7ff ffd9 	bl	8003958 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80039a6:	f7ff faab 	bl	8002f00 <vTaskSwitchContext>
    prvTaskExitError();
 80039aa:	f7ff ffa5 	bl	80038f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000ed20 	.word	0xe000ed20
 80039b8:	20000004 	.word	0x20000004

080039bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
        __asm volatile
 80039c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	607b      	str	r3, [r7, #4]
    }
 80039d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <vPortEnterCritical+0x30>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	4a03      	ldr	r2, [pc, #12]	; (80039ec <vPortEnterCritical+0x30>)
 80039de:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000004 	.word	0x20000004

080039f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <vPortExitCritical+0x30>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <vPortExitCritical+0x30>)
 80039fe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <vPortExitCritical+0x30>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <vPortExitCritical+0x24>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	607b      	str	r3, [r7, #4]
        __asm volatile
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f383 8811 	msr	BASEPRI, r3
    }
 8003a12:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000004 	.word	0x20000004
	...

08003a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a30:	f3ef 8009 	mrs	r0, PSP
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <pxCurrentTCBConst>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a40:	6010      	str	r0, [r2, #0]
 8003a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a46:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003a4a:	f380 8811 	msr	BASEPRI, r0
 8003a4e:	f7ff fa57 	bl	8002f00 <vTaskSwitchContext>
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a66:	f380 8809 	msr	PSP, r0
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	4770      	bx	lr

08003a70 <pxCurrentTCBConst>:
 8003a70:	20000044 	.word	0x20000044
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
    }
 8003a90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a92:	f7ff f92f 	bl	8002cf4 <xTaskIncrementTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <xPortSysTickHandler+0x40>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f383 8811 	msr	BASEPRI, r3
    }
 8003aae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <vPortSetupTimerInterrupt+0x24>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <vPortSetupTimerInterrupt+0x28>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <vPortSetupTimerInterrupt+0x2c>)
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <vPortSetupTimerInterrupt+0x30>)
 8003ad0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <vPortSetupTimerInterrupt+0x24>)
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	e000e010 	.word	0xe000e010
 8003ae4:	e000e018 	.word	0xe000e018
 8003ae8:	e000e014 	.word	0xe000e014
 8003aec:	0001193f 	.word	0x0001193f

08003af0 <__libc_init_array>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	2600      	movs	r6, #0
 8003af4:	4d0c      	ldr	r5, [pc, #48]	; (8003b28 <__libc_init_array+0x38>)
 8003af6:	4c0d      	ldr	r4, [pc, #52]	; (8003b2c <__libc_init_array+0x3c>)
 8003af8:	1b64      	subs	r4, r4, r5
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	42a6      	cmp	r6, r4
 8003afe:	d109      	bne.n	8003b14 <__libc_init_array+0x24>
 8003b00:	f000 f830 	bl	8003b64 <_init>
 8003b04:	2600      	movs	r6, #0
 8003b06:	4d0a      	ldr	r5, [pc, #40]	; (8003b30 <__libc_init_array+0x40>)
 8003b08:	4c0a      	ldr	r4, [pc, #40]	; (8003b34 <__libc_init_array+0x44>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	42a6      	cmp	r6, r4
 8003b10:	d105      	bne.n	8003b1e <__libc_init_array+0x2e>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b18:	4798      	blx	r3
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7ee      	b.n	8003afc <__libc_init_array+0xc>
 8003b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b22:	4798      	blx	r3
 8003b24:	3601      	adds	r6, #1
 8003b26:	e7f2      	b.n	8003b0e <__libc_init_array+0x1e>
 8003b28:	08003ba8 	.word	0x08003ba8
 8003b2c:	08003ba8 	.word	0x08003ba8
 8003b30:	08003ba8 	.word	0x08003ba8
 8003b34:	08003bac 	.word	0x08003bac

08003b38 <memcpy>:
 8003b38:	440a      	add	r2, r1
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b40:	d100      	bne.n	8003b44 <memcpy+0xc>
 8003b42:	4770      	bx	lr
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b50:	d1f9      	bne.n	8003b46 <memcpy+0xe>
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <memset>:
 8003b54:	4603      	mov	r3, r0
 8003b56:	4402      	add	r2, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
