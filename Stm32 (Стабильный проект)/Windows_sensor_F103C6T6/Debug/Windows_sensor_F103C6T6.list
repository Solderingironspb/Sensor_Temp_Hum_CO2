
Windows_sensor_F103C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002190  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022a0  080022a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080022b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  200000bc  080022b0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000329f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bc2  00000000  00000000  000232d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00023e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000298  00000000  00000000  000241c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001081a  00000000  00000000  00024460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000410e  00000000  00000000  00034c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000555d1  00000000  00000000  00038d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008e359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a8c  00000000  00000000  0008e3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002284 	.word	0x08002284

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002284 	.word	0x08002284

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HDC1080_init>:
uint8_t I2C1_tx_buffer[4] = { 0, };  //Исходящий буфер
uint8_t I2C1_rx_buffer[10] = { 0, };  //Входящий буфер
float Temperature, Humidity;


void HDC1080_init(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af02      	add	r7, sp, #8
	/*-------------------Просмотр настроек для модуля HDC1080-------------------*/
	I2C1_tx_buffer[0] = 0x02;  //Команда конфигурация
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <HDC1080_init+0x9c>)
 8000610:	2202      	movs	r2, #2
 8000612:	701a      	strb	r2, [r3, #0]
	I2C1_tx_buffer[1] = 0x10;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <HDC1080_init+0x9c>)
 8000616:	2210      	movs	r2, #16
 8000618:	705a      	strb	r2, [r3, #1]
	I2C1_tx_buffer[2] = 0x00;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <HDC1080_init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	709a      	strb	r2, [r3, #2]
	//Скажем модулю, что хотим записать данные на адрес "Configuration" со значением 0x0000
	if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 3, 100)) {
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2303      	movs	r3, #3
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <HDC1080_init+0x9c>)
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	481f      	ldr	r0, [pc, #124]	; (80006a8 <HDC1080_init+0xa0>)
 800062c:	f001 fae0 	bl	8001bf0 <CMSIS_I2C_Data_Transmit>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d004      	beq.n	8000640 <HDC1080_init+0x38>
		ERROR_LED_OFF();  //Неисправностей нет
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <HDC1080_init+0xa4>)
 8000638:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	e002      	b.n	8000646 <HDC1080_init+0x3e>
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <HDC1080_init+0xa4>)
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	611a      	str	r2, [r3, #16]
	}
	Delay_ms(20);
 8000646:	2014      	movs	r0, #20
 8000648:	f000 fde2 	bl	8001210 <Delay_ms>
	//Скажем модулю, что хотим просмотреть данные с адреса "Configuration"
	if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 1, 100)) {
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HDC1080_init+0x9c>)
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <HDC1080_init+0xa0>)
 8000658:	f001 faca 	bl	8001bf0 <CMSIS_I2C_Data_Transmit>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <HDC1080_init+0x64>
		ERROR_LED_OFF();  //Неисправностей нет
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HDC1080_init+0xa4>)
 8000664:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	e002      	b.n	8000672 <HDC1080_init+0x6a>
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HDC1080_init+0xa4>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	611a      	str	r2, [r3, #16]
	}
	Delay_ms(20);
 8000672:	2014      	movs	r0, #20
 8000674:	f000 fdcc 	bl	8001210 <Delay_ms>

	//Сохраним конфигурацию в переменную
	if (CMSIS_I2C_Data_Receive(I2C1, HDC1080ADDR, I2C1_rx_buffer, 2, 100)) {
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <HDC1080_init+0xa8>)
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <HDC1080_init+0xa0>)
 8000684:	f001 fb7e 	bl	8001d84 <CMSIS_I2C_Data_Receive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <HDC1080_init+0x90>
		ERROR_LED_OFF();  //Неисправностей нет
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HDC1080_init+0xa4>)
 8000690:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000694:	611a      	str	r2, [r3, #16]
	} else {
		ERROR_LED_ON();//Появится сигнализация о неисправности
	}
	/*-------------------Просмотр настроек для модуля HDC1080-------------------*/
}
 8000696:	e002      	b.n	800069e <HDC1080_init+0x96>
		ERROR_LED_ON();//Появится сигнализация о неисправности
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HDC1080_init+0xa4>)
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	611a      	str	r2, [r3, #16]
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40010800 	.word	0x40010800
 80006b0:	2000002c 	.word	0x2000002c

080006b4 <UART_MQTT_Check_net>:
extern struct USART_name husart2; //Объявляем структуру по USART.(см. stm32f103xx_CMSIS.h)


/*----------Проверка подключения ESP8266 к Wifi и MQTT брокеру-----------------*/
/// Проверка подключения ESP8266 к Wifi и MQTT брокеру
void UART_MQTT_Check_net(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	if (UART_MQTT_Checksumm_validation(husart2.rx_buffer)) {
 80006b8:	4859      	ldr	r0, [pc, #356]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006ba:	f000 f8b9 	bl	8000830 <UART_MQTT_Checksumm_validation>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f000 80ab 	beq.w	800081c <UART_MQTT_Check_net+0x168>
		if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xBB) && (husart2.rx_buffer[4] == 0xBB) && (husart2.rx_buffer[5] == 0xBB) && (husart2.rx_buffer[6] == 0xBB)) {
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d125      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006ce:	4b54      	ldr	r3, [pc, #336]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d121      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006d6:	4b52      	ldr	r3, [pc, #328]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006d8:	789b      	ldrb	r3, [r3, #2]
 80006da:	2bff      	cmp	r3, #255	; 0xff
 80006dc:	d11d      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006e0:	78db      	ldrb	r3, [r3, #3]
 80006e2:	2bbb      	cmp	r3, #187	; 0xbb
 80006e4:	d119      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006e6:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2bbb      	cmp	r3, #187	; 0xbb
 80006ec:	d115      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006ee:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2bbb      	cmp	r3, #187	; 0xbb
 80006f4:	d111      	bne.n	800071a <UART_MQTT_Check_net+0x66>
 80006f6:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	2bbb      	cmp	r3, #187	; 0xbb
 80006fc:	d10d      	bne.n	800071a <UART_MQTT_Check_net+0x66>
			//WIFI_connected = false; //Wifi еще не подключился
			NETWORK_Status = WIFI_STATUS_NOT_CONNECTED;
 80006fe:	4b49      	ldr	r3, [pc, #292]	; (8000824 <UART_MQTT_Check_net+0x170>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 7200-1;
 8000704:	4b48      	ldr	r3, [pc, #288]	; (8000828 <UART_MQTT_Check_net+0x174>)
 8000706:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 800070c:	4b46      	ldr	r3, [pc, #280]	; (8000828 <UART_MQTT_Check_net+0x174>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a45      	ldr	r2, [pc, #276]	; (8000828 <UART_MQTT_Check_net+0x174>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e080      	b.n	800081c <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xAA) && (husart2.rx_buffer[4] == 0xAA) && (husart2.rx_buffer[5] == 0xAA) && (husart2.rx_buffer[6] == 0xAA)) {
 800071a:	4b41      	ldr	r3, [pc, #260]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d125      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d121      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	2bff      	cmp	r3, #255	; 0xff
 8000730:	d11d      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 8000732:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	2baa      	cmp	r3, #170	; 0xaa
 8000738:	d119      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	2baa      	cmp	r3, #170	; 0xaa
 8000740:	d115      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000744:	795b      	ldrb	r3, [r3, #5]
 8000746:	2baa      	cmp	r3, #170	; 0xaa
 8000748:	d111      	bne.n	800076e <UART_MQTT_Check_net+0xba>
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 800074c:	799b      	ldrb	r3, [r3, #6]
 800074e:	2baa      	cmp	r3, #170	; 0xaa
 8000750:	d10d      	bne.n	800076e <UART_MQTT_Check_net+0xba>
			//WIFI_connected = true; //Wifi подключился
			NETWORK_Status = WIFI_STATUS_CONNECTED;
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <UART_MQTT_Check_net+0x170>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 1800-1;
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <UART_MQTT_Check_net+0x174>)
 800075a:	f240 7207 	movw	r2, #1799	; 0x707
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <UART_MQTT_Check_net+0x174>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a30      	ldr	r2, [pc, #192]	; (8000828 <UART_MQTT_Check_net+0x174>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e056      	b.n	800081c <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xDD) && (husart2.rx_buffer[4] == 0xDD) && (husart2.rx_buffer[5] == 0xDD) && (husart2.rx_buffer[6] == 0xDD)) {
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2bff      	cmp	r3, #255	; 0xff
 8000774:	d125      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000778:	785b      	ldrb	r3, [r3, #1]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d121      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	2bff      	cmp	r3, #255	; 0xff
 8000784:	d11d      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	2bdd      	cmp	r3, #221	; 0xdd
 800078c:	d119      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	2bdd      	cmp	r3, #221	; 0xdd
 8000794:	d115      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2bdd      	cmp	r3, #221	; 0xdd
 800079c:	d111      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007a0:	799b      	ldrb	r3, [r3, #6]
 80007a2:	2bdd      	cmp	r3, #221	; 0xdd
 80007a4:	d10d      	bne.n	80007c2 <UART_MQTT_Check_net+0x10e>
			//MQTT_connected = false; //Wifi уже работает, но MQTT еще не подключился
			NETWORK_Status = MQTT_STATUS_NOT_CONNECTED;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <UART_MQTT_Check_net+0x170>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 450-1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <UART_MQTT_Check_net+0x174>)
 80007ae:	f240 12c1 	movw	r2, #449	; 0x1c1
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
			SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <UART_MQTT_Check_net+0x174>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <UART_MQTT_Check_net+0x174>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e02c      	b.n	800081c <UART_MQTT_Check_net+0x168>
		} else if ((husart2.rx_buffer[0] == 0xFF) && (husart2.rx_buffer[1] == 0xFF) && (husart2.rx_buffer[2] == 0xFF) && (husart2.rx_buffer[3] == 0xCC) && (husart2.rx_buffer[4] == 0xCC) && (husart2.rx_buffer[5] == 0xCC) && (husart2.rx_buffer[6] == 0xCC)) {
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d128      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	2bff      	cmp	r3, #255	; 0xff
 80007d0:	d124      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2bff      	cmp	r3, #255	; 0xff
 80007d8:	d120      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007dc:	78db      	ldrb	r3, [r3, #3]
 80007de:	2bcc      	cmp	r3, #204	; 0xcc
 80007e0:	d11c      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	2bcc      	cmp	r3, #204	; 0xcc
 80007e8:	d118      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007ec:	795b      	ldrb	r3, [r3, #5]
 80007ee:	2bcc      	cmp	r3, #204	; 0xcc
 80007f0:	d114      	bne.n	800081c <UART_MQTT_Check_net+0x168>
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <UART_MQTT_Check_net+0x16c>)
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	2bcc      	cmp	r3, #204	; 0xcc
 80007f8:	d110      	bne.n	800081c <UART_MQTT_Check_net+0x168>
			//MQTT_connected = true; //MQTT подключился
			NETWORK_Status = MQTT_STATUS_CONNECTED;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <UART_MQTT_Check_net+0x170>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = 7200-1;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <UART_MQTT_Check_net+0x174>)
 8000802:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
			CLEAR_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <UART_MQTT_Check_net+0x174>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <UART_MQTT_Check_net+0x174>)
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	6013      	str	r3, [r2, #0]
			WIFI_LED_ON();
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <UART_MQTT_Check_net+0x178>)
 8000816:	2210      	movs	r2, #16
 8000818:	611a      	str	r2, [r3, #16]
		}
	}
}
 800081a:	e7ff      	b.n	800081c <UART_MQTT_Check_net+0x168>
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000008c 	.word	0x2000008c
 8000824:	20000036 	.word	0x20000036
 8000828:	40000400 	.word	0x40000400
 800082c:	40010800 	.word	0x40010800

08000830 <UART_MQTT_Checksumm_validation>:
/*----------Проверка подключения ESP8266 к Wifi и MQTT брокеру-----------------*/

/*----------Проверка контрольной суммы входящего сообщения-----------------*/
/// Проверка контрольной суммы входящего сообщения
/// \param *rx_buffer - буфер, используемый для приема данных
bool UART_MQTT_Checksumm_validation(uint8_t* rx_buffer) {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	bool result;
	uint16_t CRC_rx_buffer = 0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	81bb      	strh	r3, [r7, #12]
	uint16_t CRC_check = 0x0000;
 800083c:	2300      	movs	r3, #0
 800083e:	817b      	strh	r3, [r7, #10]
	CRC_rx_buffer = (~(rx_buffer[1] + rx_buffer[2] + rx_buffer[3] + rx_buffer[4] + rx_buffer[5] + rx_buffer[6])) + 1;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b29a      	uxth	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3302      	adds	r3, #2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29b      	uxth	r3, r3
 8000850:	4413      	add	r3, r2
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3303      	adds	r3, #3
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b29b      	uxth	r3, r3
 800085c:	4413      	add	r3, r2
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3304      	adds	r3, #4
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4413      	add	r3, r2
 800086a:	b29a      	uxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3305      	adds	r3, #5
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3306      	adds	r3, #6
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b29b      	uxth	r3, r3
 8000880:	4413      	add	r3, r2
 8000882:	b29b      	uxth	r3, r3
 8000884:	425b      	negs	r3, r3
 8000886:	81bb      	strh	r3, [r7, #12]
	CRC_check = (CRC_check | rx_buffer[7] << 8) | (CRC_check | rx_buffer[8]);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3307      	adds	r3, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000896:	4313      	orrs	r3, r2
 8000898:	b21a      	sxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3308      	adds	r3, #8
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	817b      	strh	r3, [r7, #10]
	//CRC_rx_buffer == CRC_check ? result = true : result = false;
	if (CRC_rx_buffer == CRC_check) {
 80008a8:	89ba      	ldrh	r2, [r7, #12]
 80008aa:	897b      	ldrh	r3, [r7, #10]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d102      	bne.n	80008b6 <UART_MQTT_Checksumm_validation+0x86>
		result = true;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e001      	b.n	80008ba <UART_MQTT_Checksumm_validation+0x8a>
	} else {
		result = false;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
	...

080008c8 <UART_MQTT_Send_data_uint16_t>:
/*----------Отправка uint16_t в массив-----------------*/
/// Отправка uint16_t в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и
/// принимающем устройстве) \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_uint16_t(uint8_t VARIABLE_ID, uint16_t data, uint8_t* tx_buffer) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	603a      	str	r2, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	460b      	mov	r3, r1
 80008d6:	80bb      	strh	r3, [r7, #4]
	tx_buffer[0] = 0xFF;  // Start byte
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x05;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3302      	adds	r3, #2
 80008ea:	2205      	movs	r2, #5
 80008ec:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = data >> 16;
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	141a      	asrs	r2, r3, #16
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	3303      	adds	r3, #3
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = data >> 16;
 80008fa:	88bb      	ldrh	r3, [r7, #4]
 80008fc:	141a      	asrs	r2, r3, #16
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3304      	adds	r3, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = data >> 8;
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29a      	uxth	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	3305      	adds	r3, #5
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = data;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3306      	adds	r3, #6
 8000918:	88ba      	ldrh	r2, [r7, #4]
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b29b      	uxth	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	b29a      	uxth	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	3303      	adds	r3, #3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b29b      	uxth	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3304      	adds	r3, #4
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b29a      	uxth	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3305      	adds	r3, #5
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b29a      	uxth	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3306      	adds	r3, #6
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4413      	add	r3, r2
 8000960:	b29b      	uxth	r3, r3
 8000962:	425b      	negs	r3, r3
 8000964:	81fb      	strh	r3, [r7, #14]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29a      	uxth	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3307      	adds	r3, #7
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	3308      	adds	r3, #8
 8000978:	89fa      	ldrh	r2, [r7, #14]
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	701a      	strb	r2, [r3, #0]

	CMSIS_USART_Transmit(USART2, tx_buffer, 9, 100);
 800097e:	2364      	movs	r3, #100	; 0x64
 8000980:	2209      	movs	r2, #9
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <UART_MQTT_Send_data_uint16_t+0xcc>)
 8000986:	f001 f80f 	bl	80019a8 <CMSIS_USART_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40004400 	.word	0x40004400

08000998 <UART_MQTT_Send_data_float>:
/*----------Отправка float в массив-----------------*/
/// Отправка float в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и
/// принимающем устройстве) \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_float(uint8_t VARIABLE_ID, float data, uint8_t* tx_buffer) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	73fb      	strb	r3, [r7, #15]
	tx_buffer[0] = 0xFF;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x08;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3302      	adds	r3, #2
 80009b8:	2208      	movs	r2, #8
 80009ba:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = *((uint32_t*)&data) >> 24;
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	0e1a      	lsrs	r2, r3, #24
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3303      	adds	r3, #3
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = *((uint32_t*)&data) >> 16;
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	0c1a      	lsrs	r2, r3, #16
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3304      	adds	r3, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = *((uint32_t*)&data) >> 8;
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	0a1a      	lsrs	r2, r3, #8
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3305      	adds	r3, #5
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = *((uint32_t*)&data);
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3306      	adds	r3, #6
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3302      	adds	r3, #2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3303      	adds	r3, #3
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4413      	add	r3, r2
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3305      	adds	r3, #5
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3306      	adds	r3, #6
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	425b      	negs	r3, r3
 8000a40:	82fb      	strh	r3, [r7, #22]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 8000a42:	8afb      	ldrh	r3, [r7, #22]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3308      	adds	r3, #8
 8000a54:	8afa      	ldrh	r2, [r7, #22]
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	701a      	strb	r2, [r3, #0]

	CMSIS_USART_Transmit(USART2, tx_buffer, 9, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <UART_MQTT_Send_data_float+0xd8>)
 8000a62:	f000 ffa1 	bl	80019a8 <CMSIS_USART_Transmit>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400

08000a74 <Software_timer>:
 *  @breif Запуск таймера
 *  @param  *Timer Программный таймер
 *  @param  Time Время, на которое запустить таймер
 **************************************************************************************************
 */
void Software_timer(uint32_t *Timer, uint32_t Time) {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	*Timer = Time;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <Software_timer_check>:
 *  @breif Проверка таймера на окончание счета
 *  @param  *Timer Программный таймер
 *  @retval  Возвращает статус таймера. True - Таймер еще работает. False - Таймер досчитал до 0.
 **************************************************************************************************
 */
bool Software_timer_check(uint32_t *Timer) {
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	if (*Timer) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <Software_timer_check+0x1e>
		*Timer = *Timer - 1;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
		return true;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <Software_timer_check+0x20>
	}else{
		return false;
 8000aac:	2300      	movs	r3, #0
	}
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <GPIO_init>:
//PA10 USART1 Rx
//PB6 SCL (I2C1 clock) Alternate function open drain
//PB7 SDA (I2C1 Data I/O) Alternate function open drain
/*-----------------------Распиновка-----------------------*/

void GPIO_init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af02      	add	r7, sp, #8
	/*Настройка PA2 PA3 PA9 PA10 производятся при инициализации USART1 и USART2(см. main.c)*/
	/*Настройка PB6 PB7 производятся при инициализации I2C1 (см. main.c)*/

	/*Инициализация PA4 Wifi LED*/
	CMSIS_GPIO_init(GPIOA, 4, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000abe:	2303      	movs	r3, #3
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <GPIO_init+0x64>)
 8000aca:	f000 fcef 	bl	80014ac <CMSIS_GPIO_init>

	/*Инициализация PA5 USART1 LED*/
	CMSIS_GPIO_init(GPIOA, 5, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000ace:	2303      	movs	r3, #3
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <GPIO_init+0x64>)
 8000ada:	f000 fce7 	bl	80014ac <CMSIS_GPIO_init>

	/*Инициализация PBA I2C1 LED*/
	CMSIS_GPIO_init(GPIOA, 6, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000ade:	2303      	movs	r3, #3
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <GPIO_init+0x64>)
 8000aea:	f000 fcdf 	bl	80014ac <CMSIS_GPIO_init>

	/*Инициализация PA7 Error LED*/
	CMSIS_GPIO_init(GPIOA, 7, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000aee:	2303      	movs	r3, #3
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2300      	movs	r3, #0
 8000af4:	2200      	movs	r2, #0
 8000af6:	2107      	movs	r1, #7
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <GPIO_init+0x64>)
 8000afa:	f000 fcd7 	bl	80014ac <CMSIS_GPIO_init>

	/*Инициализация PA8 ESP8266 Reset*/
	CMSIS_GPIO_init(GPIOA, 8, GPIO_GENERAL_PURPOSE_OUTPUT, GPIO_OUTPUT_PUSH_PULL, GPIO_SPEED_50_MHZ);
 8000afe:	2303      	movs	r3, #3
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	2108      	movs	r1, #8
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <GPIO_init+0x64>)
 8000b0a:	f000 fccf 	bl	80014ac <CMSIS_GPIO_init>

	LED_Indication_Test(); //Тест световой индикации
 8000b0e:	f000 f81d 	bl	8000b4c <LED_Indication_Test>

	ESP8266_Reset(); //Сбросим ESP8266
 8000b12:	f000 f805 	bl	8000b20 <ESP8266_Reset>

}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010800 	.word	0x40010800

08000b20 <ESP8266_Reset>:
 ***************************************************************************************
 *  @breif Сброс ESP8266
 *  При запуске МК - сбросим ESP8266, чтоб инициализация прошла синхронно
 ***************************************************************************************
 */
void ESP8266_Reset(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	ESP8266_RESET_ON(); //Нажмем кнопку ресет на ESP8266
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <ESP8266_Reset+0x28>)
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	611a      	str	r2, [r3, #16]
	Delay_ms(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f000 fb6e 	bl	8001210 <Delay_ms>
	ESP8266_RESET_OFF(); //Отпустим кнопку ресет на ESP8266
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <ESP8266_Reset+0x28>)
 8000b36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b3a:	611a      	str	r2, [r3, #16]
	Delay_ms(200);
 8000b3c:	20c8      	movs	r0, #200	; 0xc8
 8000b3e:	f000 fb67 	bl	8001210 <Delay_ms>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010800 	.word	0x40010800

08000b4c <LED_Indication_Test>:
 ***************************************************************************************
 *  @breif Проверка индикации диодов
 *  При запуске МК красиво пробегут огоньки сверху вниз и обратно
 ***************************************************************************************
 */
void LED_Indication_Test(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	WIFI_LED_ON();
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b56:	2064      	movs	r0, #100	; 0x64
 8000b58:	f000 fb5a 	bl	8001210 <Delay_ms>
	USART1_LED_ON();
 8000b5c:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 fb54 	bl	8001210 <Delay_ms>
	I2C1_LED_ON();
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b6a:	2240      	movs	r2, #64	; 0x40
 8000b6c:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f000 fb4e 	bl	8001210 <Delay_ms>
	ERROR_LED_ON();
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f000 fb48 	bl	8001210 <Delay_ms>

	WIFI_LED_OFF();
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b86:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f000 fb41 	bl	8001210 <Delay_ms>
	USART1_LED_OFF();
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b94:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fb3a 	bl	8001210 <Delay_ms>
	I2C1_LED_OFF();
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000b9e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ba2:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f000 fb33 	bl	8001210 <Delay_ms>
	ERROR_LED_OFF();
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bb0:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bb2:	2064      	movs	r0, #100	; 0x64
 8000bb4:	f000 fb2c 	bl	8001210 <Delay_ms>

	ERROR_LED_ON();
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f000 fb26 	bl	8001210 <Delay_ms>
	I2C1_LED_ON();
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f000 fb20 	bl	8001210 <Delay_ms>
	USART1_LED_ON();
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bd6:	2064      	movs	r0, #100	; 0x64
 8000bd8:	f000 fb1a 	bl	8001210 <Delay_ms>
	WIFI_LED_ON();
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bde:	2210      	movs	r2, #16
 8000be0:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000be2:	2064      	movs	r0, #100	; 0x64
 8000be4:	f000 fb14 	bl	8001210 <Delay_ms>

	ERROR_LED_OFF();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bee:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f000 fb0d 	bl	8001210 <Delay_ms>
	I2C1_LED_OFF();
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000bf8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bfc:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f000 fb06 	bl	8001210 <Delay_ms>
	USART1_LED_OFF();
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000c06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c0a:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f000 faff 	bl	8001210 <Delay_ms>
	WIFI_LED_OFF();
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <LED_Indication_Test+0xd8>)
 8000c14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c18:	611a      	str	r2, [r3, #16]
	Delay_ms(100);
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f000 faf8 	bl	8001210 <Delay_ms>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40010800 	.word	0x40010800

08000c28 <Task1_MH_Z19_Polling>:

uint32_t Error_Timer_LED; //Таймер для ошибок

bool flag_programm_start = false;

void Task1_MH_Z19_Polling(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	CMSIS_USART_Transmit(USART1, USART1_tx_buffer, sizeof(USART1_tx_buffer), 100); //Отправим запрос датчику CO2
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2209      	movs	r2, #9
 8000c30:	4906      	ldr	r1, [pc, #24]	; (8000c4c <Task1_MH_Z19_Polling+0x24>)
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <Task1_MH_Z19_Polling+0x28>)
 8000c34:	f000 feb8 	bl	80019a8 <CMSIS_USART_Transmit>
	/*Мигнем светодиодом*/
	USART1_LED_ON();
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <Task1_MH_Z19_Polling+0x2c>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	611a      	str	r2, [r3, #16]
	Software_timer((uint32_t*) &USART1_Timer_LED, 100);
 8000c3e:	2164      	movs	r1, #100	; 0x64
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Task1_MH_Z19_Polling+0x30>)
 8000c42:	f7ff ff17 	bl	8000a74 <Software_timer>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	40013800 	.word	0x40013800
 8000c54:	40010800 	.word	0x40010800
 8000c58:	2000007c 	.word	0x2000007c

08000c5c <Task2_HDC1080_Polling>:

void Task2_HDC1080_Polling(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8
	//Команда опроса температуры и влажности
	I2C1_tx_buffer[0] = 0;
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <Task2_HDC1080_Polling+0x114>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	I2C1_tx_buffer[1] = 0;
 8000c68:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <Task2_HDC1080_Polling+0x114>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
	if (CMSIS_I2C_Data_Transmit(I2C1, HDC1080ADDR, I2C1_tx_buffer, 1, 100)) {
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <Task2_HDC1080_Polling+0x114>)
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	483e      	ldr	r0, [pc, #248]	; (8000d74 <Task2_HDC1080_Polling+0x118>)
 8000c7a:	f000 ffb9 	bl	8001bf0 <CMSIS_I2C_Data_Transmit>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <Task2_HDC1080_Polling+0x38>
		I2C1_LED_ON(); //Покажем активность шины I2C1
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <Task2_HDC1080_Polling+0x11c>)
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	611a      	str	r2, [r3, #16]
		Software_timer((uint32_t*) &I2C1_Timer_LED, 100);
 8000c8a:	2164      	movs	r1, #100	; 0x64
 8000c8c:	483b      	ldr	r0, [pc, #236]	; (8000d7c <Task2_HDC1080_Polling+0x120>)
 8000c8e:	f7ff fef1 	bl	8000a74 <Software_timer>
 8000c92:	e006      	b.n	8000ca2 <Task2_HDC1080_Polling+0x46>
	} else {
		ERROR_LED_ON();
 8000c94:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <Task2_HDC1080_Polling+0x11c>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	611a      	str	r2, [r3, #16]
		Software_timer((uint32_t*) &Error_Timer_LED, 100);
 8000c9a:	2164      	movs	r1, #100	; 0x64
 8000c9c:	4838      	ldr	r0, [pc, #224]	; (8000d80 <Task2_HDC1080_Polling+0x124>)
 8000c9e:	f7ff fee9 	bl	8000a74 <Software_timer>
	}
	Delay_ms(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 fab4 	bl	8001210 <Delay_ms>

	//Cчитаем данные
	if (CMSIS_I2C_Data_Receive(I2C1, HDC1080ADDR, I2C1_rx_buffer, 4, 100)) {
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2304      	movs	r3, #4
 8000cae:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <Task2_HDC1080_Polling+0x128>)
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <Task2_HDC1080_Polling+0x118>)
 8000cb4:	f001 f866 	bl	8001d84 <CMSIS_I2C_Data_Receive>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04d      	beq.n	8000d5a <Task2_HDC1080_Polling+0xfe>
		Temperature = (((float) ((uint16_t) I2C1_rx_buffer[0] << 8 | I2C1_rx_buffer[1]) * 165) / 65536) - 40;
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <Task2_HDC1080_Polling+0x128>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	4a2f      	ldr	r2, [pc, #188]	; (8000d84 <Task2_HDC1080_Polling+0x128>)
 8000cc6:	7852      	ldrb	r2, [r2, #1]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff faf8 	bl	80002c0 <__aeabi_i2f>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	492d      	ldr	r1, [pc, #180]	; (8000d88 <Task2_HDC1080_Polling+0x12c>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb47 	bl	8000368 <__aeabi_fmul>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbf5 	bl	80004d0 <__aeabi_fdiv>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4928      	ldr	r1, [pc, #160]	; (8000d8c <Task2_HDC1080_Polling+0x130>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa32 	bl	8000154 <__aeabi_fsub>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <Task2_HDC1080_Polling+0x134>)
 8000cf6:	601a      	str	r2, [r3, #0]
		Temperature = Temperature - 1;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <Task2_HDC1080_Polling+0x134>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa27 	bl	8000154 <__aeabi_fsub>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <Task2_HDC1080_Polling+0x134>)
 8000d0c:	601a      	str	r2, [r3, #0]
		Humidity = ((float) ((uint16_t) I2C1_rx_buffer[2] << 8 | I2C1_rx_buffer[3]) * 100) / 65536;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <Task2_HDC1080_Polling+0x128>)
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <Task2_HDC1080_Polling+0x128>)
 8000d16:	78d2      	ldrb	r2, [r2, #3]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fad0 	bl	80002c0 <__aeabi_i2f>
 8000d20:	4603      	mov	r3, r0
 8000d22:	491c      	ldr	r1, [pc, #112]	; (8000d94 <Task2_HDC1080_Polling+0x138>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fb1f 	bl	8000368 <__aeabi_fmul>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbcd 	bl	80004d0 <__aeabi_fdiv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <Task2_HDC1080_Polling+0x13c>)
 8000d3c:	601a      	str	r2, [r3, #0]
		Humidity = Humidity + 5;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <Task2_HDC1080_Polling+0x13c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4916      	ldr	r1, [pc, #88]	; (8000d9c <Task2_HDC1080_Polling+0x140>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa07 	bl	8000158 <__addsf3>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <Task2_HDC1080_Polling+0x13c>)
 8000d50:	601a      	str	r2, [r3, #0]
		HDC1080_data_ready = true;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <Task2_HDC1080_Polling+0x144>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
	} else {
		ERROR_LED_ON();
		Software_timer((uint32_t*) &Error_Timer_LED, 100);
	}
}
 8000d58:	e006      	b.n	8000d68 <Task2_HDC1080_Polling+0x10c>
		ERROR_LED_ON();
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <Task2_HDC1080_Polling+0x11c>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
		Software_timer((uint32_t*) &Error_Timer_LED, 100);
 8000d60:	2164      	movs	r1, #100	; 0x64
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <Task2_HDC1080_Polling+0x124>)
 8000d64:	f7ff fe86 	bl	8000a74 <Software_timer>
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000028 	.word	0x20000028
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	20000080 	.word	0x20000080
 8000d80:	20000070 	.word	0x20000070
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	43250000 	.word	0x43250000
 8000d8c:	42200000 	.word	0x42200000
 8000d90:	20000068 	.word	0x20000068
 8000d94:	42c80000 	.word	0x42c80000
 8000d98:	2000006c 	.word	0x2000006c
 8000d9c:	40a00000 	.word	0x40a00000
 8000da0:	20000038 	.word	0x20000038

08000da4 <Task3_MQTT_Send>:

void Task3_MQTT_Send(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	if (NETWORK_Status == MQTT_STATUS_CONNECTED) {
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <Task3_MQTT_Send+0x68>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d12b      	bne.n	8000e08 <Task3_MQTT_Send+0x64>
		if (MH19Z_data_ready) {
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <Task3_MQTT_Send+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00c      	beq.n	8000dd2 <Task3_MQTT_Send+0x2e>
			UART_MQTT_Send_data_uint16_t(MQTT_ID_CO2PPM, CO2_ppm, USART2_tx_buffer);
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <Task3_MQTT_Send+0x70>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <Task3_MQTT_Send+0x74>)
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f7ff fd81 	bl	80008c8 <UART_MQTT_Send_data_uint16_t>
			Delay_ms(5);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f000 fa22 	bl	8001210 <Delay_ms>
			MH19Z_data_ready = false;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <Task3_MQTT_Send+0x6c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]

		}
		if (HDC1080_data_ready) {
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <Task3_MQTT_Send+0x78>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d016      	beq.n	8000e08 <Task3_MQTT_Send+0x64>
			UART_MQTT_Send_data_float(MQTT_ID_TEMPERATURE, Temperature, USART2_tx_buffer);
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <Task3_MQTT_Send+0x7c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <Task3_MQTT_Send+0x74>)
 8000de0:	4619      	mov	r1, r3
 8000de2:	2002      	movs	r0, #2
 8000de4:	f7ff fdd8 	bl	8000998 <UART_MQTT_Send_data_float>
			Delay_ms(5);
 8000de8:	2005      	movs	r0, #5
 8000dea:	f000 fa11 	bl	8001210 <Delay_ms>
			UART_MQTT_Send_data_float(MQTT_ID_HUMIDITY, Humidity, USART2_tx_buffer);
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <Task3_MQTT_Send+0x80>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <Task3_MQTT_Send+0x74>)
 8000df4:	4619      	mov	r1, r3
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff fdce 	bl	8000998 <UART_MQTT_Send_data_float>
			Delay_ms(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f000 fa07 	bl	8001210 <Delay_ms>
			HDC1080_data_ready = false;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <Task3_MQTT_Send+0x78>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000036 	.word	0x20000036
 8000e10:	20000037 	.word	0x20000037
 8000e14:	20000088 	.word	0x20000088
 8000e18:	2000003c 	.word	0x2000003c
 8000e1c:	20000038 	.word	0x20000038
 8000e20:	20000068 	.word	0x20000068
 8000e24:	2000006c 	.word	0x2000006c

08000e28 <main>:

int main(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	CMSIS_Debug_init();
 8000e2c:	f000 f8f2 	bl	8001014 <CMSIS_Debug_init>
	CMSIS_RCC_SystemClock_72MHz();
 8000e30:	f000 f91e 	bl	8001070 <CMSIS_RCC_SystemClock_72MHz>
	CMSIS_SysTick_Timer_init();
 8000e34:	f000 f9b2 	bl	800119c <CMSIS_SysTick_Timer_init>
	CMSIS_TIM3_init(); //Таймер для индикации подключения к сети.
 8000e38:	f000 fbce 	bl	80015d8 <CMSIS_TIM3_init>
	GPIO_init(); //Настроим GPIO
 8000e3c:	f7ff fe3c 	bl	8000ab8 <GPIO_init>
	CMSIS_USART1_Init();
 8000e40:	f000 fc56 	bl	80016f0 <CMSIS_USART1_Init>
	CMSIS_USART2_Init();
 8000e44:	f000 fd02 	bl	800184c <CMSIS_USART2_Init>
	CMSIS_I2C1_Init();
 8000e48:	f000 fe04 	bl	8001a54 <CMSIS_I2C1_Init>
	HDC1080_init();
 8000e4c:	f7ff fbdc 	bl	8000608 <HDC1080_init>

	Software_timer((uint32_t*) &USART1_Polling_Timer, 5);
 8000e50:	2105      	movs	r1, #5
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <main+0xd8>)
 8000e54:	f7ff fe0e 	bl	8000a74 <Software_timer>
	Software_timer((uint32_t*) &I2C1_Polling_Timer, 5);
 8000e58:	2105      	movs	r1, #5
 8000e5a:	482a      	ldr	r0, [pc, #168]	; (8000f04 <main+0xdc>)
 8000e5c:	f7ff fe0a 	bl	8000a74 <Software_timer>
	Software_timer((uint32_t*) &MQTT_Send_Timer, 5);
 8000e60:	2105      	movs	r1, #5
 8000e62:	4829      	ldr	r0, [pc, #164]	; (8000f08 <main+0xe0>)
 8000e64:	f7ff fe06 	bl	8000a74 <Software_timer>
	flag_programm_start = true;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <main+0xe4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]

	while (1) {
		/*Опрос датчика MH-Z19*/
		if (Task1) {
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <main+0xe8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <main+0x62>
			Task1_MH_Z19_Polling();
 8000e76:	f7ff fed7 	bl	8000c28 <Task1_MH_Z19_Polling>
			Task1 = false;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <main+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			Software_timer((uint32_t*) &USART1_Polling_Timer, 5000);
 8000e80:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <main+0xd8>)
 8000e86:	f7ff fdf5 	bl	8000a74 <Software_timer>
		}

		/*Опрос датчика HDC1080*/
		if (Task2) {
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <main+0xec>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <main+0x7e>
			Task2_HDC1080_Polling();
 8000e92:	f7ff fee3 	bl	8000c5c <Task2_HDC1080_Polling>
			Task2 = false;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <main+0xec>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
			Software_timer(&I2C1_Polling_Timer, 5000);
 8000e9c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <main+0xdc>)
 8000ea2:	f7ff fde7 	bl	8000a74 <Software_timer>
		}

		/*Отправка данных по MQTT*/
		if (Task3) {
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <main+0xf0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d009      	beq.n	8000ec2 <main+0x9a>
			Task3_MQTT_Send();
 8000eae:	f7ff ff79 	bl	8000da4 <Task3_MQTT_Send>
			Task3 = false;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0xf0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
			Software_timer((uint32_t*) &MQTT_Send_Timer, 5000);
 8000eb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ebc:	4812      	ldr	r0, [pc, #72]	; (8000f08 <main+0xe0>)
 8000ebe:	f7ff fdd9 	bl	8000a74 <Software_timer>
		}

		/*Если в USART1 что-то есть - Обработаем данные*/
		if (USART1_Data_ready && husart1.rx_len > 0) {
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <main+0xf4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0d1      	beq.n	8000e6e <main+0x46>
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <main+0xf8>)
 8000ecc:	8adb      	ldrh	r3, [r3, #22]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0cc      	beq.n	8000e6e <main+0x46>
			if (CRC8_MH_Z19_Check()) {
 8000ed4:	f000 f82a 	bl	8000f2c <CRC8_MH_Z19_Check>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0c7      	beq.n	8000e6e <main+0x46>
				//Рассчитаем количество CO2 в ppm
				CO2_ppm = husart1.rx_buffer[2] * 256 + husart1.rx_buffer[3];
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <main+0xf8>)
 8000ee0:	789b      	ldrb	r3, [r3, #2]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <main+0xf8>)
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <main+0xfc>)
 8000ef4:	801a      	strh	r2, [r3, #0]
				MH19Z_data_ready = true;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <main+0x100>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
		if (Task1) {
 8000efc:	e7b7      	b.n	8000e6e <main+0x46>
 8000efe:	bf00      	nop
 8000f00:	20000084 	.word	0x20000084
 8000f04:	20000074 	.word	0x20000074
 8000f08:	20000078 	.word	0x20000078
 8000f0c:	20000054 	.word	0x20000054
 8000f10:	20000050 	.word	0x20000050
 8000f14:	20000052 	.word	0x20000052
 8000f18:	20000053 	.word	0x20000053
 8000f1c:	20000051 	.word	0x20000051
 8000f20:	200000a4 	.word	0x200000a4
 8000f24:	20000088 	.word	0x20000088
 8000f28:	20000037 	.word	0x20000037

08000f2c <CRC8_MH_Z19_Check>:
uint16_t CO2_ppm; //Уровень углекислого газа в ppm

extern struct USART_name husart1; //Объявляем структуру по USART.(см. stm32f103xx_CMSIS.h)

/*------------------------Проверка CRC-8 от MH-Z19B------------------------*/
bool CRC8_MH_Z19_Check(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	uint8_t CRC_MH_Z19;
	CRC_MH_Z19 = (~(husart1.rx_buffer[1] + husart1.rx_buffer[2] + husart1.rx_buffer[3] + husart1.rx_buffer[4] + husart1.rx_buffer[5] + husart1.rx_buffer[6] + husart1.rx_buffer[7])) + 1;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f34:	785a      	ldrb	r2, [r3, #1]
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f40:	78db      	ldrb	r3, [r3, #3]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	4413      	add	r3, r2
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f58:	799b      	ldrb	r3, [r3, #6]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f60:	79db      	ldrb	r3, [r3, #7]
 8000f62:	4413      	add	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	425b      	negs	r3, r3
 8000f68:	71fb      	strb	r3, [r7, #7]
	if (CRC_MH_Z19 == husart1.rx_buffer[8]) {
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <CRC8_MH_Z19_Check+0x58>)
 8000f6c:	7a1b      	ldrb	r3, [r3, #8]
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d101      	bne.n	8000f78 <CRC8_MH_Z19_Check+0x4c>
		return true;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <CRC8_MH_Z19_Check+0x4e>
	} else {
		return false;
 8000f78:	2300      	movs	r3, #0
	}
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	200000a4 	.word	0x200000a4

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <__NVIC_EnableIRQ+0x34>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <CMSIS_Debug_init>:
 *  Reference Manual/см. п.9.3.5 JTAG/SWD alternate function remapping (стр. 177)
 *  Наверное это нужно настраивать в самом начале, еще до тактирования...
 ***************************************************************************************
 */

void CMSIS_Debug_init(void) {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	 *  JTCK / SWCLK PA14
	 *  JTDI PA15
	 *  JTDO / TRACESWO PB3
	 *  NJTRST PB4
	 */
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включим тактирование порта A
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <CMSIS_Debug_init+0x50>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <CMSIS_Debug_init+0x50>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включим тактирование альтернативных функций
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <CMSIS_Debug_init+0x50>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <CMSIS_Debug_init+0x50>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
	 *  010: JTAG-DP Disabled and SW-DP Enabled               (Serial wire)
	 *  100: JTAG-DP Disabled and SW-DP Disabled              (No Debug)
	 *  Other combinations: no effect
	 */

	MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, 0b010 << AFIO_MAPR_SWJ_CFG_Pos); //Serial wire
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <CMSIS_Debug_init+0x54>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <CMSIS_Debug_init+0x54>)
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103e:	6053      	str	r3, [r2, #4]
	 *  PA13 /JTMS/SWDIO
	 *  PA14 /JTCK/SWCLK.
	 *  PA15, PB3 и PB4 свободны
	 */
	/*Заблокируем доступ для редактирования конфигурации PA13 и PA14*/
	GPIOA->LCKR = GPIO_LCKR_LCKK | GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <CMSIS_Debug_init+0x58>)
 8001042:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8001046:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR = GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <CMSIS_Debug_init+0x58>)
 800104a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800104e:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR = GPIO_LCKR_LCKK | GPIO_LCKR_LCK13 | GPIO_LCKR_LCK14;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <CMSIS_Debug_init+0x58>)
 8001052:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8001056:	619a      	str	r2, [r3, #24]
	GPIOA->LCKR;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <CMSIS_Debug_init+0x58>)
 800105a:	699b      	ldr	r3, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800

08001070 <CMSIS_RCC_SystemClock_72MHz>:
 *  В настройке также необходимо настроить FLASH на работу, совместимую с 72MHz:
 *  Reference Manual/см. п.3.2 Memory organization (стр. 49)
 ***************************************************************************************
 */

void CMSIS_RCC_SystemClock_72MHz(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	 *  as system clock or is selected to become the system clock.
	 *  0 : internal 8 MHz RC oscillator OFF
	 *  1 : internal 8 MHz RC oscillator ON
	 */

	SET_BIT(RCC->CR, RCC_CR_HSION); //Запустим внутренний RC генератор на 8 МГц
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]
	 *  cleared, HSIRDY goes low after 6 internal 8 MHz RC oscillator clock cycles.
	 *  0 : internal 8 MHz RC oscillator not ready
	 *  1 : internal 8 MHz RC oscillator ready
	 */

	while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0)
 8001080:	bf00      	nop
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f9      	beq.n	8001082 <CMSIS_RCC_SystemClock_72MHz+0x12>
	 *  can be written only if the HSE oscillator is disabled.
	 *  0: external 4-16 MHz oscillator not bypassed
	 *  1: external 4-16 MHz oscillator bypassed with external clock
	 */

	CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);//Просто сбросим этот бит в 0(Хотя изначально он и так должен быть в 0).
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a40      	ldr	r2, [pc, #256]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
	 *  bit cannot be reset if the HSE oscillator is used directly or indirectly as the system clock.
	 *  0: HSE oscillator OFF
	 *  1: HSE oscillator ON
	 */

	SET_BIT(RCC->CR, RCC_CR_HSEON); //Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 800109a:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
	 *  HSE oscillator clock to fall down after HSEON reset.
	 *  0: HSE oscillator not ready
	 *  1: HSE oscillator ready
	 */

	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0)
 80010a6:	bf00      	nop
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f9      	beq.n	80010a8 <CMSIS_RCC_SystemClock_72MHz+0x38>
	 *  hardware if a HSE clock failure is detected.
	 *  0: Clock detector OFF
	 *  1: Clock detector ON (Clock detector ON if the HSE oscillator is ready , OFF if not).
	 */

	SET_BIT(RCC->CR, RCC_CR_CSSON); //Включим CSS
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a36      	ldr	r2, [pc, #216]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010be:	6013      	str	r3, [r2, #0]
	 *  01: HSE selected as system clock
	 *  10: PLL selected as system clock
	 *  11: not allowed
	 */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSE);//Выберем HSE в качестве System Clock(PLL лучше пока не выбирать, он у нас отключен)
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f023 0303 	bic.w	r3, r3, #3
 80010c8:	4a32      	ldr	r2, [pc, #200]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6053      	str	r3, [r2, #4]
	 *  1110: SYSCLK divided by 256
	 *  1111: SYSCLK divided by 512
	 *  Note: The prefetch buffer must be kept on when using a prescaler different from 1 on the
	 *  AHB clock. Refer to Reading the Flash memory section for more details.
	 */
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1); //APB Prescaler /1
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010da:	6053      	str	r3, [r2, #4]
	 *  000 Zero wait state, if 0 < SYSCLK <= 24 MHz
	 *  001 One wait state, if 24 MHz < SYSCLK <= 48 MHz
	 *  010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
	 */

	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, 0b010 << FLASH_ACR_LATENCY_Pos);//010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 0307 	bic.w	r3, r3, #7
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6013      	str	r3, [r2, #0]
	 *  Bit 4 PRFTBE: Prefetch buffer enable
	 *  0: Prefetch is disabled
	 *  1: Prefetch is enabled
	 */

	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE);//Prefetch is enabled
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <CMSIS_RCC_SystemClock_72MHz+0x128>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6013      	str	r3, [r2, #0]
	 *  100: HCLK divided by 2
	 *  101: HCLK divided by 4
	 *  110: HCLK divided by 8
	 *  111: HCLK divided by 16
	 */
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_DIV2); //APB1 Prescaler /2, т.к. PCLK1 max 36MHz
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6053      	str	r3, [r2, #4]
	 *  101: HCLK divided by 4
	 *  110: HCLK divided by 8
	 *  111: HCLK divided by 16
	 */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_CFGR_PPRE2_DIV1); //APB2 Prescaler /1. Тут нас ничего не ограничивает. Будет 72MHz.
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800110e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001112:	6053      	str	r3, [r2, #4]
	 *  01: PCLK2 divided by 4
	 *  10: PCLK2 divided by 6
	 *  11: PCLK2 divided by 8
	 */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, RCC_CFGR_ADCPRE_DIV6); //ADC Prescaler /6, чтоб было 12MHz, т.к. максимальная частота тут 14 MHz
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800111e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001122:	6053      	str	r3, [r2, #4]
	 *  Set and cleared by software to select PLL clock source. This bit can be written only when PLL is disabled.
	 *  0: HSI oscillator clock / 2 selected as PLL input clock
	 *  1: HSE oscillator clock selected as PLL input clock
	 */

	SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC); //В качестве входного сигнала для PLL выберем HSE
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	6053      	str	r3, [r2, #4]
	 *  Set and cleared by software to divide HSE before PLL entry. This bit can be written only when PLL is disabled.
	 *  0: HSE clock not divided
	 *  1: HSE clock divided by 2
	 */

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE_HSE); //Никакое предделение перед PLL нам не нужно. Поэтому /1.
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	6053      	str	r3, [r2, #4]
	 *  1101: PLL input clock x 15
	 *  1110: PLL input clock x 16
	 *  1111: PLL input clock x 16
	 */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMULL, RCC_CFGR_PLLMULL9); //т.к. кварц у нас 8Mhz, а нам нужно 72MHz, то в PLL нужно сделать умножение на 9. 8MHz * 9 = 72MHz.
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001142:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001146:	6053      	str	r3, [r2, #4]
	 *  enabling the USB clock in the RCC_APB1ENR register. This bit can’t be reset if the USB clock is enabled.
	 *  0: PLL clock is divided by 1.5
	 *  1: PLL clock is not divided
	 */

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_USBPRE); //Для USB 72MHz/1.5 = 48MHz
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800114e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001152:	6053      	str	r3, [r2, #4]
	 *  111: PLL clock divided by 2 selected
	 *  Note: This clock output may have some truncated cycles at startup or during MCO clock source switching.
	 *  When the System Clock is selected to output to the MCO pin, make sure that this clock does not exceed 50 MHz (the maximum IO speed).
	 */

	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, RCC_CFGR_MCO_PLLCLK_DIV2); //В качестве тактирования для MCO выбрал PLL. Будет 36 MHz.
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800115a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800115e:	6053      	str	r3, [r2, #4]
	 *  PLL clock is used as system clock or is selected to become the system clock.
	 *  0: PLL OFF
	 *  1: PLL ON
	 */

	SET_BIT(RCC->CR, RCC_CR_PLLON);//Запустим PLL
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800116a:	6013      	str	r3, [r2, #0]

	//Т.к. PLL уже запущен, выберем его в качестве System Clock:
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);//Выберем PLL в качестве System Clock
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f023 0303 	bic.w	r3, r3, #3
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6053      	str	r3, [r2, #4]
	 *  Set by hardware to indicate that the PLL is locked.
	 *  0: PLL unlocked
	 *  1: PLL locked
	 */

	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0)
 800117c:	bf00      	nop
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <CMSIS_RCC_SystemClock_72MHz+0x124>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f9      	beq.n	800117e <CMSIS_RCC_SystemClock_72MHz+0x10e>

	//В итоге должно получится:
	//RCC->CR == 0x030B5A83
	//RCC->CFGR == 0x071D840A
	//К сожалению, нельзя просто так взять и сразу применить значения регистров и настроить все в 2 строчки кода, т.к. порядок выполнения команд играет очень большую роль.
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40022000 	.word	0x40022000

0800119c <CMSIS_SysTick_Timer_init>:
 *  На этом таймере мы настроим Delay и аналог HAL_GetTick()
 *  PM0056 STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual/
 *  см. п.4.5 SysTick timer (STK) (стр. 150)
 ***************************************************************************************
 */
void CMSIS_SysTick_Timer_init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	 *  value again, and begins counting.
	 *  0 : Counter disabled
	 *  1 : Counter enabled
	 */

	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
	 *  Bit 1 TICKINT: SysTick exception request enable
	 *  0: Counting down to zero does not assert the SysTick exception request
	 *  1: Counting down to zero to asserts the SysTick exception request.
	 *  Note: Software can use COUNTFLAG to determine if SysTick has ever counted to zero.
	 */
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a15      	ldr	r2, [pc, #84]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	6013      	str	r3, [r2, #0]
	 *  Bit 2 CLKSOURCE : Clock source selection
	 *  Selects the clock source.
	 *  0 : AHB / 8
	 *  1 : Processor clock(AHB)
	 */
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 72MHz
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6013      	str	r3, [r2, #0]
	 *  l To deliver a single SysTick interrupt after a delay of N processor clock cycles, use a
	 *  RELOAD of value N.For example, if a SysTick interrupt is required after 400 clock
	 *  pulses, set RELOAD to 400.
	 */

	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk, 71999 << SysTick_LOAD_RELOAD_Pos);//Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80011cc:	490e      	ldr	r1, [pc, #56]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <CMSIS_SysTick_Timer_init+0x70>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
	 *  Reads return the current value of the SysTick counter.
	 *  A write of any value clears the field to 0, and also clears the COUNTFLAG bit in the
	 *  STK_CTRL register to 0
	 */

	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk, 71999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 71999
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80011dc:	490a      	ldr	r1, [pc, #40]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <CMSIS_SysTick_Timer_init+0x70>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]

	/*Есть там еще регистр калибровки, но я его трогать не буду*/

	__NVIC_EnableIRQ(SysTick_IRQn);
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff fece 	bl	8000f88 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(SysTick_IRQn, 15);
 80011ec:	210f      	movs	r1, #15
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	f7ff fee5 	bl	8000fc0 <__NVIC_SetPriority>
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a03      	ldr	r2, [pc, #12]	; (8001208 <CMSIS_SysTick_Timer_init+0x6c>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010
 800120c:	0001193f 	.word	0x0001193f

08001210 <Delay_ms>:
 ******************************************************************************
 *  @breif Delay_ms
 *  @param   uint32_t Milliseconds - Длина задержки в миллисекундах
 ******************************************************************************
 */
void Delay_ms(uint32_t Milliseconds) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <Delay_ms+0x24>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
	while (Delay_counter_ms != 0)
 800121e:	bf00      	nop
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <Delay_ms+0x24>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1fb      	bne.n	8001220 <Delay_ms+0x10>
		;
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	2000005c 	.word	0x2000005c

08001238 <CMSIS_GPIO_MODE_Set>:
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_MODE13, 0b10 << GPIO_CRH_MODE13_Pos); //Настройка GPIOC порта 13 на выход со максимальной скоростью в 50 MHz
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13, 0b00 << GPIO_CRH_CNF13_Pos); //Настройка GPIOC порта 13 на выход в режиме Push-Pull
}

//Служебная функция
static void CMSIS_GPIO_MODE_Set(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Reg, uint8_t Data) {
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4603      	mov	r3, r0
 8001248:	70fb      	strb	r3, [r7, #3]
 800124a:	460b      	mov	r3, r1
 800124c:	70bb      	strb	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
	uint8_t Mode = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
	switch (Reg) {
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <CMSIS_GPIO_MODE_Set+0x2a>
 800125c:	2b01      	cmp	r3, #1
 800125e:	d013      	beq.n	8001288 <CMSIS_GPIO_MODE_Set+0x50>
		GPIO_Pin = GPIO_Pin - 8;
		Mode = GPIO_Pin * 4;
		MODIFY_REG(GPIO->CRH, (0x3UL << Mode), Data << Mode);
		break;
	}
}
 8001260:	e028      	b.n	80012b4 <CMSIS_GPIO_MODE_Set+0x7c>
		Mode = GPIO_Pin * 4;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	73fb      	strb	r3, [r7, #15]
		MODIFY_REG(GPIO->CRL, (0x3UL << Mode), Data << Mode);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2103      	movs	r1, #3
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	4013      	ands	r3, r2
 8001278:	7879      	ldrb	r1, [r7, #1]
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
		break;
 8001286:	e015      	b.n	80012b4 <CMSIS_GPIO_MODE_Set+0x7c>
		GPIO_Pin = GPIO_Pin - 8;
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	3b08      	subs	r3, #8
 800128c:	70fb      	strb	r3, [r7, #3]
		Mode = GPIO_Pin * 4;
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	73fb      	strb	r3, [r7, #15]
		MODIFY_REG(GPIO->CRH, (0x3UL << Mode), Data << Mode);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2103      	movs	r1, #3
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4013      	ands	r3, r2
 80012a4:	7879      	ldrb	r1, [r7, #1]
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
		break;
 80012b2:	bf00      	nop
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <CMSIS_GPIO_SPEED_Set>:

//Служебная функция
static void CMSIS_GPIO_SPEED_Set(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Speed) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
	uint8_t Reg = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	if (GPIO_Pin < 8) {
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	d802      	bhi.n	80012de <CMSIS_GPIO_SPEED_Set+0x20>
		Reg = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e001      	b.n	80012e2 <CMSIS_GPIO_SPEED_Set+0x24>
	} else {
		Reg = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
	}
	//MODE
	if (Speed == GPIO_SPEED_RESERVED) {
 80012e2:	78bb      	ldrb	r3, [r7, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <CMSIS_GPIO_SPEED_Set+0x38>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b00);
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	78f9      	ldrb	r1, [r7, #3]
 80012ec:	2300      	movs	r3, #0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <CMSIS_GPIO_MODE_Set>
	} else if (Speed == GPIO_SPEED_2_MHZ) {
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b10);
	} else if (Speed == GPIO_SPEED_50_MHZ) {
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b11);
	}
}
 80012f4:	e01c      	b.n	8001330 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_10_MHZ) {
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <CMSIS_GPIO_SPEED_Set+0x4c>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b01);
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	78f9      	ldrb	r1, [r7, #3]
 8001300:	2301      	movs	r3, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff98 	bl	8001238 <CMSIS_GPIO_MODE_Set>
}
 8001308:	e012      	b.n	8001330 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_2_MHZ) {
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d106      	bne.n	800131e <CMSIS_GPIO_SPEED_Set+0x60>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b10);
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	78f9      	ldrb	r1, [r7, #3]
 8001314:	2302      	movs	r3, #2
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff8e 	bl	8001238 <CMSIS_GPIO_MODE_Set>
}
 800131c:	e008      	b.n	8001330 <CMSIS_GPIO_SPEED_Set+0x72>
	} else if (Speed == GPIO_SPEED_50_MHZ) {
 800131e:	78bb      	ldrb	r3, [r7, #2]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d105      	bne.n	8001330 <CMSIS_GPIO_SPEED_Set+0x72>
		CMSIS_GPIO_MODE_Set(GPIO, GPIO_Pin, Reg, 0b11);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	78f9      	ldrb	r1, [r7, #3]
 8001328:	2303      	movs	r3, #3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff84 	bl	8001238 <CMSIS_GPIO_MODE_Set>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <CMSIS_GPIO_CNF_Set>:

//Служебная функция
static void CMSIS_GPIO_CNF_Set(GPIO_TypeDef *GPIO, uint8_t Reg, uint8_t Mode, uint8_t *CNF_Pos) {
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	72fb      	strb	r3, [r7, #11]
 8001346:	4613      	mov	r3, r2
 8001348:	72bb      	strb	r3, [r7, #10]
	switch (Reg) {
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <CMSIS_GPIO_CNF_Set+0x1e>
 8001350:	2b01      	cmp	r3, #1
 8001352:	d012      	beq.n	800137a <CMSIS_GPIO_CNF_Set+0x42>
		MODIFY_REG(GPIO->CRL, (0x3UL << *CNF_Pos), Mode << *CNF_Pos);
		break;
	case (1):
		MODIFY_REG(GPIO->CRH, (0x3UL << *CNF_Pos), Mode << *CNF_Pos);
	}
}
 8001354:	e021      	b.n	800139a <CMSIS_GPIO_CNF_Set+0x62>
		MODIFY_REG(GPIO->CRL, (0x3UL << *CNF_Pos), Mode << *CNF_Pos);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	2303      	movs	r3, #3
 8001362:	408b      	lsls	r3, r1
 8001364:	43db      	mvns	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	7aba      	ldrb	r2, [r7, #10]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	408a      	lsls	r2, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	601a      	str	r2, [r3, #0]
		break;
 8001376:	bf00      	nop
}
 8001378:	e00f      	b.n	800139a <CMSIS_GPIO_CNF_Set+0x62>
		MODIFY_REG(GPIO->CRH, (0x3UL << *CNF_Pos), Mode << *CNF_Pos);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	2303      	movs	r3, #3
 8001386:	408b      	lsls	r3, r1
 8001388:	43db      	mvns	r3, r3
 800138a:	4013      	ands	r3, r2
 800138c:	7aba      	ldrb	r2, [r7, #10]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	7809      	ldrb	r1, [r1, #0]
 8001392:	408a      	lsls	r2, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <CMSIS_GPIO_Reg_Set>:

//Служебная функция
static void CMSIS_GPIO_Reg_Set(GPIO_TypeDef *GPIO, uint8_t *GPIO_Pin, uint8_t Configuration_mode, uint8_t Type, uint8_t Reg, uint8_t *CNF_Pos) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	460b      	mov	r3, r1
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	4613      	mov	r3, r2
 80013b8:	71bb      	strb	r3, [r7, #6]
	switch (Configuration_mode) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d030      	beq.n	8001422 <CMSIS_GPIO_Reg_Set+0x7e>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dc6f      	bgt.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <CMSIS_GPIO_Reg_Set+0x2a>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d015      	beq.n	80013f8 <CMSIS_GPIO_Reg_Set+0x54>
			SET_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
			break;
		}
		break;
	}
}
 80013cc:	e06a      	b.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <CMSIS_GPIO_Reg_Set+0x36>
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d007      	beq.n	80013e8 <CMSIS_GPIO_Reg_Set+0x44>
		break;
 80013d8:	e064      	b.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b00, *(&CNF_Pos));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	7e39      	ldrb	r1, [r7, #24]
 80013de:	2200      	movs	r2, #0
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff ffa9 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 80013e6:	e006      	b.n	80013f6 <CMSIS_GPIO_Reg_Set+0x52>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b01, *(&CNF_Pos));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	7e39      	ldrb	r1, [r7, #24]
 80013ec:	2201      	movs	r2, #1
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ffa2 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 80013f4:	bf00      	nop
		break;
 80013f6:	e055      	b.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <CMSIS_GPIO_Reg_Set+0x60>
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d007      	beq.n	8001412 <CMSIS_GPIO_Reg_Set+0x6e>
		break;
 8001402:	e04f      	b.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	7e39      	ldrb	r1, [r7, #24]
 8001408:	2202      	movs	r2, #2
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff ff94 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 8001410:	e006      	b.n	8001420 <CMSIS_GPIO_Reg_Set+0x7c>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b11, *(&CNF_Pos));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	7e39      	ldrb	r1, [r7, #24]
 8001416:	2203      	movs	r2, #3
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff ff8d 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 800141e:	bf00      	nop
		break;
 8001420:	e040      	b.n	80014a4 <CMSIS_GPIO_Reg_Set+0x100>
		switch (Type) {
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	3b02      	subs	r3, #2
 8001426:	2b03      	cmp	r3, #3
 8001428:	d83b      	bhi.n	80014a2 <CMSIS_GPIO_Reg_Set+0xfe>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <CMSIS_GPIO_Reg_Set+0x8c>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	0800144f 	.word	0x0800144f
 8001438:	0800145d 	.word	0x0800145d
 800143c:	08001481 	.word	0x08001481
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b00, *(&CNF_Pos));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	7e39      	ldrb	r1, [r7, #24]
 8001444:	2200      	movs	r2, #0
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff76 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 800144c:	e029      	b.n	80014a2 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b01, *(&CNF_Pos));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	7e39      	ldrb	r1, [r7, #24]
 8001452:	2201      	movs	r2, #1
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff ff6f 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			break;
 800145a:	e022      	b.n	80014a2 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	7e39      	ldrb	r1, [r7, #24]
 8001460:	2202      	movs	r2, #2
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff68 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			CLEAR_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	2301      	movs	r3, #1
 8001474:	408b      	lsls	r3, r1
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	60da      	str	r2, [r3, #12]
			break;
 800147e:	e010      	b.n	80014a2 <CMSIS_GPIO_Reg_Set+0xfe>
			CMSIS_GPIO_CNF_Set(GPIO, Reg, 0b10, *(&CNF_Pos));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	7e39      	ldrb	r1, [r7, #24]
 8001484:	2202      	movs	r2, #2
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ff56 	bl	8001338 <CMSIS_GPIO_CNF_Set>
			SET_BIT(GPIO->ODR, (0x1UL << *GPIO_Pin));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	2301      	movs	r3, #1
 8001498:	408b      	lsls	r3, r1
 800149a:	431a      	orrs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	60da      	str	r2, [r3, #12]
			break;
 80014a0:	bf00      	nop
		break;
 80014a2:	bf00      	nop
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <CMSIS_GPIO_init>:
 *		           GPIO_SPEED_2_MHZ,
 *		           GPIO_SPEED_50_MHZ 
 ***************************************************************************************
 */

void CMSIS_GPIO_init(GPIO_TypeDef *GPIO, uint8_t GPIO_Pin, uint8_t Configuration_mode, uint8_t Type, uint8_t Speed) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	460b      	mov	r3, r1
 80014c0:	70bb      	strb	r3, [r7, #2]
 80014c2:	4613      	mov	r3, r2
 80014c4:	707b      	strb	r3, [r7, #1]
	uint8_t CNF_Pos = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	if (GPIO == GPIOA) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <CMSIS_GPIO_init+0xf8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d106      	bne.n	80014e0 <CMSIS_GPIO_init+0x34>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Запуск тактирования порта А
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	e02a      	b.n	8001536 <CMSIS_GPIO_init+0x8a>
	} else if (GPIO == GPIOB) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <CMSIS_GPIO_init+0x100>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d106      	bne.n	80014f6 <CMSIS_GPIO_init+0x4a>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a2e      	ldr	r2, [pc, #184]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	e01f      	b.n	8001536 <CMSIS_GPIO_init+0x8a>
	} else if (GPIO == GPIOC) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <CMSIS_GPIO_init+0x104>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d106      	bne.n	800150c <CMSIS_GPIO_init+0x60>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); //Запуск тактирования порта C
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	e014      	b.n	8001536 <CMSIS_GPIO_init+0x8a>
	} else if (GPIO == GPIOD) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <CMSIS_GPIO_init+0x108>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <CMSIS_GPIO_init+0x76>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPDEN); //Запуск тактирования порта D
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	e009      	b.n	8001536 <CMSIS_GPIO_init+0x8a>
	} else if (GPIO == GPIOE) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <CMSIS_GPIO_init+0x10c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d105      	bne.n	8001536 <CMSIS_GPIO_init+0x8a>
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPEEN); //Запуск тактирования порта E
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <CMSIS_GPIO_init+0xfc>)
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	6193      	str	r3, [r2, #24]
	}

	CMSIS_GPIO_SPEED_Set(GPIO, GPIO_Pin, Speed);
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	7e3a      	ldrb	r2, [r7, #24]
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff febe 	bl	80012be <CMSIS_GPIO_SPEED_Set>

	if (GPIO_Pin < 8) {
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b07      	cmp	r3, #7
 8001546:	d812      	bhi.n	800156e <CMSIS_GPIO_init+0xc2>
		CNF_Pos = (GPIO_Pin * 4) + 2;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3302      	adds	r3, #2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*) &GPIO_Pin, Configuration_mode, Type, 0, &CNF_Pos);
 8001554:	7878      	ldrb	r0, [r7, #1]
 8001556:	78ba      	ldrb	r2, [r7, #2]
 8001558:	1cf9      	adds	r1, r7, #3
 800155a:	f107 030f 	add.w	r3, r7, #15
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4603      	mov	r3, r0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff1c 	bl	80013a4 <CMSIS_GPIO_Reg_Set>
	} else {
		GPIO_Pin = GPIO_Pin - 8;
		CNF_Pos = (GPIO_Pin * 4) + 2;
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*) &GPIO_Pin, Configuration_mode, Type, 1, &CNF_Pos);
	}
}
 800156c:	e015      	b.n	800159a <CMSIS_GPIO_init+0xee>
		GPIO_Pin = GPIO_Pin - 8;
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	3b08      	subs	r3, #8
 8001572:	b2db      	uxtb	r3, r3
 8001574:	70fb      	strb	r3, [r7, #3]
		CNF_Pos = (GPIO_Pin * 4) + 2;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3302      	adds	r3, #2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
		CMSIS_GPIO_Reg_Set(GPIO, (uint8_t*) &GPIO_Pin, Configuration_mode, Type, 1, &CNF_Pos);
 8001582:	7878      	ldrb	r0, [r7, #1]
 8001584:	78ba      	ldrb	r2, [r7, #2]
 8001586:	1cf9      	adds	r1, r7, #3
 8001588:	f107 030f 	add.w	r3, r7, #15
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	2301      	movs	r3, #1
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff05 	bl	80013a4 <CMSIS_GPIO_Reg_Set>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010c00 	.word	0x40010c00
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40011400 	.word	0x40011400
 80015b8:	40011800 	.word	0x40011800

080015bc <EXTI0_IRQHandler>:
	 */

	NVIC_EnableIRQ(EXTI0_IRQn); //Включим прерывание по вектору EXTI0
}

__WEAK void EXTI0_IRQHandler(void) {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

	SET_BIT(EXTI->PR, EXTI_PR_PR0); //Выйдем из прерывания
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <EXTI0_IRQHandler+0x18>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <EXTI0_IRQHandler+0x18>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6153      	str	r3, [r2, #20]

}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <CMSIS_TIM3_init>:
 *  Так же в этом режиме бит направления DIR из регистра TIMx->CR1 не может меняться.
 *  Он обновляется аппаратно и выдает текущее направление счетчика.

 */

void CMSIS_TIM3_init(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	/*Включим тактирование таймера (страница 48)*/
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); //Запуск тактирования таймера 3
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <CMSIS_TIM3_init+0xac>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	4a28      	ldr	r2, [pc, #160]	; (8001684 <CMSIS_TIM3_init+0xac>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	61d3      	str	r3, [r2, #28]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <CMSIS_TIM3_init+0xac>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <CMSIS_TIM3_init+0xac>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]

	/*Настройка таймера 3 (Страница 404)*/
	//15.4.1 TIMx control register 1 (TIMx_CR1)
	//SET_BIT(TIM3->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM3->CR1, TIM_CR1_UDIS);//Генерировать событие Update
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 80015fa:	f023 0302 	bic.w	r3, r3, #2
 80015fe:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_URS); //Генерировать прерывание
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_OPM); //One pulse mode off(Счетчик не останавливается при обновлении)
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001612:	f023 0308 	bic.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(TIM3->CR1, TIM_CR1_DIR); //Считаем вверх
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800161e:	f023 0310 	bic.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
	MODIFY_REG(TIM3->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); //Выравнивание по краю
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a17      	ldr	r2, [pc, #92]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800162a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800162e:	6013      	str	r3, [r2, #0]
	SET_BIT(TIM3->CR1, TIM_CR1_ARPE); //Auto-reload preload enable
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(TIM3->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); //Предделение выключено
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001646:	6013      	str	r3, [r2, #0]

	/*Настройка прерываний (Страница 409)*/
	//15.4.4 TIMx DMA/Interrupt enable register (TIMx_DIER)
	SET_BIT(TIM3->DIER, TIM_DIER_UIE);//Update interrupt enable
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	60d3      	str	r3, [r2, #12]

	//15.4.5 TIMx status register (TIMx_SR) - Статусные регистры

	TIM3->PSC = 7200 - 1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001656:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 10000 - 1;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 800165e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

	__NVIC_EnableIRQ(TIM3_IRQn); //Разрешить прерывания по таймеру 3
 8001664:	201d      	movs	r0, #29
 8001666:	f7ff fc8f 	bl	8000f88 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(TIM3_IRQn, 3);
 800166a:	2103      	movs	r1, #3
 800166c:	201d      	movs	r0, #29
 800166e:	f7ff fca7 	bl	8000fc0 <__NVIC_SetPriority>
	SET_BIT(TIM3->CR1, TIM_CR1_CEN); //Запуск таймера
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <CMSIS_TIM3_init+0xb0>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40000400 	.word	0x40000400

0800168c <ADC1_2_IRQHandler>:
	//NVIC_EnableIRQ(ADC1_IRQn); //Разрешить прерывания по АЦП

	//SET_BIT(ADC1->CR2, ADC_CR2_SWSTART); //Начать преобразование. Не нужно запускать, если Continuous conversion mode(непрерывные преобразования) включен
}

__WEAK void ADC1_2_IRQHandler(void) {
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	/*This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
	 * cleared by software or by reading the ADC_DR.
	 * 0: Conversion is not complete
	 * 1: Conversion complete*/
	if (READ_BIT(ADC1->SR, ADC_SR_EOC)) {
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <ADC1_2_IRQHandler+0x1c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <ADC1_2_IRQHandler+0x14>
		ADC1->DR; //Читаем канал, чтоб сбросить флаг
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <ADC1_2_IRQHandler+0x1c>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}

}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40012400 	.word	0x40012400

080016ac <DMA1_Channel1_IRQHandler>:
__WEAK void DMA1_Channel1_IRQHandler(void) {
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	if (READ_BIT(DMA1->ISR, DMA_ISR_TCIF1)) {
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <DMA1_Channel1_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6053      	str	r3, [r2, #4]

	} else if (READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
		/*Здесь можно сделать какой-то обработчик ошибок*/
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
	}
}
 80016c8:	e00b      	b.n	80016e2 <DMA1_Channel1_IRQHandler+0x36>
	} else if (READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <DMA1_Channel1_IRQHandler+0x36>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1); //Сбросим глобальный флаг.
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <DMA1_Channel1_IRQHandler+0x40>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40020000 	.word	0x40020000

080016f0 <CMSIS_USART1_Init>:
 ******************************************************************************
 *  @breif Настройка USART1. Параметры 9600 8 N 1
 ******************************************************************************
 */

void CMSIS_USART1_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включение тактирование порта А
 80016f4:	4b52      	ldr	r3, [pc, #328]	; (8001840 <CMSIS_USART1_Init+0x150>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <CMSIS_USART1_Init+0x150>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включение альтернативных функций
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <CMSIS_USART1_Init+0x150>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <CMSIS_USART1_Init+0x150>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6193      	str	r3, [r2, #24]

	//Для конфигурирование ножек UART для Full Duplex нужно использовать Alternate function push-pull(См. п.п. 9.1.11 GPIO configurations for device peripherals стр.111 Reference Manual)
	//Tx - Alternative Function output Push-pull(Maximum output speed 50 MHz)
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9_Msk, 0b10 << GPIO_CRH_CNF9_Pos);
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <CMSIS_USART1_Init+0x154>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001714:	4a4b      	ldr	r2, [pc, #300]	; (8001844 <CMSIS_USART1_Init+0x154>)
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE9_Msk, 0b11 << GPIO_CRH_MODE9_Pos);
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <CMSIS_USART1_Init+0x154>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a48      	ldr	r2, [pc, #288]	; (8001844 <CMSIS_USART1_Init+0x154>)
 8001722:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001726:	6053      	str	r3, [r2, #4]
	//Rx - Input floating
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10_Msk, 0b1 << GPIO_CRH_CNF10_Pos);
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <CMSIS_USART1_Init+0x154>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <CMSIS_USART1_Init+0x154>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE10_Msk, 0b00 << GPIO_CRH_MODE10_Pos);
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <CMSIS_USART1_Init+0x154>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <CMSIS_USART1_Init+0x154>)
 800173e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001742:	6053      	str	r3, [r2, #4]

	//Запустим тактирование USART1
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 8001744:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <CMSIS_USART1_Init+0x150>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a3d      	ldr	r2, [pc, #244]	; (8001840 <CMSIS_USART1_Init+0x150>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6193      	str	r3, [r2, #24]

	 Тогда весь регистр USART->BRR для скорости 115200 будет выглядеть, как 0x271.

	 */

	MODIFY_REG(USART1->BRR, USART_BRR_DIV_Mantissa_Msk, 0x1D4 << USART_BRR_DIV_Mantissa_Pos);
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800175c:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800175e:	f443 53ea 	orr.w	r3, r3, #7488	; 0x1d40
 8001762:	6093      	str	r3, [r2, #8]
	MODIFY_REG(USART1->BRR, USART_BRR_DIV_Fraction_Msk, 0xC << USART_BRR_DIV_Fraction_Pos);
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	4a36      	ldr	r2, [pc, #216]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800176e:	f043 030c 	orr.w	r3, r3, #12
 8001772:	6093      	str	r3, [r2, #8]

	//27.6.4 Control register 1(USART_CR1)(см. стр 821 Reference Manual)
	SET_BIT(USART1->CR1, USART_CR1_UE);//USART enable
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800177a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800177e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_M); //Word lenght 1 Start bit, 8 Data bits, n Stop bit
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800178a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_WAKE); //Wake up idle Line
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001796:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_PCE); //Partity control disabled
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800179e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017a2:	60d3      	str	r3, [r2, #12]
	//настройка прерываний
	CLEAR_BIT(USART1->CR1, USART_CR1_PEIE);//partity error interrupt disabled
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ae:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE); //TXE interrupt is inhibited
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ba:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_TCIE); //Transmission complete interrupt disabled
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017c6:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE); //Прерывание по приему данных включено
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_IDLEIE); //Прерывание по флагу IDLE включено
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_TE); //Transmitter is enabled
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR1, USART_CR1_RE); //Receiver is enabled and begins searching for a start bit
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_RWU);
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <CMSIS_USART1_Init+0x158>)
 80017fe:	f023 0302 	bic.w	r3, r3, #2
 8001802:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_SBK);
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	60d3      	str	r3, [r2, #12]

	//Остальную настройку, не касающуюся стандартного USART, мы пока трогать не будем, но на всякий случай обнулим
	USART1->CR2 = 0;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(USART1->CR2, USART_CR2_STOP); //1 стоп бит.
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800181c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001820:	6113      	str	r3, [r2, #16]
	USART1->CR3 = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <CMSIS_USART1_Init+0x158>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
	USART1->GTPR = 0;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <CMSIS_USART1_Init+0x158>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]

	__NVIC_EnableIRQ(USART1_IRQn); //Включим прерывания по USART1
 800182e:	2025      	movs	r0, #37	; 0x25
 8001830:	f7ff fbaa 	bl	8000f88 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(USART1_IRQn, 1); //Зададим приоритет 1
 8001834:	2101      	movs	r1, #1
 8001836:	2025      	movs	r0, #37	; 0x25
 8001838:	f7ff fbc2 	bl	8000fc0 <__NVIC_SetPriority>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800
 8001848:	40013800 	.word	0x40013800

0800184c <CMSIS_USART2_Init>:
 ******************************************************************************
 *  @breif Настройка USART2. Параметры 9600 8 N 1
 ******************************************************************************
 */

void CMSIS_USART2_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Включение тактирование порта А
 8001850:	4b52      	ldr	r3, [pc, #328]	; (800199c <CMSIS_USART2_Init+0x150>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <CMSIS_USART2_Init+0x150>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Включение альтернативных функций
 800185c:	4b4f      	ldr	r3, [pc, #316]	; (800199c <CMSIS_USART2_Init+0x150>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a4e      	ldr	r2, [pc, #312]	; (800199c <CMSIS_USART2_Init+0x150>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]

	//Для конфигурирование ножек UART для Full Duplex нужно использовать Alternate function push-pull(См. п.п. 9.1.11 GPIO configurations for device peripherals стр.111 Reference Manual)
	//Tx - Alternative Function output Push-pull(Maximum output speed 50 MHz)
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF2_Msk, 0b10 << GPIO_CRL_CNF2_Pos);
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 8001872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001876:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE2_Msk, 0b11 << GPIO_CRL_MODE2_Pos);
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 800187e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001882:	6013      	str	r3, [r2, #0]
	//Rx - Input floating
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF3_Msk, 0b1 << GPIO_CRL_CNF3_Pos);
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800188c:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001892:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE3_Msk, 0b00 << GPIO_CRL_MODE3_Pos);
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a41      	ldr	r2, [pc, #260]	; (80019a0 <CMSIS_USART2_Init+0x154>)
 800189a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189e:	6013      	str	r3, [r2, #0]

	//Запустим тактирование USART2
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <CMSIS_USART2_Init+0x150>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a3d      	ldr	r2, [pc, #244]	; (800199c <CMSIS_USART2_Init+0x150>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	61d3      	str	r3, [r2, #28]

	 Тогда весь регистр USART->BRR для скорости 115200 будет выглядеть, как 0x138.

	 */

	MODIFY_REG(USART2->BRR, USART_BRR_DIV_Mantissa_Msk, 0xEA << USART_BRR_DIV_Mantissa_Pos);
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b8:	4a3a      	ldr	r2, [pc, #232]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018ba:	f443 636a 	orr.w	r3, r3, #3744	; 0xea0
 80018be:	6093      	str	r3, [r2, #8]
	MODIFY_REG(USART2->BRR, USART_BRR_DIV_Fraction_Msk, 0x6 << USART_BRR_DIV_Fraction_Pos);
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 030f 	bic.w	r3, r3, #15
 80018c8:	4a36      	ldr	r2, [pc, #216]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018ca:	f043 0306 	orr.w	r3, r3, #6
 80018ce:	6093      	str	r3, [r2, #8]

	//27.6.4 Control register 1(USART_CR1)(см. стр 821 Reference Manual)
	SET_BIT(USART2->CR1, USART_CR1_UE);//USART enable
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a33      	ldr	r2, [pc, #204]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018da:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_M); //Word lenght 1 Start bit, 8 Data bits, n Stop bit
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018e6:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_WAKE); //Wake up idle Line
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018f2:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_PCE); //Partity control disabled
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 80018fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fe:	60d3      	str	r3, [r2, #12]
	//настройка прерываний
	CLEAR_BIT(USART2->CR1, USART_CR1_PEIE);//partity error interrupt disabled
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800190a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE); //TXE interrupt is inhibited
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001916:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_TCIE); //Transmission complete interrupt disabled
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800191e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001922:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE); //Прерывание по приему данных включено
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_IDLEIE); //Прерывание по флагу IDLE включено
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001936:	f043 0310 	orr.w	r3, r3, #16
 800193a:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_TE); //Transmitter is enabled
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART2->CR1, USART_CR1_RE); //Receiver is enabled and begins searching for a start bit
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_RWU);
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800195a:	f023 0302 	bic.w	r3, r3, #2
 800195e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(USART2->CR1, USART_CR1_SBK);
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	60d3      	str	r3, [r2, #12]

	//Остальную настройку, не касающуюся стандартного USART, мы пока трогать не будем, но на всякий случай обнулим
	USART2->CR2 = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(USART2->CR2, USART_CR2_STOP); //1 стоп бит.
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800197c:	6113      	str	r3, [r2, #16]
	USART2->CR3 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
	USART2->GTPR = 0;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <CMSIS_USART2_Init+0x158>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]

	__NVIC_EnableIRQ(USART2_IRQn); //Включим прерывания по USART2
 800198a:	2026      	movs	r0, #38	; 0x26
 800198c:	f7ff fafc 	bl	8000f88 <__NVIC_EnableIRQ>
	__NVIC_SetPriority(USART2_IRQn, 1);
 8001990:	2101      	movs	r1, #1
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	f7ff fb14 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40004400 	.word	0x40004400

080019a8 <CMSIS_USART_Transmit>:
 *  @param  *data - данные, которые будем отправлять
 *  @param  Size - сколько байт требуется передать
 ******************************************************************************
 */

bool CMSIS_USART_Transmit(USART_TypeDef *USART, uint8_t *data, uint16_t Size, uint32_t Timeout_ms) {
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < Size; i++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	82fb      	strh	r3, [r7, #22]
 80019bc:	e019      	b.n	80019f2 <CMSIS_USART_Transmit+0x4a>
		Timeout_counter_ms = Timeout_ms;
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <CMSIS_USART_Transmit+0x60>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6013      	str	r3, [r2, #0]
		//Ждем, пока линия не освободится
		while (READ_BIT(USART->SR, USART_SR_TXE) == 0) {
 80019c4:	e005      	b.n	80019d2 <CMSIS_USART_Transmit+0x2a>
			if (!Timeout_counter_ms) {
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <CMSIS_USART_Transmit+0x60>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <CMSIS_USART_Transmit+0x2a>
				return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e014      	b.n	80019fc <CMSIS_USART_Transmit+0x54>
		while (READ_BIT(USART->SR, USART_SR_TXE) == 0) {
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f3      	beq.n	80019c6 <CMSIS_USART_Transmit+0x1e>
			}
		}
		USART->DR = *data++; //Кидаем данные  
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
	for (uint16_t i = 0; i < Size; i++) {
 80019ec:	8afb      	ldrh	r3, [r7, #22]
 80019ee:	3301      	adds	r3, #1
 80019f0:	82fb      	strh	r3, [r7, #22]
 80019f2:	8afa      	ldrh	r2, [r7, #22]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e1      	bcc.n	80019be <CMSIS_USART_Transmit+0x16>
	}
	return true;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000060 	.word	0x20000060

08001a0c <CMSIS_I2C_Reset>:
 * За 8 тактами передачи байта следует 9-й тактовый импульс, в течение которого приемник должен передать передатчику бит подтверждения
 */

/*Регистры(См. ReferenceManual стр. 772)*/

void CMSIS_I2C_Reset(void) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	//Сброс настроек I2C
	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	SET_BIT(I2C1->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1a:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C1->CR1, I2C_CR1_SWRST) == 0)
 8001a1c:	bf00      	nop
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f9      	beq.n	8001a1e <CMSIS_I2C_Reset+0x12>
		;
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a34:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C1->CR1, I2C_CR1_SWRST))
 8001a36:	bf00      	nop
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <CMSIS_I2C_Reset+0x44>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <CMSIS_I2C_Reset+0x2c>
		;
	/* Примечание: Этот бит можно использовать для повторной инициализации
	 * периферийного устройства после ошибки или заблокированного состояния.
	 * Например, если бит BUSY установлен и остается заблокированным из-за сбоя на шине,
	 * бит SWRST можно использовать для выхода из этого состояния.*/
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40005400 	.word	0x40005400

08001a54 <CMSIS_I2C1_Init>:
 *************************************************************************************
 *  @breif Функция инициализации шины I2C1. Sm.
 *************************************************************************************
 */

void CMSIS_I2C1_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	//Настройки тактирования
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирование порта B
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a61      	ldr	r2, [pc, #388]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 8001a64:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); //Запуск тактирования I2C1
 8001a70:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a5b      	ldr	r2, [pc, #364]	; (8001be4 <CMSIS_I2C1_Init+0x190>)
 8001a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7a:	61d3      	str	r3, [r2, #28]

	//Настройки ножек SDA и SCL
	//PB7 SDA (I2C Data I/O) Alternate function open drain
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF7_Msk, 0b11 << GPIO_CRL_CNF7_Pos);//Alternate function open drain
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a86:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE7_Msk, 0b11 << GPIO_CRL_MODE7_Pos); //Maximum output speed 50 MHz
 8001a88:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a56      	ldr	r2, [pc, #344]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a8e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001a92:	6013      	str	r3, [r2, #0]
	//PB6 SCL (I2C clock) Alternate function open drain
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF6_Msk, 0b11 << GPIO_CRL_CNF6_Pos);//Alternate function open drain
 8001a94:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001a9a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8001a9e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE6_Msk, 0b11 << GPIO_CRL_MODE6_Pos); //Maximum output speed 50 MHz
 8001aa0:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	; (8001be8 <CMSIS_I2C1_Init+0x194>)
 8001aa6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001aaa:	6013      	str	r3, [r2, #0]

	//26.6 I2C registers( См. Reference Manual стр. 772)

	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	CMSIS_I2C_Reset();
 8001aac:	f7ff ffae 	bl	8001a0c <CMSIS_I2C_Reset>

	/*Это все для инита не нужно. После сброса итак будет в 0. */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ALERT); //Releases SMBA pin high.Alert Response Address Header followed by NACK
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aba:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PEC); //No PEC transfer
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac6:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_POS); //ACK bit controls the (N)ACK of the current byte being received in the shift register
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a47      	ldr	r2, [pc, #284]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ad2:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK); //No acknowledge returned
 8001ad4:	4b45      	ldr	r3, [pc, #276]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a44      	ldr	r2, [pc, #272]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_STOP); //No Stop generation
 8001ae0:	4b42      	ldr	r3, [pc, #264]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a41      	ldr	r2, [pc, #260]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aea:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_START); //No Start generation
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3e      	ldr	r2, [pc, #248]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_NOSTRETCH); //Clock stretching enabled
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b02:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENGC); //General call disabled. Address 00h is NACKed.
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a38      	ldr	r2, [pc, #224]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b0e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENPEC); //PEC calculation disabled
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a35      	ldr	r2, [pc, #212]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b16:	f023 0320 	bic.w	r3, r3, #32
 8001b1a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_ENARP); //ARP disable
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a32      	ldr	r2, [pc, #200]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b22:	f023 0310 	bic.w	r3, r3, #16
 8001b26:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SMBTYPE); //SMBus Device
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b2e:	f023 0308 	bic.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(I2C1->CR1, I2C_CR1_SMBUS); //I2C mode
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b3a:	f023 0302 	bic.w	r3, r3, #2
 8001b3e:	6013      	str	r3, [r2, #0]

	//п.п. 26.6.2 I2C Control register 2(I2C_CR2)(стр.774)
	CLEAR_BIT(I2C1->CR2, I2C_CR2_LAST);//Next DMA EOT is not the last transfer
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b4a:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_DMAEN); //DMA requests disabled
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b56:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITBUFEN); //TxE = 1 or RxNE = 1 does not generate any interrupt.
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b62:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITEVTEN); //Event interrupt disabled
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a20      	ldr	r2, [pc, #128]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b6e:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ITERREN); //Error interrupt disabled
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b7a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(I2C1->CR2, I2C_CR2_FREQ_Msk, 36 << I2C_CR2_FREQ_Pos); //f PCLK1 = 36 Мгц
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b86:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8001b8a:	6053      	str	r3, [r2, #4]

	//п.п. 26.6.3 I2C Own address register 1(I2C_OAR1)(стр.776)
	I2C1->OAR1 = 0;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	//п.п. 26.6.4 I2C Own address register 1(I2C_OAR2)(стр.776)
	I2C1->OAR2 = 0;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]

	//п.п. 26.6.8 I2C Clock control register (I2C_CCR)(стр.781)
	CLEAR_BIT(I2C1->CCR, I2C_CCR_FS);//Standard mode I2C
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ba2:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C1->CCR, I2C_CCR_FS); //Fast mode I2C

	CLEAR_BIT(I2C1->CCR, I2C_CCR_DUTY);//Fm mode tlow/thigh = 2
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a10      	ldr	r2, [pc, #64]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bae:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C1->CCR, I2C_CCR_DUTY); //Fm mode tlow/thigh = 16/9 (see CCR)

	//Расчет CCR. Смотри примеры расчета
	//MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 180 << I2C_CCR_CCR_Pos); //для Sm mode
	MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 30 << I2C_CCR_CCR_Pos);//для Fm mode. DUTY 0.
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bb8:	f023 030f 	bic.w	r3, r3, #15
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bbe:	f043 031e 	orr.w	r3, r3, #30
 8001bc2:	61d3      	str	r3, [r2, #28]
	//MODIFY_REG(I2C1->CCR, I2C_CCR_CCR_Msk, 4 << I2C_CCR_CCR_Pos); //для Fm mode. DUTY 1.

	//п.п. 26.6.9 I2C TRISE register (I2C_TRISE)(стр. 782)
	MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 37 << I2C_TRISE_TRISE_Pos);//для Sm mode
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bce:	f043 0325 	orr.w	r3, r3, #37	; 0x25
 8001bd2:	6213      	str	r3, [r2, #32]
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 12 << I2C_TRISE_TRISE_Pos); //для Fm mode

	SET_BIT(I2C1->CR1, I2C_CR1_PE); //I2C1 enable
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <CMSIS_I2C1_Init+0x198>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	40005400 	.word	0x40005400

08001bf0 <CMSIS_I2C_Data_Transmit>:
 *  @param  *data - Данные, которые будем отправлять
 *  @param  Size_data - Размер, сколько байт будем отправлять.
 *  @retval  Возвращает статус отправки данных. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
bool CMSIS_I2C_Data_Transmit(I2C_TypeDef *I2C, uint8_t Adress_Device, uint8_t *data, uint16_t Size_data, uint32_t Timeout_ms) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	72fb      	strb	r3, [r7, #11]
 8001c00:	4613      	mov	r3, r2
 8001c02:	813b      	strh	r3, [r7, #8]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02d      	beq.n	8001c6c <CMSIS_I2C_Data_Transmit+0x7c>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR6)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR7))) {
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <CMSIS_I2C_Data_Transmit+0x18c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <CMSIS_I2C_Data_Transmit+0x40>
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <CMSIS_I2C_Data_Transmit+0x18c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <CMSIS_I2C_Data_Transmit+0x40>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8001c28:	f7ff fef0 	bl	8001a0c <CMSIS_I2C_Reset>
			CMSIS_I2C1_Init(); //повторная инициализация
 8001c2c:	f7ff ff12 	bl	8001a54 <CMSIS_I2C1_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <CMSIS_I2C_Data_Transmit+0x58>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d00b      	beq.n	8001c68 <CMSIS_I2C_Data_Transmit+0x78>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0201 	bic.w	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]
		}

		return false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e083      	b.n	8001d74 <CMSIS_I2C_Data_Transmit+0x184>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8001c84:	4a3e      	ldr	r2, [pc, #248]	; (8001d80 <CMSIS_I2C_Data_Transmit+0x190>)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001c8a:	e005      	b.n	8001c98 <CMSIS_I2C_Data_Transmit+0xa8>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <CMSIS_I2C_Data_Transmit+0x190>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <CMSIS_I2C_Data_Transmit+0xa8>
			return false;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e06d      	b.n	8001d74 <CMSIS_I2C_Data_Transmit+0x184>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f3      	beq.n	8001c8c <CMSIS_I2C_Data_Transmit+0x9c>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + Write
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	461a      	mov	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <CMSIS_I2C_Data_Transmit+0x190>)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001cb8:	e005      	b.n	8001cc6 <CMSIS_I2C_Data_Transmit+0xd6>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <CMSIS_I2C_Data_Transmit+0x190>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <CMSIS_I2C_Data_Transmit+0xd6>
			return false;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e056      	b.n	8001d74 <CMSIS_I2C_Data_Transmit+0x184>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <CMSIS_I2C_Data_Transmit+0xee>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ed      	beq.n	8001cba <CMSIS_I2C_Data_Transmit+0xca>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d037      	beq.n	8001d5a <CMSIS_I2C_Data_Transmit+0x16a>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	699b      	ldr	r3, [r3, #24]

		/*Отправим данные*/
		for (uint16_t i = 0; i < Size_data; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	82fb      	strh	r3, [r7, #22]
 8001cf6:	e024      	b.n	8001d42 <CMSIS_I2C_Data_Transmit+0x152>
			I2C->DR = *(data + i); //Запись байта
 8001cf8:	8afb      	ldrh	r3, [r7, #22]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001d06:	e013      	b.n	8001d30 <CMSIS_I2C_Data_Transmit+0x140>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10d      	bne.n	8001d30 <CMSIS_I2C_Data_Transmit+0x140>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	615a      	str	r2, [r3, #20]
					return false;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e021      	b.n	8001d74 <CMSIS_I2C_Data_Transmit+0x184>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0e5      	beq.n	8001d08 <CMSIS_I2C_Data_Transmit+0x118>
		for (uint16_t i = 0; i < Size_data; i++) {
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	82fb      	strh	r3, [r7, #22]
 8001d42:	8afa      	ldrh	r2, [r7, #22]
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3d6      	bcc.n	8001cf8 <CMSIS_I2C_Data_Transmit+0x108>
				}
			}
		}

		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]

		return true;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00c      	b.n	8001d74 <CMSIS_I2C_Data_Transmit+0x184>

	} else {
		//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	615a      	str	r2, [r3, #20]

		return false;
 8001d72:	2300      	movs	r3, #0
	}
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010c00 	.word	0x40010c00
 8001d80:	20000060 	.word	0x20000060

08001d84 <CMSIS_I2C_Data_Receive>:
 *  @param  *data - Куда будем записывать принятые данные
 *  @param  Size_data - Размер, сколько байт будем принимать.
 *  @retval  Возвращает статус приема данных. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
bool CMSIS_I2C_Data_Receive(I2C_TypeDef *I2C, uint8_t Adress_Device, uint8_t *data, uint16_t Size_data, uint32_t Timeout_ms) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	460b      	mov	r3, r1
 8001d92:	72fb      	strb	r3, [r7, #11]
 8001d94:	4613      	mov	r3, r2
 8001d96:	813b      	strh	r3, [r7, #8]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02d      	beq.n	8001e00 <CMSIS_I2C_Data_Receive+0x7c>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR6)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR7))) {
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <CMSIS_I2C_Data_Receive+0x1cc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <CMSIS_I2C_Data_Receive+0x40>
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <CMSIS_I2C_Data_Receive+0x1cc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <CMSIS_I2C_Data_Receive+0x40>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8001dbc:	f7ff fe26 	bl	8001a0c <CMSIS_I2C_Reset>
			CMSIS_I2C1_Init(); //повторная инициализация
 8001dc0:	f7ff fe48 	bl	8001a54 <CMSIS_I2C1_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <CMSIS_I2C_Data_Receive+0x58>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00b      	beq.n	8001dfc <CMSIS_I2C_Data_Receive+0x78>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0201 	bic.w	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]
		}

		return false;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e0a3      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8001e18:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001e1e:	e005      	b.n	8001e2c <CMSIS_I2C_Data_Receive+0xa8>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <CMSIS_I2C_Data_Receive+0xa8>
			return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e08d      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f3      	beq.n	8001e20 <CMSIS_I2C_Data_Receive+0x9c>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1 | 1); //Адрес + команда Read
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	461a      	mov	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8001e4a:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001e50:	e005      	b.n	8001e5e <CMSIS_I2C_Data_Receive+0xda>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <CMSIS_I2C_Data_Receive+0xda>
			return false;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e074      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <CMSIS_I2C_Data_Receive+0xf2>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ed      	beq.n	8001e52 <CMSIS_I2C_Data_Receive+0xce>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d055      	beq.n	8001f2e <CMSIS_I2C_Data_Receive+0x1aa>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	699b      	ldr	r3, [r3, #24]

		/*Прочтем данные*/
		for (uint16_t i = 0; i < Size_data; i++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	82fb      	strh	r3, [r7, #22]
 8001e8e:	e048      	b.n	8001f22 <CMSIS_I2C_Data_Receive+0x19e>
			if (i < Size_data - 1) {
 8001e90:	8afa      	ldrh	r2, [r7, #22]
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	429a      	cmp	r2, r3
 8001e98:	da1d      	bge.n	8001ed6 <CMSIS_I2C_Data_Receive+0x152>
				SET_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы хотим принять следующий байт, то отправляем ACK
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]

				Timeout_counter_ms = Timeout_ms;
 8001ea6:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	6013      	str	r3, [r2, #0]
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001eac:	e005      	b.n	8001eba <CMSIS_I2C_Data_Receive+0x136>
					//Ожидаем, пока в сдвиговом регистре появятся данные
					if (!Timeout_counter_ms) {
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <CMSIS_I2C_Data_Receive+0x136>
						return false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e046      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f3      	beq.n	8001eae <CMSIS_I2C_Data_Receive+0x12a>
					}
				}

				*(data + i) = I2C->DR; //Чтение байта
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	8afb      	ldrh	r3, [r7, #22]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2ca      	uxtb	r2, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	e022      	b.n	8001f1c <CMSIS_I2C_Data_Receive+0x198>
			} else {
				CLEAR_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы знаем, что следующий принятый байт будет последним, то отправим NACK
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

				SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]
				Timeout_counter_ms = Timeout_ms;
 8001eee:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	6013      	str	r3, [r2, #0]
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001ef4:	e005      	b.n	8001f02 <CMSIS_I2C_Data_Receive+0x17e>
					//Ожидаем, пока в сдвиговом регистре появятся данные
					if (!Timeout_counter_ms) {
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <CMSIS_I2C_Data_Receive+0x1d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <CMSIS_I2C_Data_Receive+0x17e>
						return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e022      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>
				while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) {
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f3      	beq.n	8001ef6 <CMSIS_I2C_Data_Receive+0x172>
					}
				}
				*(data + i) = I2C->DR; //Чтение байта
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6919      	ldr	r1, [r3, #16]
 8001f12:	8afb      	ldrh	r3, [r7, #22]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < Size_data; i++) {
 8001f1c:	8afb      	ldrh	r3, [r7, #22]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	82fb      	strh	r3, [r7, #22]
 8001f22:	8afa      	ldrh	r2, [r7, #22]
 8001f24:	893b      	ldrh	r3, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3b2      	bcc.n	8001e90 <CMSIS_I2C_Data_Receive+0x10c>
			}
		}
		return true;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00c      	b.n	8001f48 <CMSIS_I2C_Data_Receive+0x1c4>

	} else {
		//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF 
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	615a      	str	r2, [r3, #20]
		return false;
 8001f46:	2300      	movs	r3, #0
	}

}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010c00 	.word	0x40010c00
 8001f54:	20000060 	.word	0x20000060

08001f58 <USART1_IRQHandler>:
extern volatile uint32_t SysTimer_ms; //Переменная, аналогичная HAL_GetTick()
extern volatile uint32_t Delay_counter_ms; //Счетчик для функции Delay_ms
extern volatile uint32_t Timeout_counter_ms; //Переменная для таймаута функций
extern bool USART1_Data_ready;

void USART1_IRQHandler(void) {
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	if (READ_BIT(USART1->SR, USART_SR_RXNE)) {
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <USART1_IRQHandler+0x78>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01a      	beq.n	8001f9e <USART1_IRQHandler+0x46>
		//Если пришли данные по USART
		if (husart1.rx_counter < USART_MAX_LEN_RX_BUFFER) { //Если байт прилетело меньше, чем размер буфера
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f6a:	8a9b      	ldrh	r3, [r3, #20]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b13      	cmp	r3, #19
 8001f70:	d810      	bhi.n	8001f94 <USART1_IRQHandler+0x3c>
			husart1.rx_buffer[husart1.rx_counter] = USART1->DR; //Считаем данные в соответствующую ячейку в rx_buffer
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <USART1_IRQHandler+0x78>)
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f78:	8a9b      	ldrh	r3, [r3, #20]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	b2c9      	uxtb	r1, r1
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f82:	5499      	strb	r1, [r3, r2]
			husart1.rx_counter++; //Увеличим счетчик принятых байт на 1
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f86:	8a9b      	ldrh	r3, [r3, #20]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f90:	829a      	strh	r2, [r3, #20]
 8001f92:	e004      	b.n	8001f9e <USART1_IRQHandler+0x46>
		} else {
			husart1.rx_counter = 0; //Если больше - сбросим счетчик.
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	751a      	strb	r2, [r3, #20]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	755a      	strb	r2, [r3, #21]
		}
	}
	if (READ_BIT(USART1->SR, USART_SR_IDLE)) {
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <USART1_IRQHandler+0x78>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <USART1_IRQHandler+0x70>
		//Если прилетел флаг IDLE
		USART1->DR; //Сбросим флаг IDLE
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <USART1_IRQHandler+0x78>)
 8001fac:	685b      	ldr	r3, [r3, #4]
		husart1.rx_len = husart1.rx_counter; //Узнаем, сколько байт получили
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001fb0:	8a9b      	ldrh	r3, [r3, #20]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001fb6:	82da      	strh	r2, [r3, #22]
		husart1.rx_counter = 0; //сбросим счетчик приходящих данных
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <USART1_IRQHandler+0x7c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	751a      	strb	r2, [r3, #20]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	755a      	strb	r2, [r3, #21]
		USART1_Data_ready = true; //Сообщим о том, что получили данные
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <USART1_IRQHandler+0x80>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]

	}
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	200000a4 	.word	0x200000a4
 8001fd8:	20000051 	.word	0x20000051

08001fdc <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	if (READ_BIT(USART2->SR, USART_SR_RXNE)) {
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <USART2_IRQHandler+0x74>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01a      	beq.n	8002022 <USART2_IRQHandler+0x46>
		//Если пришли данные по USART
		if (husart2.rx_counter < USART_MAX_LEN_RX_BUFFER) { //Если байт прилетело меньше, чем размер буфера
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <USART2_IRQHandler+0x78>)
 8001fee:	8a9b      	ldrh	r3, [r3, #20]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b13      	cmp	r3, #19
 8001ff4:	d810      	bhi.n	8002018 <USART2_IRQHandler+0x3c>
			husart2.rx_buffer[husart2.rx_counter] = USART2->DR; //Считаем данные в соответствующую ячейку в rx_buffer
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <USART2_IRQHandler+0x74>)
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <USART2_IRQHandler+0x78>)
 8001ffc:	8a9b      	ldrh	r3, [r3, #20]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	b2c9      	uxtb	r1, r1
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <USART2_IRQHandler+0x78>)
 8002006:	5499      	strb	r1, [r3, r2]
			husart2.rx_counter++; //Увеличим счетчик принятых байт на 1
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <USART2_IRQHandler+0x78>)
 800200a:	8a9b      	ldrh	r3, [r3, #20]
 800200c:	b29b      	uxth	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <USART2_IRQHandler+0x78>)
 8002014:	829a      	strh	r2, [r3, #20]
 8002016:	e004      	b.n	8002022 <USART2_IRQHandler+0x46>
		} else {
			husart2.rx_counter = 0; //Если больше - сбросим счетчик
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <USART2_IRQHandler+0x78>)
 800201a:	2200      	movs	r2, #0
 800201c:	751a      	strb	r2, [r3, #20]
 800201e:	2200      	movs	r2, #0
 8002020:	755a      	strb	r2, [r3, #21]
		}
	}
	if (READ_BIT(USART2->SR, USART_SR_IDLE)) {
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <USART2_IRQHandler+0x74>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <USART2_IRQHandler+0x6e>
		//Если прилетел флаг IDLE
		USART2->DR; //Сбросим флаг IDLE
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <USART2_IRQHandler+0x74>)
 8002030:	685b      	ldr	r3, [r3, #4]
		husart2.rx_len = husart2.rx_counter; //Узнаем, сколько байт получили
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <USART2_IRQHandler+0x78>)
 8002034:	8a9b      	ldrh	r3, [r3, #20]
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <USART2_IRQHandler+0x78>)
 800203a:	82da      	strh	r2, [r3, #22]
		husart2.rx_counter = 0; //сбросим счетчик приходящих данных
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <USART2_IRQHandler+0x78>)
 800203e:	2200      	movs	r2, #0
 8002040:	751a      	strb	r2, [r3, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	755a      	strb	r2, [r3, #21]

		/*----------Тут будем работать с приходящими данными----------*/
		UART_MQTT_Check_net(); //Проверка подключения к Wifi и MQTT брокеру
 8002046:	f7fe fb35 	bl	80006b4 <UART_MQTT_Check_net>
		/*----------Тут будем работать с приходящими данными----------*/
	}
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40004400 	.word	0x40004400
 8002054:	2000008c 	.word	0x2000008c

08002058 <SysTick_Handler>:
extern bool Task3;
extern uint32_t MQTT_Send_Timer; //Таймер для отправки MQTT

uint32_t Error_Timer_LED; //Таймер для ошибок

void SysTick_Handler(void) {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

	SysTimer_ms++;
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <SysTick_Handler+0xd4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <SysTick_Handler+0xd4>)
 8002064:	6013      	str	r3, [r2, #0]

	if (Delay_counter_ms) {
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <SysTick_Handler+0xd8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <SysTick_Handler+0x20>
		Delay_counter_ms--;
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <SysTick_Handler+0xd8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <SysTick_Handler+0xd8>)
 8002076:	6013      	str	r3, [r2, #0]
	}
	if (Timeout_counter_ms) {
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <SysTick_Handler+0xdc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <SysTick_Handler+0x32>
		Timeout_counter_ms--;
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <SysTick_Handler+0xdc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <SysTick_Handler+0xdc>)
 8002088:	6013      	str	r3, [r2, #0]
	}

	if (flag_programm_start) {
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <SysTick_Handler+0xe0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d04a      	beq.n	8002128 <SysTick_Handler+0xd0>

		if (!Software_timer_check((uint32_t*) &USART1_Timer_LED)) {
 8002092:	482a      	ldr	r0, [pc, #168]	; (800213c <SysTick_Handler+0xe4>)
 8002094:	f7fe fcfb 	bl	8000a8e <Software_timer_check>
 8002098:	4603      	mov	r3, r0
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <SysTick_Handler+0x54>
			USART1_LED_OFF();
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <SysTick_Handler+0xe8>)
 80020a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020aa:	611a      	str	r2, [r3, #16]
		}

		if (!Software_timer_check((uint32_t*) &I2C1_Timer_LED)) {
 80020ac:	4825      	ldr	r0, [pc, #148]	; (8002144 <SysTick_Handler+0xec>)
 80020ae:	f7fe fcee 	bl	8000a8e <Software_timer_check>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <SysTick_Handler+0x6e>
			I2C1_LED_OFF();
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <SysTick_Handler+0xe8>)
 80020c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020c4:	611a      	str	r2, [r3, #16]
		}

		if (!Software_timer_check((uint32_t*) &Error_Timer_LED)) {
 80020c6:	4820      	ldr	r0, [pc, #128]	; (8002148 <SysTick_Handler+0xf0>)
 80020c8:	f7fe fce1 	bl	8000a8e <Software_timer_check>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f083 0301 	eor.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <SysTick_Handler+0x88>
			ERROR_LED_OFF();
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <SysTick_Handler+0xe8>)
 80020da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020de:	611a      	str	r2, [r3, #16]
		}

		if (!Software_timer_check((uint32_t*) &USART1_Polling_Timer)) {
 80020e0:	481a      	ldr	r0, [pc, #104]	; (800214c <SysTick_Handler+0xf4>)
 80020e2:	f7fe fcd4 	bl	8000a8e <Software_timer_check>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <SysTick_Handler+0xa0>
			Task1 = true;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <SysTick_Handler+0xf8>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
		}

		if (!Software_timer_check((uint32_t*) &I2C1_Polling_Timer)) {
 80020f8:	4816      	ldr	r0, [pc, #88]	; (8002154 <SysTick_Handler+0xfc>)
 80020fa:	f7fe fcc8 	bl	8000a8e <Software_timer_check>
 80020fe:	4603      	mov	r3, r0
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <SysTick_Handler+0xb8>
			Task2 = true;
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <SysTick_Handler+0x100>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
		}
		if (!Software_timer_check((uint32_t*) &MQTT_Send_Timer)) {
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <SysTick_Handler+0x104>)
 8002112:	f7fe fcbc 	bl	8000a8e <Software_timer_check>
 8002116:	4603      	mov	r3, r0
 8002118:	f083 0301 	eor.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <SysTick_Handler+0xd0>
			Task3 = true;
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <SysTick_Handler+0x108>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
#if defined FreeRTOS_USE
	GPIOC->BSRR = GPIO_BSRR_BS13;
    GPIOC->BSRR = GPIO_BSRR_BR13;
	xPortSysTickHandler();
#endif
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000058 	.word	0x20000058
 8002130:	2000005c 	.word	0x2000005c
 8002134:	20000060 	.word	0x20000060
 8002138:	20000054 	.word	0x20000054
 800213c:	2000007c 	.word	0x2000007c
 8002140:	40010800 	.word	0x40010800
 8002144:	20000080 	.word	0x20000080
 8002148:	20000070 	.word	0x20000070
 800214c:	20000084 	.word	0x20000084
 8002150:	20000050 	.word	0x20000050
 8002154:	20000074 	.word	0x20000074
 8002158:	20000052 	.word	0x20000052
 800215c:	20000078 	.word	0x20000078
 8002160:	20000053 	.word	0x20000053

08002164 <TIM3_IRQHandler>:

bool LED_Network = false; //Помигаем светодиодом
extern uint8_t NETWORK_Status;

void TIM3_IRQHandler(void) {
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM3->SR, TIM_SR_UIF)) {
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <TIM3_IRQHandler+0x6c>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <TIM3_IRQHandler+0x1c>
		CLEAR_BIT(TIM3->SR, TIM_SR_UIF); //Сбросим флаг прерывания
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <TIM3_IRQHandler+0x6c>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <TIM3_IRQHandler+0x6c>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6113      	str	r3, [r2, #16]
	}

	if (flag_programm_start) {
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <TIM3_IRQHandler+0x70>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01e      	beq.n	80021c6 <TIM3_IRQHandler+0x62>
		if (NETWORK_Status != MQTT_STATUS_CONNECTED) {
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <TIM3_IRQHandler+0x74>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d01a      	beq.n	80021c6 <TIM3_IRQHandler+0x62>
			LED_Network = !LED_Network;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <TIM3_IRQHandler+0x78>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f083 0301 	eor.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <TIM3_IRQHandler+0x78>)
 80021ac:	701a      	strb	r2, [r3, #0]
			if (LED_Network) {
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <TIM3_IRQHandler+0x78>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <TIM3_IRQHandler+0x5a>
				WIFI_LED_ON();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <TIM3_IRQHandler+0x7c>)
 80021b8:	2210      	movs	r2, #16
 80021ba:	611a      	str	r2, [r3, #16]
			} else {
				WIFI_LED_OFF();
			}
		}
	}
}
 80021bc:	e003      	b.n	80021c6 <TIM3_IRQHandler+0x62>
				WIFI_LED_OFF();
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <TIM3_IRQHandler+0x7c>)
 80021c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40000400 	.word	0x40000400
 80021d4:	20000054 	.word	0x20000054
 80021d8:	20000036 	.word	0x20000036
 80021dc:	20000064 	.word	0x20000064
 80021e0:	40010800 	.word	0x40010800

080021e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	; (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	; (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002216:	f7ff ffe5 	bl	80021e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221a:	f000 f80f 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800221e:	f7fe fe03 	bl	8000e28 <main>
  bx lr
 8002222:	4770      	bx	lr
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800222c:	080022a4 	.word	0x080022a4
  ldr r2, =_sbss
 8002230:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002234:	200000bc 	.word	0x200000bc

08002238 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <BusFault_Handler>
	...

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2600      	movs	r6, #0
 8002240:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 f81a 	bl	8002284 <_init>
 8002250:	2600      	movs	r6, #0
 8002252:	4d0a      	ldr	r5, [pc, #40]	; (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <__libc_init_array+0x44>)
 8002256:	1b64      	subs	r4, r4, r5
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	0800229c 	.word	0x0800229c
 8002278:	0800229c 	.word	0x0800229c
 800227c:	0800229c 	.word	0x0800229c
 8002280:	080022a0 	.word	0x080022a0

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
